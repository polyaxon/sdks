/* tslint:disable */
/* eslint-disable */
/**
 * Polyaxon SDKs and REST API specification.
 *
 *
 * The version of the OpenAPI document: 2.8.1
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RuntimeError,
  V1EntitiesTags,
  V1EntitiesTransfer,
  V1ListActivitiesResponse,
  V1ListOrganizationMembersResponse,
  V1ListOrganizationsResponse,
  V1ListProjectVersionsResponse,
  V1ListRunArtifactsResponse,
  V1ListRunsResponse,
  V1MultiEventsResponse,
  V1Organization,
  V1OrganizationMember,
  V1Run,
  V1Uuids,
} from '../models';
import {
    RuntimeErrorFromJSON,
    RuntimeErrorToJSON,
    V1EntitiesTagsFromJSON,
    V1EntitiesTagsToJSON,
    V1EntitiesTransferFromJSON,
    V1EntitiesTransferToJSON,
    V1ListActivitiesResponseFromJSON,
    V1ListActivitiesResponseToJSON,
    V1ListOrganizationMembersResponseFromJSON,
    V1ListOrganizationMembersResponseToJSON,
    V1ListOrganizationsResponseFromJSON,
    V1ListOrganizationsResponseToJSON,
    V1ListProjectVersionsResponseFromJSON,
    V1ListProjectVersionsResponseToJSON,
    V1ListRunArtifactsResponseFromJSON,
    V1ListRunArtifactsResponseToJSON,
    V1ListRunsResponseFromJSON,
    V1ListRunsResponseToJSON,
    V1MultiEventsResponseFromJSON,
    V1MultiEventsResponseToJSON,
    V1OrganizationFromJSON,
    V1OrganizationToJSON,
    V1OrganizationMemberFromJSON,
    V1OrganizationMemberToJSON,
    V1RunFromJSON,
    V1RunToJSON,
    V1UuidsFromJSON,
    V1UuidsToJSON,
} from '../models';

export interface ApproveOrganizationRunsRequest {
    owner: string;
    body: V1Uuids;
}

export interface ArchiveOrganizationRunsRequest {
    owner: string;
    body: V1Uuids;
}

export interface BookmarkOrganizationRunsRequest {
    owner: string;
    body: V1Uuids;
}

export interface CreateOrganizationRequest {
    body: V1Organization;
}

export interface CreateOrganizationMemberRequest {
    owner: string;
    body: V1OrganizationMember;
    email?: string;
}

export interface DeleteOrganizationRequest {
    owner: string;
    usage?: string;
}

export interface DeleteOrganizationInvitationRequest {
    owner: string;
    memberUser?: string;
    memberUserEmail?: string;
    memberRole?: string;
    memberKind?: string;
    memberCreatedAt?: Date;
    memberUpdatedAt?: Date;
    email?: string;
}

export interface DeleteOrganizationMemberRequest {
    owner: string;
    name: string;
}

export interface DeleteOrganizationRunsRequest {
    owner: string;
    body: V1Uuids;
}

export interface GetOrganizationRequest {
    owner: string;
    usage?: string;
}

export interface GetOrganizationActivitiesRequest {
    owner: string;
    offset?: number;
    limit?: number;
    sort?: string;
    query?: string;
    bookmarks?: boolean;
    mode?: string;
    noPage?: boolean;
}

export interface GetOrganizationInvitationRequest {
    owner: string;
    memberUser?: string;
    memberUserEmail?: string;
    memberRole?: string;
    memberKind?: string;
    memberCreatedAt?: Date;
    memberUpdatedAt?: Date;
    email?: string;
}

export interface GetOrganizationMemberRequest {
    owner: string;
    name: string;
}

export interface GetOrganizationMultiRunEventsRequest {
    namespace: string;
    owner: string;
    kind: GetOrganizationMultiRunEventsKindEnum;
    entity?: string;
    names?: string;
    runs?: string;
    orient?: string;
    force?: boolean;
    sample?: number;
    connection?: string;
    status?: GetOrganizationMultiRunEventsStatusEnum;
}

export interface GetOrganizationMultiRunImportanceRequest {
    namespace: string;
    owner: string;
    body: object;
    entity?: string;
}

export interface GetOrganizationRunRequest {
    owner: string;
    uuid: string;
}

export interface GetOrganizationRunsRequest {
    owner: string;
    offset?: number;
    limit?: number;
    sort?: string;
    query?: string;
    bookmarks?: boolean;
    mode?: string;
    noPage?: boolean;
}

export interface GetOrganizationRunsArtifactsLineageRequest {
    owner: string;
    name?: string;
    offset?: number;
    limit?: number;
    sort?: string;
    query?: string;
    bookmarks?: boolean;
    mode?: string;
    noPage?: boolean;
}

export interface GetOrganizationSettingsRequest {
    owner: string;
    organizationUser?: string;
    organizationUserEmail?: string;
    organizationName?: string;
    organizationIsPublic?: boolean;
    organizationCreatedAt?: Date;
    organizationUpdatedAt?: Date;
    organizationSupportRevokeAt?: Date;
    organizationExpiration?: number;
    organizationRole?: string;
    organizationQueue?: string;
    organizationDefaultPresets?: Array<string>;
    organizationDefaultPresetsOrdered?: Array<string>;
    organizationIsCloudViewable?: boolean;
    organizationArchivedDeletionInterval?: number;
}

export interface GetOrganizationStatsRequest {
    owner: string;
    offset?: number;
    limit?: number;
    sort?: string;
    query?: string;
    bookmarks?: boolean;
    mode?: string;
    kind?: string;
    aggregate?: string;
    groupby?: string;
    trunc?: string;
}

export interface GetOrganizationVersionsRequest {
    owner: string;
    kind: string;
    offset?: number;
    limit?: number;
    sort?: string;
    query?: string;
    noPage?: boolean;
}

export interface InvalidateOrganizationRunsRequest {
    owner: string;
    body: V1Uuids;
}

export interface ListOrganizationMemberNamesRequest {
    owner: string;
    offset?: number;
    limit?: number;
    sort?: string;
    query?: string;
    bookmarks?: boolean;
    mode?: string;
    noPage?: boolean;
}

export interface ListOrganizationMembersRequest {
    owner: string;
    offset?: number;
    limit?: number;
    sort?: string;
    query?: string;
    bookmarks?: boolean;
    mode?: string;
    noPage?: boolean;
}

export interface OrganizationLicenseRequest {
    owner: string;
    body: V1Organization;
}

export interface OrganizationPlanRequest {
    owner: string;
    body: V1Organization;
}

export interface PatchOrganizationRequest {
    owner: string;
    body: V1Organization;
}

export interface PatchOrganizationInvitationRequest {
    owner: string;
    body: V1OrganizationMember;
    email?: string;
}

export interface PatchOrganizationMemberRequest {
    owner: string;
    memberUser: string;
    body: V1OrganizationMember;
    email?: string;
}

export interface PatchOrganizationSettingsRequest {
    owner: string;
    body: V1Organization;
}

export interface ResendOrganizationInvitationRequest {
    owner: string;
    body: V1OrganizationMember;
    email?: string;
}

export interface RestoreOrganizationRunsRequest {
    owner: string;
    body: V1Uuids;
}

export interface SkipOrganizationRunsRequest {
    owner: string;
    body: V1Uuids;
}

export interface StopOrganizationRunsRequest {
    owner: string;
    body: V1Uuids;
}

export interface TagOrganizationRunsRequest {
    owner: string;
    body: V1EntitiesTags;
}

export interface TransferOrganizationRunsRequest {
    owner: string;
    body: V1EntitiesTransfer;
}

export interface UpdateOrganizationRequest {
    owner: string;
    body: V1Organization;
}

export interface UpdateOrganizationInvitationRequest {
    owner: string;
    body: V1OrganizationMember;
    email?: string;
}

export interface UpdateOrganizationMemberRequest {
    owner: string;
    memberUser: string;
    body: V1OrganizationMember;
    email?: string;
}

export interface UpdateOrganizationSettingsRequest {
    owner: string;
    body: V1Organization;
}

/**
 *
 */
export class OrganizationsV1Api extends runtime.BaseAPI {

    /**
     * Approve cross-project runs selection
     */
    async approveOrganizationRunsRaw(requestParameters: ApproveOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling approveOrganizationRuns.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling approveOrganizationRuns.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/runs/approve`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1UuidsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Approve cross-project runs selection
     */
    async approveOrganizationRuns(requestParameters: ApproveOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.approveOrganizationRunsRaw(requestParameters, initOverrides);
    }

    /**
     * Archive cross-project runs selection
     */
    async archiveOrganizationRunsRaw(requestParameters: ArchiveOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling archiveOrganizationRuns.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling archiveOrganizationRuns.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/runs/archive`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1UuidsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Archive cross-project runs selection
     */
    async archiveOrganizationRuns(requestParameters: ArchiveOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.archiveOrganizationRunsRaw(requestParameters, initOverrides);
    }

    /**
     * Bookmark cross-project runs selection
     */
    async bookmarkOrganizationRunsRaw(requestParameters: BookmarkOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling bookmarkOrganizationRuns.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling bookmarkOrganizationRuns.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/runs/bookmark`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1UuidsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Bookmark cross-project runs selection
     */
    async bookmarkOrganizationRuns(requestParameters: BookmarkOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bookmarkOrganizationRunsRaw(requestParameters, initOverrides);
    }

    /**
     * Create organization
     */
    async createOrganizationRaw(requestParameters: CreateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Organization>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1OrganizationToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OrganizationFromJSON(jsonValue));
    }

    /**
     * Create organization
     */
    async createOrganization(requestParameters: CreateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Organization> {
        const response = await this.createOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create organization member
     */
    async createOrganizationMemberRaw(requestParameters: CreateOrganizationMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OrganizationMember>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling createOrganizationMember.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createOrganizationMember.');
        }

        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/members`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1OrganizationMemberToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OrganizationMemberFromJSON(jsonValue));
    }

    /**
     * Create organization member
     */
    async createOrganizationMember(requestParameters: CreateOrganizationMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OrganizationMember> {
        const response = await this.createOrganizationMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete organization
     */
    async deleteOrganizationRaw(requestParameters: DeleteOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling deleteOrganization.');
        }

        const queryParameters: any = {};

        if (requestParameters.usage !== undefined) {
            queryParameters['usage'] = requestParameters.usage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete organization
     */
    async deleteOrganization(requestParameters: DeleteOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOrganizationRaw(requestParameters, initOverrides);
    }

    /**
     * Delete organization invitation details
     */
    async deleteOrganizationInvitationRaw(requestParameters: DeleteOrganizationInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling deleteOrganizationInvitation.');
        }

        const queryParameters: any = {};

        if (requestParameters.memberUser !== undefined) {
            queryParameters['member.user'] = requestParameters.memberUser;
        }

        if (requestParameters.memberUserEmail !== undefined) {
            queryParameters['member.user_email'] = requestParameters.memberUserEmail;
        }

        if (requestParameters.memberRole !== undefined) {
            queryParameters['member.role'] = requestParameters.memberRole;
        }

        if (requestParameters.memberKind !== undefined) {
            queryParameters['member.kind'] = requestParameters.memberKind;
        }

        if (requestParameters.memberCreatedAt !== undefined) {
            queryParameters['member.created_at'] = (requestParameters.memberCreatedAt as any).toISOString();
        }

        if (requestParameters.memberUpdatedAt !== undefined) {
            queryParameters['member.updated_at'] = (requestParameters.memberUpdatedAt as any).toISOString();
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/invitations`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete organization invitation details
     */
    async deleteOrganizationInvitation(requestParameters: DeleteOrganizationInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOrganizationInvitationRaw(requestParameters, initOverrides);
    }

    /**
     * Delete organization member details
     */
    async deleteOrganizationMemberRaw(requestParameters: DeleteOrganizationMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling deleteOrganizationMember.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteOrganizationMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/members/{name}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete organization member details
     */
    async deleteOrganizationMember(requestParameters: DeleteOrganizationMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOrganizationMemberRaw(requestParameters, initOverrides);
    }

    /**
     * Delete cross-project runs selection
     */
    async deleteOrganizationRunsRaw(requestParameters: DeleteOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling deleteOrganizationRuns.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling deleteOrganizationRuns.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/runs/delete`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1UuidsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete cross-project runs selection
     */
    async deleteOrganizationRuns(requestParameters: DeleteOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOrganizationRunsRaw(requestParameters, initOverrides);
    }

    /**
     * Get organization
     */
    async getOrganizationRaw(requestParameters: GetOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Organization>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling getOrganization.');
        }

        const queryParameters: any = {};

        if (requestParameters.usage !== undefined) {
            queryParameters['usage'] = requestParameters.usage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OrganizationFromJSON(jsonValue));
    }

    /**
     * Get organization
     */
    async getOrganization(requestParameters: GetOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Organization> {
        const response = await this.getOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get organization activities
     */
    async getOrganizationActivitiesRaw(requestParameters: GetOrganizationActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListActivitiesResponse>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling getOrganizationActivities.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.bookmarks !== undefined) {
            queryParameters['bookmarks'] = requestParameters.bookmarks;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        if (requestParameters.noPage !== undefined) {
            queryParameters['no_page'] = requestParameters.noPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/activities`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListActivitiesResponseFromJSON(jsonValue));
    }

    /**
     * Get organization activities
     */
    async getOrganizationActivities(requestParameters: GetOrganizationActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListActivitiesResponse> {
        const response = await this.getOrganizationActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get organization invitation details
     */
    async getOrganizationInvitationRaw(requestParameters: GetOrganizationInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OrganizationMember>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling getOrganizationInvitation.');
        }

        const queryParameters: any = {};

        if (requestParameters.memberUser !== undefined) {
            queryParameters['member.user'] = requestParameters.memberUser;
        }

        if (requestParameters.memberUserEmail !== undefined) {
            queryParameters['member.user_email'] = requestParameters.memberUserEmail;
        }

        if (requestParameters.memberRole !== undefined) {
            queryParameters['member.role'] = requestParameters.memberRole;
        }

        if (requestParameters.memberKind !== undefined) {
            queryParameters['member.kind'] = requestParameters.memberKind;
        }

        if (requestParameters.memberCreatedAt !== undefined) {
            queryParameters['member.created_at'] = (requestParameters.memberCreatedAt as any).toISOString();
        }

        if (requestParameters.memberUpdatedAt !== undefined) {
            queryParameters['member.updated_at'] = (requestParameters.memberUpdatedAt as any).toISOString();
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/invitations`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OrganizationMemberFromJSON(jsonValue));
    }

    /**
     * Get organization invitation details
     */
    async getOrganizationInvitation(requestParameters: GetOrganizationInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OrganizationMember> {
        const response = await this.getOrganizationInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get organization member details
     */
    async getOrganizationMemberRaw(requestParameters: GetOrganizationMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OrganizationMember>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling getOrganizationMember.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getOrganizationMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/members/{name}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OrganizationMemberFromJSON(jsonValue));
    }

    /**
     * Get organization member details
     */
    async getOrganizationMember(requestParameters: GetOrganizationMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OrganizationMember> {
        const response = await this.getOrganizationMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get multi runs events
     */
    async getOrganizationMultiRunEventsRaw(requestParameters: GetOrganizationMultiRunEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1MultiEventsResponse>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling getOrganizationMultiRunEvents.');
        }

        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling getOrganizationMultiRunEvents.');
        }

        if (requestParameters.kind === null || requestParameters.kind === undefined) {
            throw new runtime.RequiredError('kind','Required parameter requestParameters.kind was null or undefined when calling getOrganizationMultiRunEvents.');
        }

        const queryParameters: any = {};

        if (requestParameters.entity !== undefined) {
            queryParameters['entity'] = requestParameters.entity;
        }

        if (requestParameters.names !== undefined) {
            queryParameters['names'] = requestParameters.names;
        }

        if (requestParameters.runs !== undefined) {
            queryParameters['runs'] = requestParameters.runs;
        }

        if (requestParameters.orient !== undefined) {
            queryParameters['orient'] = requestParameters.orient;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        if (requestParameters.sample !== undefined) {
            queryParameters['sample'] = requestParameters.sample;
        }

        if (requestParameters.connection !== undefined) {
            queryParameters['connection'] = requestParameters.connection;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/streams/v1/{namespace}/orgs/{owner}/runs/multi/events/{kind}`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))).replace(`{${"kind"}}`, encodeURIComponent(String(requestParameters.kind))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1MultiEventsResponseFromJSON(jsonValue));
    }

    /**
     * Get multi runs events
     */
    async getOrganizationMultiRunEvents(requestParameters: GetOrganizationMultiRunEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1MultiEventsResponse> {
        const response = await this.getOrganizationMultiRunEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get multi run importance
     */
    async getOrganizationMultiRunImportanceRaw(requestParameters: GetOrganizationMultiRunImportanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1MultiEventsResponse>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling getOrganizationMultiRunImportance.');
        }

        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling getOrganizationMultiRunImportance.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getOrganizationMultiRunImportance.');
        }

        const queryParameters: any = {};

        if (requestParameters.entity !== undefined) {
            queryParameters['entity'] = requestParameters.entity;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/streams/v1/{namespace}/orgs/{owner}/runs/multi/importance`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1MultiEventsResponseFromJSON(jsonValue));
    }

    /**
     * Get multi run importance
     */
    async getOrganizationMultiRunImportance(requestParameters: GetOrganizationMultiRunImportanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1MultiEventsResponse> {
        const response = await this.getOrganizationMultiRunImportanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a run in an organization
     */
    async getOrganizationRunRaw(requestParameters: GetOrganizationRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Run>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling getOrganizationRun.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getOrganizationRun.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/runs/{uuid}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1RunFromJSON(jsonValue));
    }

    /**
     * Get a run in an organization
     */
    async getOrganizationRun(requestParameters: GetOrganizationRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Run> {
        const response = await this.getOrganizationRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all runs in an organization
     */
    async getOrganizationRunsRaw(requestParameters: GetOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListRunsResponse>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling getOrganizationRuns.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.bookmarks !== undefined) {
            queryParameters['bookmarks'] = requestParameters.bookmarks;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        if (requestParameters.noPage !== undefined) {
            queryParameters['no_page'] = requestParameters.noPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/runs`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListRunsResponseFromJSON(jsonValue));
    }

    /**
     * Get all runs in an organization
     */
    async getOrganizationRuns(requestParameters: GetOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListRunsResponse> {
        const response = await this.getOrganizationRunsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get runs artifacts lineage
     */
    async getOrganizationRunsArtifactsLineageRaw(requestParameters: GetOrganizationRunsArtifactsLineageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListRunArtifactsResponse>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling getOrganizationRunsArtifactsLineage.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.bookmarks !== undefined) {
            queryParameters['bookmarks'] = requestParameters.bookmarks;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        if (requestParameters.noPage !== undefined) {
            queryParameters['no_page'] = requestParameters.noPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/runs/lineage/artifacts`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListRunArtifactsResponseFromJSON(jsonValue));
    }

    /**
     * Get runs artifacts lineage
     */
    async getOrganizationRunsArtifactsLineage(requestParameters: GetOrganizationRunsArtifactsLineageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListRunArtifactsResponse> {
        const response = await this.getOrganizationRunsArtifactsLineageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get organization settings
     */
    async getOrganizationSettingsRaw(requestParameters: GetOrganizationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Organization>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling getOrganizationSettings.');
        }

        const queryParameters: any = {};

        if (requestParameters.organizationUser !== undefined) {
            queryParameters['organization.user'] = requestParameters.organizationUser;
        }

        if (requestParameters.organizationUserEmail !== undefined) {
            queryParameters['organization.user_email'] = requestParameters.organizationUserEmail;
        }

        if (requestParameters.organizationName !== undefined) {
            queryParameters['organization.name'] = requestParameters.organizationName;
        }

        if (requestParameters.organizationIsPublic !== undefined) {
            queryParameters['organization.is_public'] = requestParameters.organizationIsPublic;
        }

        if (requestParameters.organizationCreatedAt !== undefined) {
            queryParameters['organization.created_at'] = (requestParameters.organizationCreatedAt as any).toISOString();
        }

        if (requestParameters.organizationUpdatedAt !== undefined) {
            queryParameters['organization.updated_at'] = (requestParameters.organizationUpdatedAt as any).toISOString();
        }

        if (requestParameters.organizationSupportRevokeAt !== undefined) {
            queryParameters['organization.support_revoke_at'] = (requestParameters.organizationSupportRevokeAt as any).toISOString();
        }

        if (requestParameters.organizationExpiration !== undefined) {
            queryParameters['organization.expiration'] = requestParameters.organizationExpiration;
        }

        if (requestParameters.organizationRole !== undefined) {
            queryParameters['organization.role'] = requestParameters.organizationRole;
        }

        if (requestParameters.organizationQueue !== undefined) {
            queryParameters['organization.queue'] = requestParameters.organizationQueue;
        }

        if (requestParameters.organizationDefaultPresets) {
            queryParameters['organization.default_presets'] = requestParameters.organizationDefaultPresets;
        }

        if (requestParameters.organizationDefaultPresetsOrdered) {
            queryParameters['organization.default_presets_ordered'] = requestParameters.organizationDefaultPresetsOrdered;
        }

        if (requestParameters.organizationIsCloudViewable !== undefined) {
            queryParameters['organization.is_cloud_viewable'] = requestParameters.organizationIsCloudViewable;
        }

        if (requestParameters.organizationArchivedDeletionInterval !== undefined) {
            queryParameters['organization.archived_deletion_interval'] = requestParameters.organizationArchivedDeletionInterval;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/settings`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OrganizationFromJSON(jsonValue));
    }

    /**
     * Get organization settings
     */
    async getOrganizationSettings(requestParameters: GetOrganizationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Organization> {
        const response = await this.getOrganizationSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get organization stats
     */
    async getOrganizationStatsRaw(requestParameters: GetOrganizationStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling getOrganizationStats.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.bookmarks !== undefined) {
            queryParameters['bookmarks'] = requestParameters.bookmarks;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        if (requestParameters.kind !== undefined) {
            queryParameters['kind'] = requestParameters.kind;
        }

        if (requestParameters.aggregate !== undefined) {
            queryParameters['aggregate'] = requestParameters.aggregate;
        }

        if (requestParameters.groupby !== undefined) {
            queryParameters['groupby'] = requestParameters.groupby;
        }

        if (requestParameters.trunc !== undefined) {
            queryParameters['trunc'] = requestParameters.trunc;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/stats`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get organization stats
     */
    async getOrganizationStats(requestParameters: GetOrganizationStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getOrganizationStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all runs in an organization
     */
    async getOrganizationVersionsRaw(requestParameters: GetOrganizationVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListProjectVersionsResponse>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling getOrganizationVersions.');
        }

        if (requestParameters.kind === null || requestParameters.kind === undefined) {
            throw new runtime.RequiredError('kind','Required parameter requestParameters.kind was null or undefined when calling getOrganizationVersions.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.noPage !== undefined) {
            queryParameters['no_page'] = requestParameters.noPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/versions/{kind}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))).replace(`{${"kind"}}`, encodeURIComponent(String(requestParameters.kind))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListProjectVersionsResponseFromJSON(jsonValue));
    }

    /**
     * Get all runs in an organization
     */
    async getOrganizationVersions(requestParameters: GetOrganizationVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListProjectVersionsResponse> {
        const response = await this.getOrganizationVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Invalidate cross-project runs selection
     */
    async invalidateOrganizationRunsRaw(requestParameters: InvalidateOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling invalidateOrganizationRuns.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling invalidateOrganizationRuns.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/runs/invalidate`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1UuidsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Invalidate cross-project runs selection
     */
    async invalidateOrganizationRuns(requestParameters: InvalidateOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.invalidateOrganizationRunsRaw(requestParameters, initOverrides);
    }

    /**
     * Get organization member names
     */
    async listOrganizationMemberNamesRaw(requestParameters: ListOrganizationMemberNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListOrganizationMembersResponse>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling listOrganizationMemberNames.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.bookmarks !== undefined) {
            queryParameters['bookmarks'] = requestParameters.bookmarks;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        if (requestParameters.noPage !== undefined) {
            queryParameters['no_page'] = requestParameters.noPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/members/names`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListOrganizationMembersResponseFromJSON(jsonValue));
    }

    /**
     * Get organization member names
     */
    async listOrganizationMemberNames(requestParameters: ListOrganizationMemberNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListOrganizationMembersResponse> {
        const response = await this.listOrganizationMemberNamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get organization members
     */
    async listOrganizationMembersRaw(requestParameters: ListOrganizationMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListOrganizationMembersResponse>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling listOrganizationMembers.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.bookmarks !== undefined) {
            queryParameters['bookmarks'] = requestParameters.bookmarks;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        if (requestParameters.noPage !== undefined) {
            queryParameters['no_page'] = requestParameters.noPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/members`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListOrganizationMembersResponseFromJSON(jsonValue));
    }

    /**
     * Get organization members
     */
    async listOrganizationMembers(requestParameters: ListOrganizationMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListOrganizationMembersResponse> {
        const response = await this.listOrganizationMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List organizations names
     */
    async listOrganizationNamesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListOrganizationsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/names`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListOrganizationsResponseFromJSON(jsonValue));
    }

    /**
     * List organizations names
     */
    async listOrganizationNames(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListOrganizationsResponse> {
        const response = await this.listOrganizationNamesRaw(initOverrides);
        return await response.value();
    }

    /**
     * List organizations
     */
    async listOrganizationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListOrganizationsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListOrganizationsResponseFromJSON(jsonValue));
    }

    /**
     * List organizations
     */
    async listOrganizations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListOrganizationsResponse> {
        const response = await this.listOrganizationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Organization license
     */
    async organizationLicenseRaw(requestParameters: OrganizationLicenseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Organization>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling organizationLicense.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling organizationLicense.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/license`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1OrganizationToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OrganizationFromJSON(jsonValue));
    }

    /**
     * Organization license
     */
    async organizationLicense(requestParameters: OrganizationLicenseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Organization> {
        const response = await this.organizationLicenseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Organization plan
     */
    async organizationPlanRaw(requestParameters: OrganizationPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Organization>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling organizationPlan.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling organizationPlan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/plan`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1OrganizationToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OrganizationFromJSON(jsonValue));
    }

    /**
     * Organization plan
     */
    async organizationPlan(requestParameters: OrganizationPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Organization> {
        const response = await this.organizationPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Patch organization
     */
    async patchOrganizationRaw(requestParameters: PatchOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Organization>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling patchOrganization.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V1OrganizationToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OrganizationFromJSON(jsonValue));
    }

    /**
     * Patch organization
     */
    async patchOrganization(requestParameters: PatchOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Organization> {
        const response = await this.patchOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Patch organization invitation
     */
    async patchOrganizationInvitationRaw(requestParameters: PatchOrganizationInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OrganizationMember>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling patchOrganizationInvitation.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchOrganizationInvitation.');
        }

        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/invitations`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V1OrganizationMemberToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OrganizationMemberFromJSON(jsonValue));
    }

    /**
     * Patch organization invitation
     */
    async patchOrganizationInvitation(requestParameters: PatchOrganizationInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OrganizationMember> {
        const response = await this.patchOrganizationInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Patch organization member
     */
    async patchOrganizationMemberRaw(requestParameters: PatchOrganizationMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OrganizationMember>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling patchOrganizationMember.');
        }

        if (requestParameters.memberUser === null || requestParameters.memberUser === undefined) {
            throw new runtime.RequiredError('memberUser','Required parameter requestParameters.memberUser was null or undefined when calling patchOrganizationMember.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchOrganizationMember.');
        }

        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/members/{member.user}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))).replace(`{${"member.user"}}`, encodeURIComponent(String(requestParameters.memberUser))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V1OrganizationMemberToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OrganizationMemberFromJSON(jsonValue));
    }

    /**
     * Patch organization member
     */
    async patchOrganizationMember(requestParameters: PatchOrganizationMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OrganizationMember> {
        const response = await this.patchOrganizationMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Patch oranization settings
     */
    async patchOrganizationSettingsRaw(requestParameters: PatchOrganizationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Organization>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling patchOrganizationSettings.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchOrganizationSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/settings`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V1OrganizationToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OrganizationFromJSON(jsonValue));
    }

    /**
     * Patch oranization settings
     */
    async patchOrganizationSettings(requestParameters: PatchOrganizationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Organization> {
        const response = await this.patchOrganizationSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resend organization invitation
     */
    async resendOrganizationInvitationRaw(requestParameters: ResendOrganizationInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OrganizationMember>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling resendOrganizationInvitation.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling resendOrganizationInvitation.');
        }

        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/invitations`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1OrganizationMemberToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OrganizationMemberFromJSON(jsonValue));
    }

    /**
     * Resend organization invitation
     */
    async resendOrganizationInvitation(requestParameters: ResendOrganizationInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OrganizationMember> {
        const response = await this.resendOrganizationInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Restore cross-project runs selection
     */
    async restoreOrganizationRunsRaw(requestParameters: RestoreOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling restoreOrganizationRuns.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling restoreOrganizationRuns.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/runs/restore`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1UuidsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Restore cross-project runs selection
     */
    async restoreOrganizationRuns(requestParameters: RestoreOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.restoreOrganizationRunsRaw(requestParameters, initOverrides);
    }

    /**
     * Skip cross-project runs selection
     */
    async skipOrganizationRunsRaw(requestParameters: SkipOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling skipOrganizationRuns.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling skipOrganizationRuns.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/runs/Skip`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1UuidsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Skip cross-project runs selection
     */
    async skipOrganizationRuns(requestParameters: SkipOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.skipOrganizationRunsRaw(requestParameters, initOverrides);
    }

    /**
     * Stop cross-project runs selection
     */
    async stopOrganizationRunsRaw(requestParameters: StopOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling stopOrganizationRuns.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling stopOrganizationRuns.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/runs/stop`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1UuidsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Stop cross-project runs selection
     */
    async stopOrganizationRuns(requestParameters: StopOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stopOrganizationRunsRaw(requestParameters, initOverrides);
    }

    /**
     * Tag cross-project runs selection
     */
    async tagOrganizationRunsRaw(requestParameters: TagOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling tagOrganizationRuns.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling tagOrganizationRuns.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/runs/tag`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1EntitiesTagsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Tag cross-project runs selection
     */
    async tagOrganizationRuns(requestParameters: TagOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tagOrganizationRunsRaw(requestParameters, initOverrides);
    }

    /**
     * Transfer cross-project runs selection to a new project
     */
    async transferOrganizationRunsRaw(requestParameters: TransferOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling transferOrganizationRuns.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling transferOrganizationRuns.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/runs/transfer`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1EntitiesTransferToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Transfer cross-project runs selection to a new project
     */
    async transferOrganizationRuns(requestParameters: TransferOrganizationRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transferOrganizationRunsRaw(requestParameters, initOverrides);
    }

    /**
     * Update organization
     */
    async updateOrganizationRaw(requestParameters: UpdateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Organization>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling updateOrganization.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1OrganizationToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OrganizationFromJSON(jsonValue));
    }

    /**
     * Update organization
     */
    async updateOrganization(requestParameters: UpdateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Organization> {
        const response = await this.updateOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update organization invitation
     */
    async updateOrganizationInvitationRaw(requestParameters: UpdateOrganizationInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OrganizationMember>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling updateOrganizationInvitation.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateOrganizationInvitation.');
        }

        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/invitations`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1OrganizationMemberToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OrganizationMemberFromJSON(jsonValue));
    }

    /**
     * Update organization invitation
     */
    async updateOrganizationInvitation(requestParameters: UpdateOrganizationInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OrganizationMember> {
        const response = await this.updateOrganizationInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update organization member
     */
    async updateOrganizationMemberRaw(requestParameters: UpdateOrganizationMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1OrganizationMember>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling updateOrganizationMember.');
        }

        if (requestParameters.memberUser === null || requestParameters.memberUser === undefined) {
            throw new runtime.RequiredError('memberUser','Required parameter requestParameters.memberUser was null or undefined when calling updateOrganizationMember.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateOrganizationMember.');
        }

        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/members/{member.user}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))).replace(`{${"member.user"}}`, encodeURIComponent(String(requestParameters.memberUser))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1OrganizationMemberToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OrganizationMemberFromJSON(jsonValue));
    }

    /**
     * Update organization member
     */
    async updateOrganizationMember(requestParameters: UpdateOrganizationMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1OrganizationMember> {
        const response = await this.updateOrganizationMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update organization settings
     */
    async updateOrganizationSettingsRaw(requestParameters: UpdateOrganizationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Organization>> {
        if (requestParameters.owner === null || requestParameters.owner === undefined) {
            throw new runtime.RequiredError('owner','Required parameter requestParameters.owner was null or undefined when calling updateOrganizationSettings.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateOrganizationSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/v1/orgs/{owner}/settings`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters.owner))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1OrganizationToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1OrganizationFromJSON(jsonValue));
    }

    /**
     * Update organization settings
     */
    async updateOrganizationSettings(requestParameters: UpdateOrganizationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Organization> {
        const response = await this.updateOrganizationSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetOrganizationMultiRunEventsKindEnum = {
    Model: 'model',
    Audio: 'audio',
    Video: 'video',
    Histogram: 'histogram',
    Image: 'image',
    Tensor: 'tensor',
    Dataframe: 'dataframe',
    Chart: 'chart',
    Csv: 'csv',
    Tsv: 'tsv',
    Psv: 'psv',
    Ssv: 'ssv',
    Metric: 'metric',
    Env: 'env',
    Html: 'html',
    Text: 'text',
    File: 'file',
    Dir: 'dir',
    Dockerfile: 'dockerfile',
    DockerImage: 'docker_image',
    Data: 'data',
    Coderef: 'coderef',
    Table: 'table',
    Tensorboard: 'tensorboard',
    Curve: 'curve',
    Confusion: 'confusion',
    Analysis: 'analysis',
    Iteration: 'iteration',
    Markdown: 'markdown',
    System: 'system',
    Span: 'span',
    Artifact: 'artifact'
} as const;
export type GetOrganizationMultiRunEventsKindEnum = typeof GetOrganizationMultiRunEventsKindEnum[keyof typeof GetOrganizationMultiRunEventsKindEnum];
/**
 * @export
 */
export const GetOrganizationMultiRunEventsStatusEnum = {
    Created: 'created',
    Resuming: 'resuming',
    OnSchedule: 'on_schedule',
    Compiled: 'compiled',
    Queued: 'queued',
    Scheduled: 'scheduled',
    Starting: 'starting',
    Running: 'running',
    Processing: 'processing',
    Stopping: 'stopping',
    Failed: 'failed',
    Stopped: 'stopped',
    Succeeded: 'succeeded',
    Skipped: 'skipped',
    Warning: 'warning',
    Unschedulable: 'unschedulable',
    UpstreamFailed: 'upstream_failed',
    Retrying: 'retrying',
    Unknown: 'unknown',
    Done: 'done'
} as const;
export type GetOrganizationMultiRunEventsStatusEnum = typeof GetOrganizationMultiRunEventsStatusEnum[keyof typeof GetOrganizationMultiRunEventsStatusEnum];
