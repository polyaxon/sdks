syntax = "proto3";

package v1;

import "google/protobuf/any.proto";

option go_package = "v1/api";

message KV {
  string key = 1;
  google.protobuf.Any value = 2;
}

// Request data with user namespace
message UserResourceRequest {
  // User
  string user = 1;
}

message OwnerRequest {
  // Owner of the namespace
  string owner = 1;
}

// Request data with owner namespace
message OwnerResourceRequest {
  // Owner of the namespace
  string owner = 1;

  // Owner usage query param
  string usage = 2;
}

message UuidResourceRequest {
  // UUid of the namespace
  string uuid = 1;
}

// Request data to get/delete entity
message OwnerEntityResourceRequestByUidCascade {
  // Owner of the namespace
  string owner = 1;

  // Uuid identifier of the entity
  string uuid = 2;

  // Flag to handle sub-entities
  bool cascade = 3;
}

// Request data to get/delete entity
message OwnerEntityResourceRequestByUid {
  // Owner of the namespace
  string owner = 1;

  // Uuid identifier of the entity
  string uuid = 2;
}

// Request data with owner/entity namespace
message OwnerEntityResourceRequestByName {
  // Owner of the namespace
  string owner = 1;

  // Component under namespace
  string name = 2;
}

// Request data to get/delete sub-entity
message OwnerSubEntityResourceRequestByUid {
  // Owner of the namespace
  string owner = 1;

  // Entity: project name, hub name, registry name, ...
  string entity = 2;

  // Uuid identifier of the sub-entity
  string uuid = 3;
}

// Request data with owner/entity/sub-entity namespace
message OwnerSubEntityResourceRequestByName {
  // Owner of the namespace
  string owner = 1;

  // Entity: project name, hub name, registry name, ...
  string entity = 2;

  // Sub-entity name
  string name = 3;
}

// Request data with owner/entity/sub-entity namespace
message OwnerEntityVersionResourceRequestByName {
  // Owner of the namespace
  string owner = 1;

  // Entity: project name, hub name, registry name, ...
  string entity = 2;

  // Version Kind
  string kind = 3;

  // Sub-entity name
  string name = 4;
}

// Request data with owner/team/member namespace
message TeamMemeberResourceRequest {
  // Owner of the namespace
  string owner = 1;

  // Team under namespace
  string team = 2;

  // Member under team
  string user = 3;
}

message Uuids {
  repeated string uuids = 1;
}

message EntitiesTags {
  repeated string uuids = 1;
  repeated string tags = 2;
}

message EntitiesTransfer {
  repeated string uuids = 1;
  string project = 2;
}

// Request to act on multiple entities under an owner
message OwnerResourceUuidsBodyRequest {
  // Owner of the namespace
  string owner = 1;

  // Uuids of the entities
  Uuids uuids = 2;
}


// Request to act on multiple entities under entity
message OwnerEntityResourceUuidsBodyRequest {
  // Owner of the namespace
  string owner = 1;

  // Entity under namespace
  string name = 2;

  // Uuids of the entities
  Uuids uuids = 3;
}

// Request to tag multiple entities under an owner
message OwnerTagResourceUuidsBodyRequest {
  // Owner of the namespace
  string owner = 1;

  // Data
  EntitiesTags data = 3;
}

// Request to tag multiple entities under entity
message OwnerEntityTagResourceUuidsBodyRequest {
  // Owner of the namespace
  string owner = 1;

  // Entity under namespace
  string name = 2;

  // Data
  EntitiesTags data = 3;
}

// Request to transfer multiple entities under an owner
message OwnerTransferResourceUuidsBodyRequest {
  // Owner of the namespace
  string owner = 1;

  // Data
  EntitiesTransfer data = 3;
}

// Request to transfer multiple entities under entity
message OwnerEntityTransferResourceUuidsBodyRequest {
  // Owner of the namespace
  string owner = 1;

  // Entity under namespace
  string name = 2;

  // Data
  EntitiesTransfer data = 3;
}


// Request list data
message ResourceListRequest {
  // Pagination offset
  int32 offset = 1;

  // Limit size
  int32 limit = 2;

  // Sort to order the search
  string sort = 3;

  // Query filter the search
  string query = 4;

  // No pagination
  bool no_page = 5;
}

// Request list data with user namespace
message UserResourceListRequest {
  // User
  string user = 1;

  // Pagination offset
  int32 offset = 2;

  // Limit size
  int32 limit = 3;

  // Sort to order the search
  string sort = 4;

  // Query filter the search
  string query = 5;

  // No pagination
  bool no_page = 6;
}

// Request list data with owner namespace
message OwnerResourceListRequest {
  // Owner of the namespace
  string owner = 1;

  // Pagination offset
  int32 offset = 2;

  // Limit size
  int32 limit = 3;

  // Sort to order the search
  string sort = 4;

  // Query filter the search
  string query = 5;

  // Filter by bookmarks
  bool bookmarks = 6;

  // Mode of the search
  string mode = 7;

  // No pagination
  bool no_page = 8;
}


// Request list data with owner/entity namespace
message OwnerEnitytResourceListRequest {
  // Owner of the namespace
  string owner = 1;

  // Entity managing the resource
  string name = 2;

  // Pagination offset
  int32 offset = 3;

  // Limit size
  int32 limit = 4;

  // Sort to order the search
  string sort = 5;

  // Query filter the search
  string query = 6;

  // Filter by bookmarks
  bool bookmarks = 7;

  // Mode of the search
  string mode = 8;

  // No pagination
  bool no_page = 9;
}


// Request list data with owner/kind namespace
message OwnerVersionResourceListRequest {
  // Owner of the namespace
  string owner = 1;

  // Version Kind
  string kind = 2;

  // Pagination offset
  int32 offset = 3;

  // Limit size
  int32 limit = 4;

  // Sort to order the search
  string sort = 5;

  // Query filter the search
  string query = 6;

  // No pagination
  bool no_page = 7;
}


// Request stats data with owner namespace
message OwnerStatsRequest {
  // Owner of the namespace
  string owner = 1;

  // Pagination offset
  int32 offset = 2;

  // Limit size
  int32 limit = 3;

  // Sort to order the search
  string sort = 4;

  // Query filter the search
  string query = 5;

  // Filter by bookmarks
  bool bookmarks = 6;

  // Stats Mode
  string mode = 7;

  // Stats Kind
  string kind = 8;

  // Stats aggregate
  string aggregate = 9;

  // Stats group
  string groupby = 10;

  // Stats trunc
  string trunc = 11;

  // Stats start date
  string start_date = 12;

  // Stats end date
  string end_date = 13;

  // Stats boundary
  bool boundary = 14;
}

// Request list data with owner/agent namespace
message OwnerEntityResourceListRequestByName {
  // Owner of the namespace
  string owner = 1;

  // Entity managing the resource
  string name = 2;

  // Pagination offset
  int32 offset = 3;

  // Limit size
  int32 limit = 4;

  // Sort to order the search
  string sort = 5;

  // Query filter the search
  string query = 6;

  // Filter by bookmarks
  bool bookmarks = 7;

  // Mode of the search
  string mode = 8;

  // No pagination
  bool no_page = 9;
}

// Request stats with owner/entity namespace
message OwnerEntityStatsRequest {
  // Owner of the namespace
  string owner = 1;

  // Entity managing the resource
  string name = 2;

  // Pagination offset
  int32 offset = 3;

  // Limit size
  int32 limit = 4;

  // Sort to order the search
  string sort = 5;

  // Query filter the search
  string query = 6;

  // Filter by bookmarks
  bool bookmarks = 7;

  // Stats Mode
  string mode = 8;

  // Stats Kind
  string kind = 9;

  // Stats aggregate
  string aggregate = 10;

  // Stats group
  string groupby = 11;

  // Stats trunc
  string trunc = 12;

  // Stats start date
  string start_date = 13;

  // Stats end date
  string end_date = 14;

  // Stats boundary
  bool boundary = 15;
}

// Request list data with owner/project/entity namespace
message OwnerSubEntityResourceListRequestByUid {
  // Owner of the namespace
  string owner = 1;

  // Entity name under namespace
  string entity = 2;

  // SubEntity uuid
  string uuid = 3;

  // Pagination offset
  int32 offset = 4;

  // Limit size
  int32 limit = 5;

  // Sort to order the search
  string sort = 6;

  // Query filter the search
  string query = 7;

  // No pagination
  bool no_page = 8;
}

// Request list data with owner/project/entity namespace
message OwnerSubEntityResourceListRequestByName {
  // Owner of the namespace
  string owner = 1;

  // Entity name under namespace
  string entity = 2;

  // SubEntity name
  string name = 3;

  // Pagination offset
  int32 offset = 4;

  // Limit size
  int32 limit = 5;

  // Sort to order the search
  string sort = 6;

  // Query filter the search
  string query = 7;

  // No pagination
  bool no_page = 8;
}

// Request list data with owner/project/kind namespace
message OwnerEntityVersionResourceListRequestByName {
  // Owner of the namespace
  string owner = 1;

  // Entity name under namespace
  string entity = 2;

  // Version Kind
  string kind = 3;

  // Pagination offset
  int32 offset = 4;

  // Limit size
  int32 limit = 5;

  // Sort to order the search
  string sort = 6;

  // Query filter the search
  string query = 7;

  // No pagination
  bool no_page = 8;
}

// Request stats with owner/project/entity namespace
message OwnerSubEntityStatsRequestByUid {
  // Owner of the namespace
  string owner = 1;

  // Entity name under namespace
  string entity = 2;

  // SubEntity uuid
  string uuid = 3;

  // Pagination offset
  int32 offset = 4;

  // Limit size
  int32 limit = 5;

   // Sort to order the search
  string sort = 6;

   // Query filter the search
  string query = 7;

  // Filter by bookmarks
  bool bookmarks = 8;

  // Stats Mode
  string mode = 9;

  // Stats Kind
  string kind = 10;

  // Stats aggregate
  string aggregate = 11;

  // Stats group
  string groupby = 12;

  // Stats trunc
  string trunc = 13;

  // Stats start date
  string start_date = 14;

  // Stats end date
  string end_date = 15;

  // Stats boundary
  bool boundary = 16;
}

// Artifact tree response
message ArtifactTree {
  map<string, int32> files = 1;
  repeated string dirs = 2;
  bool is_done = 3;
}

// Settings catalog specification
message SettingsCatalog {
  // Uuid
  string uuid = 1;

  // Name
  string name = 2;

  // Version
  string version = 3;

  // Url
  string url = 4;
}
