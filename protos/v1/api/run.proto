syntax = "proto3";

package v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

import "v1/api/base.proto";
import "v1/flow/status.proto";
import "v1/api/status.proto";

option go_package = "v1/api";

// Run kind enum
// Kinds: job, service, dag, matrix, schedule
// Runtime kinds: job, service, dag, dask, ray, mpijob, tfjob
// helper kinds: tuner, watchdog, notifier, cleaner, build
enum RunKind {
    job = 0;
    service = 1;
    dag = 2;
    daskjob = 3;
    rayjob = 4;
    mpijob = 5;
    tfjob = 6;
    pytorchjob = 7;
    matrix = 8;
    schedule = 9;
    tuner = 10;
    watchdog = 11;
    notifier = 12;
    builder = 13;
    cleaner = 14;
}

enum RunPending {
  approval = 0;
  upload = 1;
  cache = 2;
  build = 3;
}

enum ManagedBy {
  client = 0;
  cli = 1;
  agent = 2;
}

message Cloning {
    enum Kind {
        copy = 0;
        restart = 1;
        cache = 2;
    }

    // Optional uuid of the original run
    string uuid = 1;

    // Optional name of the original run
    string name = 2;

    // Optional if this run was restarted/copied/resumed/cached
    Kind kind = 3;
}

message Pipeline {
    enum Kind {
        dag = 0;
        matrix = 1;
    }

    // Optional uuid of the pipeline run
    string uuid = 1;

    // Optional name of the pipeline run
    string name = 2;

    // Optional if the pipeline kind dag/matrix
    Kind kind = 3;
}

// Run specification
message Run {
    // UUID
    string uuid = 1;

    // Optional name
    string name = 2;

    // Optional description
    string description = 3;

    // Optional tags of this entity
    repeated string tags = 4;

    // Required name of user started this entity
    string user = 5;

    // Required name of owner of this entity
    string owner = 6;

    // Required project name
    string project = 7;

    // Optional last time the entity was started
    google.protobuf.Timestamp schedule_at = 8;

    // Optional time when the entity was created
    google.protobuf.Timestamp created_at = 9;

    // Optional last time the entity was updated
    google.protobuf.Timestamp updated_at = 10;

    // Optional last time the entity was started
    google.protobuf.Timestamp started_at = 11;

    // Optional last time the entity was started
    google.protobuf.Timestamp finished_at = 12;

    // Optional wait time of the entity
    float wait_time = 13;

    // Optional duration of the entity
    float duration = 14;

    // Optional flag of the managing service
    ManagedBy managed_by = 15;

    // Optional flag to tell if this entity is managed by the platform
    bool is_managed = 16;

    // Deprecated flag that was replaced by "pending", and it will be completely dropped after v1.15
    bool is_approved = 17;

    // Optional to tell if this entity requires approval before it should be scheduled
    RunPending pending = 18;

    // Optional content of the entity's spec
    string content = 19;

    // Optional content of the entity's spec
    string raw_content = 20;

    // Optional latest status of this entity
    Statuses status = 21;

    // Optional if this entity was bookmarked
    bool bookmarked = 22;

    // Current live state
    int32 live_state = 23;

    // Optional Markdown description/readme
    string readme = 24;

    // Optional run meta info
    google.protobuf.Struct meta_info = 25;

    // Optional kind to tell the kind of this run
    RunKind kind = 26;

    // Optional meta kind to tell the nature of this run
    RunKind runtime = 27;

    // Optional inputs of this entity
    google.protobuf.Struct inputs = 28;

    // Optional outputs of this entity
    google.protobuf.Struct outputs = 29;

    // Optional original run meta information
    Cloning original = 30;

    // Optional pipeline run meta information
    Pipeline pipeline = 31;

    // The status conditions timeline
    repeated StatusCondition status_conditions = 32;

    // Current user's role in this (org/teams)/project/runs
    string role = 33;

    // Contributors
    repeated google.protobuf.Struct contributors = 34;

    // Optional settings
    RunSettings settings = 35;

    // Options resources
    RunResources resources = 36;

    // Optional graph definition
    google.protobuf.Struct graph = 37;

    // Optional merge flag
    bool merge = 38;
}

// Operation creation
message OperationBody {
    // The Operation body content as dump string
    string content = 1;

    // Optional, if the run is managed, true by default, this flag should be false if starting a non-managed run
    bool is_managed = 2;

    // Optional flag of the managing service
    ManagedBy managed_by = 3;

    // Optional, if the run is approved, true by default, this flag should be false if a run requires human validation
    RunPending pending = 4;

    // Optional
    string name = 5;

    // Optional
    string description = 6;

    // Optional
    repeated string tags = 7;

    // Meta
    google.protobuf.Struct meta_info = 8;
}

// Request data to create run
message RunCreateBodyRequest {
    // Owner of the namespace
    string owner = 1;

    // Project where the run will be assigned
    string project = 2;

    // operation object
    OperationBody operation = 3;
}

// Request data to get/update/delete an operation run
message RunBodyRequest {
    // Owner of the namespace
    string owner = 1;

    // Project where the run will be assigned
    string project = 2;

    // Run object
    Run run = 3;
}

 // Contains list of runs
 message ListRunsResponse{
    // Count of the entities
    int32 count = 1;

    // List of all entities
    repeated Run results = 2;

    // Previous page
    string previous = 3;

    // Next page
    string next = 4;
}

// Run Settings catalog specification
message RunReferenceCatalog {
  // Owner
  string owner = 1;

  // Project
  string project = 2;

  // Name
  string name = 3;

  // State
  string state = 4;
}

// Run Resources specification
message RunResources {
  float cpu = 1;
  float memory = 2;
  float gpu = 3;
  float custom = 4;
  float cost = 5;
}

// Run Settings specification
message RunSettings {
    // Namespace
    string namespace = 1;

    // Agent
    SettingsCatalog agent = 2;

    // Queue
    SettingsCatalog queue = 3;

    // Artifacts Store
    SettingsCatalog artifacts_store = 4;

    // Latest Tensorboard reference, if it exists
    google.protobuf.Struct tensorboard = 5;

    // Build reference, if it exists
    google.protobuf.Struct build = 6;

    // Component reference
    google.protobuf.Struct component = 7;

    // Model version references
    repeated RunReferenceCatalog models = 8;

    // Artifact version references
    repeated RunReferenceCatalog artifacts = 9;
}


message RunConnection {
   // Uuid
   string uuid = 1;

   // Name
   string name = 2;

   // Kind
   string kind = 3;
}

// Contains list of runs
message ListRunConnectionsResponse {
  // Count of the entities
  int32 count = 1;

  // List of all entities
  repeated RunConnection results = 2;

  // Previous page
  string previous = 3;

  // Next page
  string next = 4;
}


message RunEdge {
  enum Kind {
      action = 0;
      event = 1;
      hook = 2;
      dag = 3;
      join = 4;
      run = 5;
      tb = 6;  // tensorboard
      build = 7;
      manual = 8;
  }

  // Optional uuid of the edge run
  Run upstream = 1;

  // Optional name of the edge run
  Run downstream = 2;

  // Optional edge run kind
  Kind kind = 3;

  // Optional edge values
  google.protobuf.Struct values = 4;

  // Options statuses events
  repeated Statuses statuses = 5;
}

// Contains list of run edges
message ListRunEdgesResponse {
  // Count of the entities
  int32 count = 1;

  // List of all entities
  repeated RunEdge results = 2;

  // Previous page
  string previous = 3;

  // Next page
  string next = 4;
}

// single run edge
message RunEdgeLineage {
  // Run uuid to link
  string uuid = 1;

  // Optional edge run direction
  bool is_upstream = 2;

  // Optional edge values
  google.protobuf.Struct values = 3;
}

message RunEdgesGraph {
  // Run edges
  repeated RunEdgeLineage edges = 1;
}

// Request body to set manual run edges
message RunEdgesBody {
  // Owner of the namespace
  string owner = 1;

  // Project
  string project = 2;

  // Run uuid
  string uuid = 3;

  // Run edges graph
  RunEdgesGraph graph = 4;
}
