/**
 * Copyright 2018-2023 Polyaxon, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */syntax = "proto3";

package v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "v1/api/activities.proto";
import "v1/api/agent.proto";
import "v1/api/bookmarks.proto";
import "v1/api/connection.proto";
import "v1/api/dashboard.proto";
import "v1/api/base.proto";
import "v1/api/run.proto";
import "v1/api/organization.proto";
import "v1/api/policy.proto";
import "v1/api/project.proto";
import "v1/api/version.proto";
import "v1/api/auth.proto";
import "v1/api/preset.proto";
import "v1/api/user.proto";
import "v1/api/search.proto";
import "v1/api/status.proto";
import "v1/api/stage.proto";
import "v1/api/tag.proto";
import "v1/api/team.proto";
import "v1/api/service_account.proto";
import "v1/tracking/log.proto";
import "v1/tracking/artifact.proto";
import "v1/tracking/event.proto";
import "v1/schemas/all.proto";

option go_package = "v1/polyaxon_sdk";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Polyaxon sdk";
        version: "2.7.0";
        contact:{
            name:"Polyaxon sdk";
            url:"https://github.com/polyaxon/polyaxon";
            email:"contact@polyaxon.com";
        };
    };
    schemes:HTTP;
    schemes:HTTPS;
    consumes:"application/json";
    produces:"application/json";
    security_definitions:{
        security:{
            key:"ApiKey";
            value:{
                type:TYPE_API_KEY;
                in:IN_HEADER;
                name:"Authorization";
            }
        }
    };
    security:{
        security_requirement:{
            key:"ApiKey";
            value:{};
        }
    };
    responses:{
        key:"204";
        value:{
            description:"No content.";
        }
    }
    responses:{
        key:"403";
        value:{
            description:"You don't have permission to access the resource.";
        }
    }
    responses:{
        key:"404";
        value:{
            description:"Resource does not exist.";
        }
    }
};

// Service to manage runs
service RunsV1 {
  // List bookmarked runs for user
  rpc ListBookmarkedRuns(UserResourceListRequest) returns (ListBookmarksResponse) {
    option (google.api.http) = {
      get: "/api/v1/bookmarks/{user}/runs"
    };
  }

  // List archived runs for user
  rpc ListArchivedRuns(UserResourceListRequest) returns (ListRunsResponse) {
    option (google.api.http) = {
      get: "/api/v1/archives/{user}/runs"
    };
  }

  // List runs
  rpc ListRuns(OwnerEntityResourceListRequestByName) returns (ListRunsResponse) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{name}/runs"
    };
  }

  // Create new run
  rpc CreateRun(RunCreateBodyRequest) returns (Run) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{project}/runs"
      body: "operation"
    };
  }

  // Get run
  rpc GetRun(OwnerSubEntityResourceRequestByUid) returns (Run) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{entity}/runs/{uuid}"
    };
  }

  // Update run
  rpc UpdateRun(RunBodyRequest) returns (Run) {
    option (google.api.http) = {
      put: "/api/v1/{owner}/{project}/runs/{run.uuid}"
      body: "run"
    };
  }

  // Patch run
  rpc PatchRun(RunBodyRequest) returns (Run) {
    option (google.api.http) = {
      patch: "/api/v1/{owner}/{project}/runs/{run.uuid}"
      body: "run"
    };
  }

  // Delete run
  rpc DeleteRun(OwnerSubEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/{owner}/{entity}/runs/{uuid}"
    };
  }

  // Delete runs
  rpc DeleteRuns(OwnerEntityResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/{owner}/{name}/runs/delete"
      body: "uuids"
    };
  }

  // Sync offline run
  rpc SyncRun(RunBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{project}/runs/sync"
      body: "run"
    };
  }

  // Stop run
  rpc StopRun(OwnerSubEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{entity}/runs/{uuid}/stop"
    };
  }

  // Stop runs
  rpc StopRuns(OwnerEntityResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{name}/runs/stop"
      body: "uuids"
    };
  }

  // Skip run
  rpc SkipRun(OwnerSubEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{entity}/runs/{uuid}/skip"
    };
  }

  // Skip runs
  rpc SkipRuns(OwnerEntityResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{name}/runs/skip"
      body: "uuids"
    };
  }

  // Approve run
  rpc ApproveRun(OwnerSubEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{entity}/runs/{uuid}/approve"
    };
  }

  // Approve runs
  rpc ApproveRuns(OwnerEntityResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{name}/runs/approve"
      body: "uuids"
    };
  }

  // Tag runs
  rpc TagRuns(OwnerEntityTagResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{name}/runs/tag"
      body: "data"
    };
  }

  // Invalidate run
  rpc InvalidateRun(OwnerSubEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{entity}/runs/{uuid}/invalidate"
    };
  }

  // Invalidate runs
  rpc InvalidateRuns(OwnerEntityResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{name}/runs/invalidate"
      body: "uuids"
    };
  }

  // Restart run with copy
  rpc CopyRun(RunBodyRequest) returns (Run) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{project}/runs/{run.uuid}/copy"
      body: "run"
    };
  }

  // Restart run
  rpc RestartRun(RunBodyRequest) returns (Run) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{project}/runs/{run.uuid}/restart"
      body: "run"
    };
  }

  // Resume run
  rpc ResumeRun(RunBodyRequest) returns (Run) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{project}/runs/{run.uuid}/resume"
      body: "run"
    };
  }

  // Archive run
  rpc ArchiveRun(OwnerSubEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{entity}/runs/{uuid}/archive"
    };
  }

  // Archive runs
  rpc ArchiveRuns(OwnerEntityResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{name}/runs/archive"
      body: "uuids"
    };
  }

  // Restore run
  rpc RestoreRun(OwnerSubEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{entity}/runs/{uuid}/restore"
    };
  }

  // Restore runs
  rpc RestoreRuns(OwnerEntityResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{name}/runs/restore"
      body: "uuids"
    };
  }

  // Transfer run
  rpc TransferRun(RunBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{project}/runs/{run.uuid}/transfer"
      body: "run"
    };
  }

  // Transfer runs
  rpc TransferRuns(OwnerEntityTransferResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{name}/runs/transfer"
      body: "data"
    };
  }

  // Bookmark run
  rpc BookmarkRun(OwnerSubEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{entity}/runs/{uuid}/bookmark"
    };
  }

  // Bookmark runs
  rpc BookmarkRuns(OwnerEntityResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{name}/runs/bookmark"
      body: "uuids"
    };
  }

  // Unbookmark run
  rpc UnbookmarkRun(OwnerSubEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/{owner}/{entity}/runs/{uuid}/unbookmark"
    };
  }

  // Get run statuses
  rpc GetRunStatuses(OwnerSubEntityResourceRequestByUid) returns (Status) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{entity}/runs/{uuid}/statuses"
    };
  }

  // Create new run status
  rpc CreateRunStatus(EntityStatusBodyRequest) returns (Status) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{project}/runs/{uuid}/statuses"
      body: "*"
    };
  }

  // Impersonate run token
  rpc ImpersonateToken(OwnerSubEntityResourceRequestByUid) returns (Auth) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{entity}/runs/{uuid}/impersonate"
    };
  }

  // Get Run settings
  rpc GetRunSettings(OwnerSubEntityResourceRequestByUid) returns (RunSettings) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{entity}/runs/{uuid}/settings"
    };
  }

  // Get Run namespace
  rpc GetRunNamespace(OwnerSubEntityResourceRequestByUid) returns (RunSettings) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{entity}/runs/{uuid}/namespace"
    };
  }

  // Get run artifacts lineage
  rpc GetRunArtifactsLineage(OwnerSubEntityResourceListRequestByUid) returns (ListRunArtifactsResponse) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{entity}/runs/{uuid}/lineage/artifacts"
    };
  }

  // Get runs artifacts lineage
  rpc GetRunsArtifactsLineage(OwnerEntityResourceListRequestByName) returns (ListRunArtifactsResponse) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{name}/runs/lineage/artifacts"
    };
  }

  // Get run artifacts lineage names
  rpc GetRunArtifactsLineageNames(OwnerSubEntityResourceListRequestByUid) returns (ListRunArtifactsResponse) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{entity}/runs/{uuid}/lineage/artifacts/names"
    };
  }

  // Create bulk run artifacts lineage
  rpc CreateRunArtifactsLineage(RunArtifactsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{project}/runs/{uuid}/lineage/artifacts"
      body: "artifacts"
    };
  }

  // Delete run artifact lineage
  rpc DeleteRunArtifactLineage(RunArtifactLineageRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/{owner}/{project}/runs/{uuid}/lineage/artifacts/{name}"
    };
  }

  // Get run artifacts lineage
  rpc GetRunArtifactLineage(RunArtifactLineageRequest) returns (RunArtifact) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{project}/runs/{uuid}/lineage/artifacts/{name}"
    };
  }

  // Get run connections lineage
  rpc GetRunConnectionsLineage(OwnerSubEntityResourceListRequestByUid) returns (ListRunConnectionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{entity}/runs/{uuid}/lineage/connections"
    };
  }

  // Get run downstream lineage
  rpc GetRunDownstreamLineage(OwnerSubEntityResourceListRequestByUid) returns (ListRunEdgesResponse) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{entity}/runs/{uuid}/lineage/downstream"
    };
  }

  // Get run upstream lineage
  rpc GetRunUpstreamLineage(OwnerSubEntityResourceListRequestByUid) returns (ListRunEdgesResponse) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{entity}/runs/{uuid}/lineage/upstream"
    };
  }

  // Get run clones lineage
  rpc GetRunClonesLineage(OwnerSubEntityResourceListRequestByUid) returns (ListRunsResponse) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{entity}/runs/{uuid}/lineage/clones"
    };
  }

  // Set run edges graph lineage
  rpc SetRunEdgesLineage(RunEdgesBody) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{project}/runs/{uuid}/lineage/edges"
      body: "graph"
    };
  }

  // Get run stats
  rpc GetRunStats(OwnerSubEntityStatsRequestByUid) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{entity}/runs/{uuid}/stats"
    };
  }

  // Notify run status
  rpc NotifyRunStatus(EntityNotificationBody) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/notify"
      body: "*"
    };
  }

  // Get run logs
  rpc GetRunLogs(RunLogsRequest) returns (Logs) {
    option (google.api.http) = {
      get: "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/logs"
    };
  }

  // Internal API to collect run logs
  rpc CollectRunLogs(CollectRunLogsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/internal/v1/{namespace}/{owner}/{project}/runs/{uuid}/{kind}/logs"
    };
  }

  // Get run resources events
  rpc GetRunResources(RunResourcesRequest) returns (EventsResponse) {
    option (google.api.http) = {
      get: "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/resources"
    };
  }

  // Get run events
  rpc GetRunEvents(RunEventRequest) returns (EventsResponse) {
    option (google.api.http) = {
      get: "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/events/{kind}"
    };
  }

  // Get multi run importance
  rpc GetMultiRunImportance(RunImportanceCorrelationRequest) returns (MultiEventsResponse) {
    option (google.api.http) = {
      post: "/streams/v1/{namespace}/{owner}/{entity}/runs/multi/importance"
      body: "data",
    };
  }

  // Get multi runs events
  rpc GetMultiRunEvents(RunEventsRequest) returns (MultiEventsResponse) {
    option (google.api.http) = {
      get: "/streams/v1/{namespace}/{owner}/{entity}/runs/multi/events/{kind}"
    };
  }

  // Get run artifacts tree
  rpc GetRunArtifactsTree(RunArtifactsPathRequest) returns (ArtifactTree) {
    option (google.api.http) = {
      get: "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifacts/tree"
    };
  }

  // Delete run artifact
  rpc DeleteRunArtifact(RunArtifactsPathRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifact"
    };
  }

  // Delete run artifacts
  rpc DeleteRunArtifacts(RunArtifactsPathRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifacts"
    };
  }

  // Inspect an active run full conditions
  rpc InspectRun(RunResourcesRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      get: "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/k8s_inspect"
    };
  }
}

// Service to manage project
service ProjectsV1 {
  // Create new project
  rpc CreateProject(ProjectBodyRequest) returns (Project) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/projects/create"
      body: "project"
    };
  }

  // Create new project via team space
  rpc CreateTeamProject(TeamProjectBodyRequest) returns (Project) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{team}/projects/create"
      body: "project"
    };
  }

  // List projects
  rpc ListProjects(OwnerResourceListRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/projects/list"
    };
  }

  // List project names
  rpc ListProjectNames(OwnerResourceListRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/projects/names"
    };
  }

  // List bookmarked projects for user
  rpc ListBookmarkedProjects(UserResourceListRequest) returns (ListBookmarksResponse) {
    option (google.api.http) = {
      get: "/api/v1/bookmarks/{user}/projects"
    };
  }

  // List archived projects for user
  rpc ListArchivedProjects(UserResourceListRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {
      get: "/api/v1/archives/{user}/projects"
    };
  }

  // Get project
  rpc GetProject(OwnerEntityResourceRequestByName) returns (Project) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{name}"
    };
  }

  // Update project
  rpc UpdateProject(ProjectBodyRequest) returns (Project) {
    option (google.api.http) = {
      put: "/api/v1/{owner}/{project.name}"
      body: "project"
    };
  }

  // Patch project
  rpc PatchProject(ProjectBodyRequest) returns (Project) {
    option (google.api.http) = {
      patch: "/api/v1/{owner}/{project.name}"
      body: "project"
    };
  }

  // Delete project
  rpc DeleteProject(OwnerEntityResourceRequestByName) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/{owner}/{name}"
    };
  }

  // Archive project
  rpc ArchiveProject(OwnerEntityResourceRequestByName) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{name}/archive"
    };
  }

  // Restore project
  rpc RestoreProject(OwnerEntityResourceRequestByName) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{name}/restore"
    };
  }

  // Bookmark project
  rpc BookmarkProject(OwnerEntityResourceRequestByName) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{name}/bookmark"
    };
  }

  // Unbookmark project
  rpc UnbookmarkProject(OwnerEntityResourceRequestByName) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/{owner}/{name}/unbookmark"
    };
  }

  // Enable project CI
  rpc EnableProjectCI(OwnerEntityResourceRequestByName) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{name}/ci"
    };
  }

  // Get project stats
  rpc GetProjectStats(OwnerEntityStatsRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{name}/stats"
    };
  }

  // Get project activities
  rpc GetProjectActivities(OwnerEntityResourceListRequestByName) returns (ListActivitiesResponse) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{name}/activities"
    };
  }

  // Disbale project CI
  rpc DisableProjectCI(OwnerEntityResourceRequestByName) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/{owner}/{name}/ci"
    };
  }

  // Get Project settings
  rpc GetProjectSettings(OwnerEntityResourceRequestByName) returns (ProjectSettings) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{name}/settings"
    };
  }

  // Update project settings
  rpc UpdateProjectSettings(ProjectSettingsBodyRequest) returns (ProjectSettings) {
    option (google.api.http) = {
      put: "/api/v1/{owner}/{project}/settings"
      body: "settings"
    };
  }

  // Patch project settings
  rpc PatchProjectSettings(ProjectSettingsBodyRequest) returns (ProjectSettings) {
    option (google.api.http) = {
      patch: "/api/v1/{owner}/{project}/settings"
      body: "settings"
    };
  }

  // Create version
  rpc CreateVersion(ProjectVersionBodyRequest) returns (ProjectVersion) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{project}/versions/{version.kind}"
      body: "version"
    };
  }

  // List versions
  rpc ListVersions(OwnerEntityVersionResourceListRequestByName) returns (ListProjectVersionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{entity}/versions/{kind}"
    };
  }

  // List versions names
  rpc ListVersionNames(OwnerEntityVersionResourceListRequestByName) returns (ListProjectVersionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{entity}/versions/{kind}/names"
    };
  }

  // Get version
  rpc GetVersion(OwnerEntityVersionResourceRequestByName) returns (ProjectVersion) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{entity}/versions/{kind}/{name}"
    };
  }

  // Update version
  rpc UpdateVersion(ProjectVersionBodyRequest) returns (ProjectVersion) {
    option (google.api.http) = {
      put: "/api/v1/{owner}/{project}/versions/{version.kind}/{version.name}"
      body: "version"
    };
  }

  // Patch version
  rpc PatchVersion(ProjectVersionBodyRequest) returns (ProjectVersion) {
    option (google.api.http) = {
      patch: "/api/v1/{owner}/{project}/versions/{version.kind}/{version.name}"
      body: "version"
    };
  }

  // Delete version
  rpc DeleteVersion(OwnerEntityVersionResourceRequestByName) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/{owner}/{entity}/versions/{kind}/{name}"
    };
  }

  // Transfer version
  rpc TransferVersion(ProjectVersionBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{project}/versions/{version.kind}/{version.name}/transfer"
      body: "version"
    };
  }

  // Get version stages
  rpc GetVersionStages(OwnerEntityVersionResourceRequestByName) returns (Stage) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{entity}/versions/{kind}/{name}/stages"
    };
  }

  // Create new artifact version stage
  rpc CreateVersionStage(EntityStageBodyRequest) returns (Stage) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{entity}/versions/{kind}/{name}/stages"
      body: "*"
    };
  }
}

// Service to manage connections
service ConnectionsV1 {
  // List connections names
  rpc ListConnectionNames(OwnerResourceListRequest) returns (ListConnectionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/connections/names"
    };
  }

  // List connections
  rpc ListConnections(OwnerResourceListRequest) returns (ListConnectionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/connections"
    };
  }

  // Create connection
  rpc CreateConnection(ConnectionBodyRequest) returns (ConnectionResponse) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/connections"
      body: "connection"
    };
  }

  // Get connection
  rpc GetConnection(OwnerEntityResourceRequestByUid) returns (ConnectionResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/connections/{uuid}"
    };
  }

  // Update connection
  rpc UpdateConnection(ConnectionBodyRequest) returns (ConnectionResponse) {
    option (google.api.http) = {
      put: "/api/v1/orgs/{owner}/connections/{connection.uuid}"
      body: "connection"
    };
  }

  // Patch connection
  rpc PatchConnection(ConnectionBodyRequest) returns (ConnectionResponse) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/connections/{connection.uuid}"
      body: "connection"
    };
  }

  // Delete connection
  rpc DeleteConnection(OwnerEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/orgs/{owner}/connections/{uuid}"
    };
  }
}

// Service to manage project searches
service ProjectSearchesV1 {
  // List project search names
  rpc ListProjectSearchNames(OwnerEntityResourceListRequestByName) returns (ListSearchesResponse) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{name}/searches/names"
    };
  }

  // List project searches
  rpc ListProjectSearches(OwnerEntityResourceListRequestByName) returns (ListSearchesResponse) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{name}/searches"
    };
  }

  // Create project search
  rpc CreateProjectSearch(ProjectSearchBodyRequest) returns (Search) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{project}/searches"
      body: "search"
    };
  }

  // Get project search
  rpc GetProjectSearch(OwnerSubEntityResourceRequestByUid) returns (Search) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{entity}/searches/{uuid}"
    };
  }

  // Update project search
  rpc UpdateProjectSearch(ProjectSearchBodyRequest) returns (Search) {
    option (google.api.http) = {
      put: "/api/v1/{owner}/{project}/searches/{search.uuid}"
      body: "search"
    };
  }

  // Patch project search
  rpc PatchProjectSearch(ProjectSearchBodyRequest) returns (Search) {
    option (google.api.http) = {
      patch: "/api/v1/{owner}/{project}/searches/{search.uuid}"
      body: "search"
    };
  }

  // Delete project search
  rpc DeleteProjectSearch(OwnerSubEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/{owner}/{entity}/searches/{uuid}"
    };
  }

  // Promote project search
  rpc PromoteProjectSearch(OwnerSubEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{entity}/searches/{uuid}/promote"
    };
  }
}

// Service to manage searches
service SearchesV1 {
  // List search names
  rpc ListSearchNames(OwnerResourceListRequest) returns (ListSearchesResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/searches/names"
    };
  }

  // List searches
  rpc ListSearches(OwnerResourceListRequest) returns (ListSearchesResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/searches"
    };
  }

  // Create search
  rpc CreateSearch(SearchBodyRequest) returns (Search) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/searches"
      body: "search"
    };
  }

  // Get search
  rpc GetSearch(OwnerEntityResourceRequestByUid) returns (Search) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/searches/{uuid}"
    };
  }

  // Update search
  rpc UpdateSearch(SearchBodyRequest) returns (Search) {
    option (google.api.http) = {
      put: "/api/v1/orgs/{owner}/searches/{search.uuid}"
      body: "search"
    };
  }

  // Patch search
  rpc PatchSearch(SearchBodyRequest) returns (Search) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/searches/{search.uuid}"
      body: "search"
    };
  }

  // Delete search
  rpc DeleteSearch(OwnerEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/orgs/{owner}/searches/{uuid}"
    };
  }
}

// Service to manage project dashboards
service ProjectDashboardsV1 {
  // List project dashboard
  rpc ListProjectDashboardNames(OwnerEntityResourceListRequestByName) returns (ListDashboardsResponse) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{name}/dashboards/names"
    };
  }

  // List project dashboards
  rpc ListProjectDashboards(OwnerEntityResourceListRequestByName) returns (ListDashboardsResponse) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{name}/dashboards"
    };
  }

  // Create project dashboard
  rpc CreateProjectDashboard(ProjectDashboardBodyRequest) returns (Dashboard) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{project}/dashboards"
      body: "dashboard"
    };
  }

  // Get project dashboard
  rpc GetProjectDashboard(OwnerSubEntityResourceRequestByUid) returns (Dashboard) {
    option (google.api.http) = {
      get: "/api/v1/{owner}/{entity}/dashboards/{uuid}"
    };
  }

  // Update project dashboard
  rpc UpdateProjectDashboard(ProjectDashboardBodyRequest) returns (Dashboard) {
    option (google.api.http) = {
      put: "/api/v1/{owner}/{project}/dashboards/{dashboard.uuid}"
      body: "dashboard"
    };
  }

  // Patch project dashboard
  rpc PatchProjectDashboard(ProjectDashboardBodyRequest) returns (Dashboard) {
    option (google.api.http) = {
      patch: "/api/v1/{owner}/{project}/dashboards/{dashboard.uuid}"
      body: "dashboard"
    };
  }

  // Delete project dashboard
  rpc DeleteProjectDashboard(OwnerSubEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/{owner}/{entity}/dashboards/{uuid}"
    };
  }

  // Promote project dashboard
  rpc PromoteProjectDashboard(OwnerSubEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/{owner}/{entity}/dashboards/{uuid}/promote"
    };
  }
}

// Service to manage dashboards
service DashboardsV1 {
  // List dashboard names
  rpc ListDashboardNames(OwnerResourceListRequest) returns (ListDashboardsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/dashboards/names"
    };
  }

  // List dashboards
  rpc ListDashboards(OwnerResourceListRequest) returns (ListDashboardsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/dashboards"
    };
  }

  // Create dashboard
  rpc CreateDashboard(DashboardBodyRequest) returns (Dashboard) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/dashboards"
      body: "dashboard"
    };
  }

  // Get dashboard
  rpc GetDashboard(OwnerEntityResourceRequestByUid) returns (Dashboard) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/dashboards/{uuid}"
    };
  }

  // Update dashboard
  rpc UpdateDashboard(DashboardBodyRequest) returns (Dashboard) {
    option (google.api.http) = {
      put: "/api/v1/orgs/{owner}/dashboards/{dashboard.uuid}"
      body: "dashboard"
    };
  }

  // Patch dashboard
  rpc PatchDashboard(DashboardBodyRequest) returns (Dashboard) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/dashboards/{dashboard.uuid}"
      body: "dashboard"
    };
  }

  // Delete dashboard
  rpc DeleteDashboard(OwnerEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/orgs/{owner}/dashboards/{uuid}"
    };
  }
}

// Service to manage tags
service TagsV1 {
  // List tags
  rpc ListTags(OwnerResourceListRequest) returns (ListTagsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/tags"
    };
  }

  // Load tags
  rpc LoadTags(OwnerResourceListRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/tags/load"
    };
  }

  // Create tag
  rpc CreateTag(TagBodyRequest) returns (Tag) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/tags"
      body: "tag"
    };
  }

  // Sync tags
  rpc SyncTags(OwnerTagResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/tags/sync"
      body: "data"
    };
  }

  // Get tag
  rpc GetTag(OwnerEntityResourceRequestByUid) returns (Tag) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/tags/{uuid}"
    };
  }

  // Update tag
  rpc UpdateTag(TagBodyRequest) returns (Tag) {
    option (google.api.http) = {
      put: "/api/v1/orgs/{owner}/tags/{tag.uuid}"
      body: "tag"
    };
  }

  // Patch tag
  rpc PatchTag(TagBodyRequest) returns (Tag) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/tags/{tag.uuid}"
      body: "tag"
    };
  }

  // Delete tag
  rpc DeleteTag(OwnerEntityResourceRequestByUidCascade) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/orgs/{owner}/tags/{uuid}"
    };
  }
}

// Service to manage policies
service PoliciesV1 {
  // List scheduling policies names
  rpc ListPolicyNames(OwnerResourceListRequest) returns (ListPoliciesResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/policies/names"
    };
  }

  // List Policies
  rpc ListPolicies(OwnerResourceListRequest) returns (ListPoliciesResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/policies"
    };
  }

  // Create Policy
  rpc CreatePolicy(PolicyBodyRequest) returns (Policy) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/policies"
      body: "policy"
    };
  }

  // Get Policy
  rpc GetPolicy(OwnerSubEntityResourceRequestByUid) returns (Policy) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/policies/{uuid}"
    };
  }

  // Update Policy
  rpc UpdatePolicy(PolicyBodyRequest) returns (Policy) {
    option (google.api.http) = {
      put: "/api/v1/orgs/{owner}/policies/{policy.uuid}"
      body: "policy"
    };
  }

  // Patch Policy
  rpc PatchPolicy(PolicyBodyRequest) returns (Policy) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/policies/{policy.uuid}"
      body: "policy"
    };
  }

  // Delete scheduling preset
  rpc DeletePolicy(OwnerSubEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/orgs/{owner}/policies/{uuid}"
    };
  }
}

// Service to manage scheduling presets
service PresetsV1 {
  // List scheduling presets names
  rpc ListPresetNames(OwnerResourceListRequest) returns (ListPresetsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/presets/names"
    };
  }

  // List scheduling presets
  rpc ListPresets(OwnerResourceListRequest) returns (ListPresetsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/presets"
    };
  }

  // Create scheduling presets
  rpc CreatePreset(PresetBodyRequest) returns (Preset) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/presets"
      body: "preset"
    };
  }

  // Get scheduling preset
  rpc GetPreset(OwnerSubEntityResourceRequestByUid) returns (Preset) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/presets/{uuid}"
    };
  }

  // Update scheduling preset
  rpc UpdatePreset(PresetBodyRequest) returns (Preset) {
    option (google.api.http) = {
      put: "/api/v1/orgs/{owner}/presets/{preset.uuid}"
      body: "preset"
    };
  }

  // Patch scheduling preset
  rpc PatchPreset(PresetBodyRequest) returns (Preset) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/presets/{preset.uuid}"
      body: "preset"
    };
  }

  // Delete scheduling preset
  rpc DeletePreset(OwnerSubEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/orgs/{owner}/presets/{uuid}"
    };
  }
}

// Service to manage agents
service AgentsV1 {
  // List agents names
  rpc ListAgentNames(OwnerResourceListRequest) returns (ListAgentsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/agents/names"
    };
  }

  // List agents
  rpc ListAgents(OwnerResourceListRequest) returns (ListAgentsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/agents"
    };
  }

  // Create agent
  rpc CreateAgent(AgentBodyRequest) returns (Agent) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/agents"
      body: "agent"
    };
  }

  // Get agent
  rpc GetAgent(OwnerSubEntityResourceRequestByUid) returns (Agent) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/agents/{uuid}"
    };
  }

  // Update agent
  rpc UpdateAgent(AgentBodyRequest) returns (Agent) {
    option (google.api.http) = {
      put: "/api/v1/orgs/{owner}/agents/{agent.uuid}"
      body: "agent"
    };
  }

  // Patch agent
  rpc PatchAgent(AgentBodyRequest) returns (Agent) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/agents/{agent.uuid}"
      body: "agent"
    };
  }

  // Delete agent
  rpc DeleteAgent(OwnerSubEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/orgs/{owner}/agents/{uuid}"
    };
  }

  // Get State (queues/runs)
  rpc GetAgentState(OwnerEntityResourceRequestByUid) returns (AgentStateResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/agents/{uuid}/state"
    };
  }

  // Get Global State (queues/runs)
  rpc GetGlobalState(OwnerRequest) returns (AgentStateResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/agents/state"
    };
  }

  // Global Cron
  rpc CronAgent(CronBodyRequest) returns (AgentStateResponse) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/agents/cron"
      body: "body"
    };
  }

  // Sync agent
  rpc SyncAgent(AgentBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/agents/{agent.uuid}/sync"
      body: "agent"
    };
  }

  // Get agent config
  rpc GetAgentConfig(OwnerSubEntityResourceRequestByUid) returns (Agent) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/agents/{uuid}/config"
    };
  }

  // Get agent stats
  rpc GetAgentStats(OwnerSubEntityResourceRequestByUid) returns (Agent) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/agents/{uuid}/stats"
    };
  }

  // Update agent config
  rpc UpdateAgentConfig(AgentBodyRequest) returns (Agent) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/agents/{agent.uuid}/config"
      body: "agent"
    };
  }

  // Create new agent status
  rpc CreateAgentStatus(AgentStatusBodyRequest) returns (Status) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/agents/{uuid}/statuses"
      body: "*"
    };
  }

  // Get Agent statuses
  rpc GetAgentStatuses(OwnerSubEntityResourceRequestByUid) returns (Status) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/agents/{uuid}/statuses"
    };
  }

  // Reconcile agent
  rpc ReconcileAgent(AgentReconcileBodyRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/agents/{uuid}/reconcile"
      body: "*"
    };
  }

  // Get agent token
  rpc GetAgentToken(OwnerEntityResourceRequestByUid) returns (Token) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/agents/{uuid}/token"
    };
  }

  // Update agent token
  rpc UpdateAgentToken(EntityTokenBodyRequest) returns (Token) {
    option (google.api.http) = {
      put: "/api/v1/orgs/{owner}/agents/{entity}/token"
      body: "token"
    };
  }

  // Patch agent token
  rpc PatchAgentToken(EntityTokenBodyRequest) returns (Token) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/agents/{entity}/token"
      body: "token"
    };
  }

  // collect agent
  rpc CollectAgentData(AgentResourcesRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      post: "/internal/v1/{namespace}/{owner}/agents/{uuid}/collect"
    };
  }

  // Inspect an agent's service full conditions
  rpc InspectAgent(AgentResourcesRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      get: "/streams/v1/{namespace}/{owner}/agents/{uuid}/k8s_inspect"
    };
  }


  // Get run logs
  rpc GetAgentLogs(AgentResourcesRequest) returns (Logs) {
    option (google.api.http) = {
      get: "/streams/v1/{namespace}/{owner}/agents/{uuid}/logs"
    };
  }
}

// Service to manage service accounts
service ServiceAccountsV1 {
  // List service accounts names
  rpc ListServiceAccountNames(OwnerResourceListRequest) returns (ListServiceAccountsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/sa/names"
    };
  }

  // List service accounts
  rpc ListServiceAccounts(OwnerResourceListRequest) returns (ListServiceAccountsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/sa"
    };
  }

  // Create service account
  rpc CreateServiceAccount(ServiceAccountBodyRequest) returns (ServiceAccount) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/sa"
      body: "sa"
    };
  }

  // Get service account
  rpc GetServiceAccount(OwnerEntityResourceRequestByUid) returns (ServiceAccount) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/sa/{uuid}"
    };
  }

  // Update service account
  rpc UpdateServiceAccount(ServiceAccountBodyRequest) returns (ServiceAccount) {
    option (google.api.http) = {
      put: "/api/v1/orgs/{owner}/sa/{sa.uuid}"
      body: "sa"
    };
  }

  // Patch service account
  rpc PatchServiceAccount(ServiceAccountBodyRequest) returns (ServiceAccount) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/sa/{sa.uuid}"
      body: "sa"
    };
  }

  // Delete service account
  rpc DeleteServiceAccount(OwnerEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/orgs/{owner}/sa/{uuid}"
    };
  }

  // List service account tokens
  rpc ListServiceAccountTokens(OwnerSubEntityResourceListRequestByUid) returns (ListTokenResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/sa/{uuid}/tokens"
    };
  }

  // Create service account token
  rpc CreateServiceAccountToken(EntityTokenBodyRequest) returns (Token) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/sa/{entity}/tokens"
      body: "token"
    };
  }

  // Get service account token
  rpc GetServiceAccountToken(OwnerSubEntityResourceRequestByUid) returns (Token) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/sa/{entity}/tokens/{uuid}"
    };
  }

  // Update service account token
  rpc UpdateServiceAccountToken(EntityTokenBodyRequest) returns (Token) {
    option (google.api.http) = {
      put: "/api/v1/orgs/{owner}/sa/{entity}/tokens/{token.uuid}"
      body: "token"
    };
  }

  // Patch service account token
  rpc PatchServiceAccountToken(EntityTokenBodyRequest) returns (Token) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/sa/{entity}/tokens/{token.uuid}"
      body: "token"
    };
  }

  // Delete service account token
  rpc DeleteServiceAccountToken(OwnerSubEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/orgs/{owner}/sa/{entity}/tokens/{uuid}"
    };
  }
}

// Service to manage queues
service QueuesV1 {
  // List organization level queues names
  rpc ListOrganizationQueueNames(OwnerResourceListRequest) returns (ListQueuesResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/queues/names"
    };
  }

  // List organization level queues
  rpc ListOrganizationQueues(OwnerResourceListRequest) returns (ListQueuesResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/queues"
    };
  }

  // List queues names
  rpc ListQueueNames(OwnerEntityResourceListRequestByName) returns (ListQueuesResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/agents/{name}/queues/names"
    };
  }

  // List queues
  rpc ListQueues(OwnerEntityResourceListRequestByName) returns (ListQueuesResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/agents/{name}/queues"
    };
  }

  // Create queue
  rpc CreateQueue(QueueBodyRequest) returns (Queue) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/agents/{agent}/queues"
      body: "queue"
    };
  }

  // Get queue
  rpc GetQueue(OwnerSubEntityResourceRequestByUid) returns (Queue) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/agents/{entity}/queues/{uuid}"
    };
  }

  // Update queue
  rpc UpdateQueue(QueueBodyRequest) returns (Queue) {
    option (google.api.http) = {
      put: "/api/v1/orgs/{owner}/agents/{agent}/queues/{queue.uuid}"
      body: "queue"
    };
  }

  // Patch queue
  rpc PatchQueue(QueueBodyRequest) returns (Queue) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/agents/{agent}/queues/{queue.uuid}"
      body: "queue"
    };
  }

  // Delete queue
  rpc DeleteQueue(OwnerSubEntityResourceRequestByUid) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/orgs/{owner}/agents/{entity}/queues/{uuid}"
    };
  }
}

// Service to manage auth
service AuthV1 {
  // Trial Start
  rpc Trial(TrialStart) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/auth/trial"
      body: "*"
    };
  }

  // Login
  rpc Login(Credentials) returns (Auth) {
    option (google.api.http) = {
      post: "/api/v1/auth/token"
      body: "*"
    };
  }

  // Signup
  rpc Signup(UserSingup) returns (Auth) {
    option (google.api.http) = {
      post: "/api/v1/auth/signup"
      body: "*"
    };
  }

  // Reset password
  rpc ResetPassword(UserEmail) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/auth/reset-password"
      body: "*"
    };
  }

  // Reset password confirm
  rpc ResetPasswordConfirm(PasswordChange) returns (Auth) {
    option (google.api.http) = {
      post: "/api/v1/auth/reset-password-confirm"
      body: "*"
    };
  }

  // Change password
  rpc ChangePassword(PasswordChange) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/auth/change-password"
      body: "*"
    };
  }
}

// Service to get user level infotmation
service UsersV1 {
  // Get current user
  rpc GetUser(google.protobuf.Empty) returns (User) {
    option (google.api.http) = {
      get: "/api/v1/users"
    };
  }
  // Update current user
  rpc UpdateUser(User) returns (User) {
    option (google.api.http) = {
      put: "/api/v1/users"
      body: "*"
    };
  }

  // Patch current user
  rpc PatchUser(User) returns (User) {
    option (google.api.http) = {
      patch: "/api/v1/users"
      body: "*"
    };
  }

  // List tokens
  rpc ListTokens(ResourceListRequest) returns (ListTokenResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/tokens"
    };
  }

  // Create token
  rpc CreateToken(TokenBodyRequest) returns (Token) {
    option (google.api.http) = {
      post: "/api/v1/users/tokens"
      body: "token"
    };
  }

  // Get token
  rpc GetToken(UuidResourceRequest) returns (Token) {
    option (google.api.http) = {
      get: "/api/v1/users/tokens/{uuid}"
    };
  }

  // Update token
  rpc UpdateToken(TokenBodyRequest) returns (Token) {
    option (google.api.http) = {
      put: "/api/v1/users/tokens/{token.uuid}"
      body: "token"
    };
  }

  // Patch token
  rpc PatchToken(TokenBodyRequest) returns (Token) {
    option (google.api.http) = {
      patch: "/api/v1/users/tokens/{token.uuid}"
      body: "token"
    };
  }

  // Delete token
  rpc DeleteToken(UuidResourceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/users/tokens/{uuid}"
    };
  }

  // User suggestions
  rpc GetSuggestions(ResourceListRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      get: "/api/v1/users/suggestions"
    };
  }

  // User workspaces
  rpc GetWorkspaces(ResourceListRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      get: "/api/v1/users/workspaces"
    };
  }

  // User History
  rpc GetHistory(ResourceListRequest) returns (ListActivitiesResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/history"
    };
  }
}

// Service to get versions
service VersionsV1 {
  // Get installation versions
  rpc GetInstallation(InstallationResourceRequest) returns (Installation) {
    option (google.api.http) = {
      get: "/api/v1/installation"
    };
  }

  // Get compatibility versions
  rpc GetCompatibility(ServiceResourceRequest) returns (Compatibility) {
    option (google.api.http) = {
      get: "/api/v1/compatibility/{uuid}/{version}/{service}"
    };
  }

  // Get log handler versions
  rpc GetLogHandler(google.protobuf.Empty) returns (LogHandler) {
    option (google.api.http) = {
      get: "/api/v1/log_handler"
    };
  }
}

// Service to manage organizations
service OrganizationsV1 {
  // List organizations names
  rpc ListOrganizationNames(google.protobuf.Empty) returns (ListOrganizationsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/names"
    };
  }

  // List organizations
  rpc ListOrganizations(google.protobuf.Empty) returns (ListOrganizationsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/list"
    };
  }

  // Create organization
  rpc CreateOrganization(Organization) returns (Organization) {
    option (google.api.http) = {
      post: "/api/v1/orgs/create"
      body: "*"
    };
  }

  // Get organization
  rpc GetOrganization(OwnerResourceRequest) returns (Organization) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}"
    };
  }

  // Update organization
  rpc UpdateOrganization(OrganizationBodyRequest) returns (Organization) {
    option (google.api.http) = {
      put: "/api/v1/orgs/{owner}"
      body: "organization"
    };
  }

  // Patch organization
  rpc PatchOrganization(OrganizationBodyRequest) returns (Organization) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}"
      body: "organization"
    };
  }

  // Delete organization
  rpc DeleteOrganization(OwnerResourceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/orgs/{owner}"
    };
  }

  // Get organization stats
  rpc GetOrganizationStats(OwnerStatsRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/stats"
    };
  }

  // Get all runs in an organization
  rpc GetOrganizationVersions(OwnerVersionResourceListRequest) returns (ListProjectVersionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/versions/{kind}"
    };
  }

  // Get all runs in an organization
  rpc GetOrganizationRuns(OwnerResourceListRequest) returns (ListRunsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/runs"
    };
  }

  // Get a run in an organization
  rpc GetOrganizationRun(OwnerEntityResourceRequestByUid) returns (Run) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/runs/{uuid}"
    };
  }

  // Delete cross-project runs selection
  rpc DeleteOrganizationRuns(OwnerResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/orgs/{owner}/runs/delete"
      body: "uuids"
    };
  }

  // Stop cross-project runs selection
  rpc StopOrganizationRuns(OwnerResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/runs/stop"
      body: "uuids"
    };
  }

  // Skip cross-project runs selection
  rpc SkipOrganizationRuns(OwnerResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/runs/Skip"
      body: "uuids"
    };
  }

  // Approve cross-project runs selection
  rpc ApproveOrganizationRuns(OwnerResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/runs/approve"
      body: "uuids"
    };
  }

  // Invalidate cross-project runs selection
  rpc InvalidateOrganizationRuns(OwnerResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/runs/invalidate"
      body: "uuids"
    };
  }

  // Archive cross-project runs selection
  rpc ArchiveOrganizationRuns(OwnerResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/runs/archive"
      body: "uuids"
    };
  }

  // Restore cross-project runs selection
  rpc RestoreOrganizationRuns(OwnerResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/runs/restore"
      body: "uuids"
    };
  }

  // Bookmark cross-project runs selection
  rpc BookmarkOrganizationRuns(OwnerResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/runs/bookmark"
      body: "uuids"
    };
  }

  // Tag cross-project runs selection
  rpc TagOrganizationRuns(OwnerTagResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/runs/tag"
      body: "data"
    };
  }

  // Transfer cross-project runs selection to a new project
  rpc TransferOrganizationRuns(OwnerTransferResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/runs/transfer"
      body: "data"
    };
  }

  // Get runs artifacts lineage
  rpc GetOrganizationRunsArtifactsLineage(OwnerEntityResourceListRequestByName) returns (ListRunArtifactsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/runs/lineage/artifacts"
    };
  }

  // Get multi run importance
  rpc GetOrganizationMultiRunImportance(RunImportanceCorrelationRequest) returns (MultiEventsResponse) {
    option (google.api.http) = {
      post: "/streams/v1/{namespace}/orgs/{owner}/runs/multi/importance"
      body: "data",
    };
  }

  // Get multi runs events
  rpc GetOrganizationMultiRunEvents(RunEventsRequest) returns (MultiEventsResponse) {
    option (google.api.http) = {
      get: "/streams/v1/{namespace}/orgs/{owner}/runs/multi/events/{kind}"
    };
  }

  // Get organization activities
  rpc GetOrganizationActivities(OwnerResourceListRequest) returns (ListActivitiesResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/activities"
    };
  }

  // Get organization members
  rpc ListOrganizationMembers(OwnerResourceListRequest) returns (ListOrganizationMembersResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/members"
    };
  }

  // Get organization member names
  rpc ListOrganizationMemberNames(OwnerResourceListRequest) returns (ListOrganizationMembersResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/members/names"
    };
  }

  // Create organization member
  rpc CreateOrganizationMember(OrganizationMemberBodyRequest) returns (OrganizationMember) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/members"
      body: "member"
    };
  }

  // Get organization member details
  rpc GetOrganizationMember(OwnerEntityResourceRequestByName) returns (OrganizationMember) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/members/{name}"
    };
  }

  // Update organization member
  rpc UpdateOrganizationMember(OrganizationMemberBodyRequest) returns (OrganizationMember) {
    option (google.api.http) = {
      put: "/api/v1/orgs/{owner}/members/{member.user}"
      body: "member"
    };
  }

  // Patch organization member
  rpc PatchOrganizationMember(OrganizationMemberBodyRequest) returns (OrganizationMember) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/members/{member.user}"
      body: "member"
    };
  }

  // Delete organization member details
  rpc DeleteOrganizationMember(OwnerEntityResourceRequestByName) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/orgs/{owner}/members/{name}"
    };
  }

  // Get organization invitation details
  rpc GetOrganizationInvitation(OrganizationMemberBodyRequest) returns (OrganizationMember) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/invitations"
    };
  }

  // Update organization invitation
  rpc UpdateOrganizationInvitation(OrganizationMemberBodyRequest) returns (OrganizationMember) {
    option (google.api.http) = {
      put: "/api/v1/orgs/{owner}/invitations"
      body: "member"
    };
  }

  // Patch organization invitation
  rpc PatchOrganizationInvitation(OrganizationMemberBodyRequest) returns (OrganizationMember) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/invitations"
      body: "member"
    };
  }

  // Resend organization invitation
  rpc ResendOrganizationInvitation(OrganizationMemberBodyRequest) returns (OrganizationMember) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/invitations"
      body: "member"
    };
  }

  // Delete organization invitation details
  rpc DeleteOrganizationInvitation(OrganizationMemberBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/orgs/{owner}/invitations"
    };
  }

  // Get organization settings
  rpc GetOrganizationSettings(OrganizationBodyRequest) returns (Organization) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/settings"
    };
  }

  // Update organization settings
  rpc UpdateOrganizationSettings(OrganizationBodyRequest) returns (Organization) {
    option (google.api.http) = {
      put: "/api/v1/orgs/{owner}/settings"
      body: "organization"
    };
  }

  // Patch oranization settings
  rpc PatchOrganizationSettings(OrganizationBodyRequest) returns (Organization) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/settings"
      body: "organization"
    };
  }

  // Organization plan
  rpc OrganizationPlan(OrganizationBodyRequest) returns (Organization) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/plan"
      body: "organization"
    };
  }

  // Organization license
  rpc OrganizationLicense(OrganizationBodyRequest) returns (Organization) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/license"
      body: "organization"
    };
  }
}

// Service to manage teams
service TeamsV1 {
  // List teams names
  rpc ListTeamNames(OwnerResourceListRequest) returns (ListTeamsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/teams/names"
    };
  }

  // List teams
  rpc ListTeams(OwnerResourceListRequest) returns (ListTeamsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/teams"
    };
  }

  // Create team
  rpc CreateTeam(TeamBodyRequest) returns (Team) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/teams"
      body: "team"
    };
  }

  // Get team
  rpc GetTeam(OwnerEntityResourceRequestByName) returns (Team) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/teams/{name}"
    };
  }

  // Update team
  rpc UpdateTeam(TeamBodyRequest) returns (Team) {
    option (google.api.http) = {
      put: "/api/v1/orgs/{owner}/teams/{team.name}"
      body: "team"
    };
  }

  // Patch team
  rpc PatchTeam(TeamBodyRequest) returns (Team) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/teams/{team.name}"
      body: "team"
    };
  }

  // Delete team
  rpc DeleteTeam(OwnerEntityResourceRequestByName) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/orgs/{owner}/teams/{name}"
    };
  }

  // Get team members
  rpc ListTeamMembers(OwnerEntityResourceListRequestByName) returns (ListTeamMembersResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/teams/{name}/members"
    };
  }

  // Create team member
  rpc CreateTeamMember(TeamMemberBodyRequest) returns (TeamMember) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/teams/{team}/members"
      body: "member"
    };
  }

  // Get team member details
  rpc GetTeamMember(TeamMemeberResourceRequest) returns (TeamMember) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/teams/{team}/members/{user}"
    };
  }

  // Update team member
  rpc UpdateTeamMember(TeamMemberBodyRequest) returns (TeamMember) {
    option (google.api.http) = {
      put: "/api/v1/orgs/{owner}/teams/{team}/members/{member.user}"
      body: "member"
    };
  }

  // Patch team member
  rpc PatchTeamMember(TeamMemberBodyRequest) returns (TeamMember) {
    option (google.api.http) = {
      patch: "/api/v1/orgs/{owner}/teams/{team}/members/{member.user}"
      body: "member"
    };
  }

  // Delete team member details
  rpc DeleteTeamMember(TeamMemeberResourceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/orgs/{owner}/teams/{team}/members/{user}"
    };
  }

  // Get team stats
  rpc GetTeamStats(OwnerEntityStatsRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/teams/{name}/stats"
    };
  }

  // Get all runs in a team
  rpc GetTeamVersions(OwnerEntityVersionResourceListRequestByName) returns (ListProjectVersionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/teams/{entity}/versions/{kind}"
    };
  }

  // Get all runs in a team
  rpc GetTeamRuns(OwnerEnitytResourceListRequest) returns (ListRunsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/teams/{name}/runs"
    };
  }

  // Get a run in a team
  rpc GetTeamRun(OwnerSubEntityResourceRequestByUid) returns (Run) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/teams/{entity}/runs/{uuid}"
    };
  }

  // Delete cross-project runs selection
  rpc DeleteTeamRuns(OwnerEntityResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/orgs/{owner}/teams/{name}/runs/delete"
      body: "uuids"
    };
  }

  // Stop cross-project runs selection
  rpc StopTeamRuns(OwnerEntityResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/teams/{name}/runs/stop"
      body: "uuids"
    };
  }

  // Skip cross-project runs selection
  rpc SkipTeamRuns(OwnerEntityResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/teams/{name}/runs/Skip"
      body: "uuids"
    };
  }

  // Approve cross-project runs selection
  rpc ApproveTeamRuns(OwnerEntityResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/teams/{name}/runs/approve"
      body: "uuids"
    };
  }

  // Invalidate cross-project runs selection
  rpc InvalidateTeamRuns(OwnerEntityResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/teams/{name}/runs/invalidate"
      body: "uuids"
    };
  }

  // Archive cross-project runs selection
  rpc ArchiveTeamRuns(OwnerEntityResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/teams/{name}/runs/archive"
      body: "uuids"
    };
  }

  // Restore cross-project runs selection
  rpc RestoreTeamRuns(OwnerEntityResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/teams/{name}/runs/restore"
      body: "uuids"
    };
  }

  // Bookmark cross-project runs selection
  rpc BookmarkTeamRuns(OwnerEntityResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/teams/{name}/runs/bookmark"
      body: "uuids"
    };
  }

  // Tag cross-project runs selection
  rpc TagTeamRuns(OwnerEntityTagResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/teams/{name}/runs/tag"
      body: "data"
    };
  }

  // Transfer cross-project runs selection to a new project
  rpc TransferTeamRuns(OwnerEntityTransferResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/orgs/{owner}/teams/{name}/runs/transfer"
      body: "data"
    };
  }

  // Get runs artifacts lineage
  rpc GetTeamRunsArtifactsLineage(OwnerEntityResourceListRequestByName) returns (ListRunArtifactsResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/teams/{name}/runs/lineage/artifacts"
    };
  }

  // Get multi run importance
  rpc GetTeamMultiRunImportance(RunImportanceCorrelationRequest) returns (MultiEventsResponse) {
    option (google.api.http) = {
      post: "/streams/v1/{namespace}/orgs/{owner}/teams/{entity}/runs/multi/importance"
      body: "data",
    };
  }

  // Get multi runs events
  rpc GetTeamMultiRunEvents(RunEventsRequest) returns (MultiEventsResponse) {
    option (google.api.http) = {
      get: "/streams/v1/{namespace}/orgs/{owner}/teams/{entity}/runs/multi/events/{kind}"
    };
  }

  // Get organization activities
  rpc GetTeamActivities(OwnerEnitytResourceListRequest) returns (ListActivitiesResponse) {
    option (google.api.http) = {
      get: "/api/v1/orgs/{owner}/teams/{name}/activities"
    };
  }
}

// Service noop
service SchemasV1 {
  // NoOp
  rpc NoOp(google.protobuf.Empty) returns (Schemas) {
    option (google.api.http) = {
      get: "/schemas"
    };
  }
}
