# coding: utf-8

"""
    Polyaxon SDKs and REST API specification.

         # noqa: E501

    The version of the OpenAPI document: 2.7.0
    Contact: contact@polyaxon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, conlist
from polyaxon_sdk.models.v1_run import V1Run
from polyaxon_sdk.models.v1_run_edge_kind import V1RunEdgeKind
from polyaxon_sdk.models.v1_statuses import V1Statuses

class V1RunEdge(BaseModel):
    """
    V1RunEdge
    """
    upstream: Optional[V1Run] = None
    downstream: Optional[V1Run] = None
    kind: Optional[V1RunEdgeKind] = None
    values: Optional[Dict[str, Any]] = None
    statuses: Optional[conlist(V1Statuses)] = None
    __properties = ["upstream", "downstream", "kind", "values", "statuses"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1RunEdge:
        """Create an instance of V1RunEdge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of upstream
        if self.upstream:
            _dict['upstream'] = self.upstream.to_dict()
        # override the default output from pydantic by calling `to_dict()` of downstream
        if self.downstream:
            _dict['downstream'] = self.downstream.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1RunEdge:
        """Create an instance of V1RunEdge from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return V1RunEdge.parse_obj(obj)

        _obj = V1RunEdge.parse_obj({
            "upstream": V1Run.from_dict(obj.get("upstream")) if obj.get("upstream") is not None else None,
            "downstream": V1Run.from_dict(obj.get("downstream")) if obj.get("downstream") is not None else None,
            "kind": obj.get("kind"),
            "values": obj.get("values"),
            "statuses": obj.get("statuses")
        })
        return _obj

