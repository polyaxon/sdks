# coding: utf-8

"""
    Polyaxon SDKs and REST API specification.

         # noqa: E501

    The version of the OpenAPI document: 2.7.0-rc0
    Contact: contact@polyaxon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist
from polyaxon_sdk.models.v1_user_access_data import V1UserAccessData

class V1UserAccess(BaseModel):
    """
    V1UserAccess
    """
    user: Optional[StrictStr] = None
    user_data: Optional[V1UserAccessData] = None
    queue: Optional[StrictStr] = None
    default_presets: Optional[conlist(StrictStr)] = None
    default_presets_ordered: Optional[conlist(StrictStr)] = None
    namespace: Optional[StrictStr] = None
    __properties = ["user", "user_data", "queue", "default_presets", "default_presets_ordered", "namespace"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1UserAccess:
        """Create an instance of V1UserAccess from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of user_data
        if self.user_data:
            _dict['user_data'] = self.user_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1UserAccess:
        """Create an instance of V1UserAccess from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return V1UserAccess.parse_obj(obj)

        _obj = V1UserAccess.parse_obj({
            "user": obj.get("user"),
            "user_data": V1UserAccessData.from_dict(obj.get("user_data")) if obj.get("user_data") is not None else None,
            "queue": obj.get("queue"),
            "default_presets": obj.get("default_presets"),
            "default_presets_ordered": obj.get("default_presets_ordered"),
            "namespace": obj.get("namespace")
        })
        return _obj

