{
  "$id": "http://core.polyaxon.com/operations.json",
  "$schema": "http://json-schema.org/schema#",
  "definitions": {
    "AgentStateResponseAgentState": {
      "properties": {
        "apply": {
          "title": "List of apply runs",
          "type": "object"
        },
        "checks": {
          "title": "List of run checks",
          "type": "object"
        },
        "deleting": {
          "title": "List of deleting runs",
          "type": "object"
        },
        "full": {
          "title": "A flag to tell the agent that the queues are still full",
          "type": "boolean"
        },
        "hooks": {
          "title": "List of hooks runs",
          "type": "object"
        },
        "queued": {
          "title": "List of queued runs",
          "type": "object"
        },
        "schedules": {
          "title": "List of schdules runs",
          "type": "object"
        },
        "stopping": {
          "title": "List of stopping runs",
          "type": "object"
        },
        "tuners": {
          "title": "List of tuners runs",
          "type": "object"
        },
        "watchdogs": {
          "title": "List of watchdogs runs",
          "type": "object"
        }
      },
      "type": "object"
    },
    "MXJobMode": {
      "default": "MXTrain",
      "enum": [
        "MXTrain",
        "MXTune"
      ],
      "title": "- MXTrain: Train Mode, requires Server, Scheduler, Worker\n - MXTune: Tune Mode, requires Tuner",
      "type": "string"
    },
    "SearchView": {
      "default": "any",
      "description": "- any: Any view\n - runs: Runs view\n - selection: Selection view\n - analytics: Analytics view\n - components: Components view\n - models: Models view\n - artifacts: Artifacts view\n - projects: Projects view",
      "enum": [
        "any",
        "runs",
        "selection",
        "analytics",
        "components",
        "models",
        "artifacts",
        "projects"
      ],
      "title": "Search view",
      "type": "string"
    },
    "io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource": {
      "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "string"
        },
        "partition": {
          "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
          "format": "int32",
          "type": "integer"
        },
        "readOnly": {
          "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "boolean"
        },
        "volumeID": {
          "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Affinity": {
      "description": "Affinity is a group of affinity scheduling rules.",
      "properties": {
        "nodeAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeAffinity",
          "description": "Describes node affinity scheduling rules for the pod."
        },
        "podAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinity",
          "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s))."
        },
        "podAntiAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAntiAffinity",
          "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s))."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.AttachedVolume": {
      "description": "AttachedVolume describes a volume attached to a node",
      "properties": {
        "devicePath": {
          "description": "DevicePath represents the device path where the volume should be available",
          "type": "string"
        },
        "name": {
          "description": "Name of the attached volume",
          "type": "string"
        }
      },
      "required": [
        "name",
        "devicePath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.AzureDiskVolumeSource": {
      "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
      "properties": {
        "cachingMode": {
          "description": "Host Caching mode: None, Read Only, Read Write.",
          "type": "string"
        },
        "diskName": {
          "description": "The Name of the data disk in the blob storage",
          "type": "string"
        },
        "diskURI": {
          "description": "The URI the data disk in the blob storage",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "kind": {
          "description": "Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        }
      },
      "required": [
        "diskName",
        "diskURI"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.AzureFilePersistentVolumeSource": {
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
      "properties": {
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretName": {
          "description": "the name of secret that contains Azure Storage Account Name and Key",
          "type": "string"
        },
        "secretNamespace": {
          "description": "the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod",
          "type": "string"
        },
        "shareName": {
          "description": "Share Name",
          "type": "string"
        }
      },
      "required": [
        "secretName",
        "shareName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.AzureFileVolumeSource": {
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
      "properties": {
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretName": {
          "description": "the name of secret that contains Azure Storage Account Name and Key",
          "type": "string"
        },
        "shareName": {
          "description": "Share Name",
          "type": "string"
        }
      },
      "required": [
        "secretName",
        "shareName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CSIPersistentVolumeSource": {
      "description": "Represents storage that is managed by an external CSI volume driver (Beta feature)",
      "properties": {
        "controllerExpandSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "ControllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed."
        },
        "controllerPublishSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed."
        },
        "driver": {
          "description": "Driver is the name of the driver to use for this volume. Required.",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\".",
          "type": "string"
        },
        "nodePublishSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed."
        },
        "nodeStageSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed."
        },
        "readOnly": {
          "description": "Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).",
          "type": "boolean"
        },
        "volumeAttributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Attributes of the volume to publish.",
          "type": "object"
        },
        "volumeHandle": {
          "description": "VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.",
          "type": "string"
        }
      },
      "required": [
        "driver",
        "volumeHandle"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CSIVolumeSource": {
      "description": "Represents a source location of a volume to mount, managed by an external CSI driver",
      "properties": {
        "driver": {
          "description": "Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
          "type": "string"
        },
        "nodePublishSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed."
        },
        "readOnly": {
          "description": "Specifies a read-only configuration for the volume. Defaults to false (read/write).",
          "type": "boolean"
        },
        "volumeAttributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
          "type": "object"
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Capabilities": {
      "description": "Adds and removes POSIX capabilities from running containers.",
      "properties": {
        "add": {
          "description": "Added capabilities",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "drop": {
          "description": "Removed capabilities",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.CephFSPersistentVolumeSource": {
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "monitors": {
          "description": "Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "path": {
          "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
          "type": "string"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretFile": {
          "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
        },
        "user": {
          "description": "Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "required": [
        "monitors"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CephFSVolumeSource": {
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "monitors": {
          "description": "Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "path": {
          "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
          "type": "string"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretFile": {
          "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
        },
        "user": {
          "description": "Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "required": [
        "monitors"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CinderPersistentVolumeSource": {
      "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "Optional: points to a secret object containing parameters used to connect to OpenStack."
        },
        "volumeID": {
          "description": "volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CinderVolumeSource": {
      "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "Optional: points to a secret object containing parameters used to connect to OpenStack."
        },
        "volumeID": {
          "description": "volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ClientIPConfig": {
      "description": "ClientIPConfig represents the configurations of Client IP based session affinity.",
      "properties": {
        "timeoutSeconds": {
          "description": "timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be \u003e0 \u0026\u0026 \u003c=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours).",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMap": {
      "description": "ConfigMap holds configuration data for pods to consume.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "binaryData": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.",
          "type": "object"
        },
        "data": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.",
          "type": "object"
        },
        "immutable": {
          "description": "Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil. This is an alpha field enabled by ImmutableEphemeralVolumes feature gate.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "ConfigMap"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ConfigMapEnvSource": {
      "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapKeySelector": {
      "description": "Selects a key from a ConfigMap.",
      "properties": {
        "key": {
          "description": "The key to select.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or its key must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "key"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapList": {
      "description": "ConfigMapList is a resource containing a list of ConfigMap objects.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of ConfigMaps.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "ConfigMapList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ConfigMapList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ConfigMapNodeConfigSource": {
      "description": "ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.",
      "properties": {
        "kubeletConfigKey": {
          "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.",
          "type": "string"
        },
        "name": {
          "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.",
          "type": "string"
        },
        "resourceVersion": {
          "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "name",
        "kubeletConfigKey"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapProjection": {
      "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
      "properties": {
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or its keys must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapVolumeSource": {
      "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or its keys must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Container": {
      "description": "A single application container that you want to run within a pod.",
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          },
          "type": "array"
        },
        "image": {
          "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle",
          "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated."
        },
        "livenessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "name": {
          "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
          "type": "string"
        },
        "ports": {
          "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "containerPort",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "containerPort",
          "x-kubernetes-patch-strategy": "merge"
        },
        "readinessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext",
          "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"
        },
        "startupProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "stdin": {
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
          "type": "boolean"
        },
        "stdinOnce": {
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
          "type": "boolean"
        },
        "terminationMessagePath": {
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
          "type": "string"
        },
        "tty": {
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "devicePath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "mountPath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerImage": {
      "description": "Describe a container image",
      "properties": {
        "names": {
          "description": "Names by which this image is known. e.g. [\"k8s.gcr.io/hyperkube:v1.0.7\", \"dockerhub.io/google_containers/hyperkube:v1.0.7\"]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sizeBytes": {
          "description": "The size of the image in bytes.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "names"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerPort": {
      "description": "ContainerPort represents a network port in a single container.",
      "properties": {
        "containerPort": {
          "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 \u003c x \u003c 65536.",
          "format": "int32",
          "type": "integer"
        },
        "hostIP": {
          "description": "What host IP to bind the external port to.",
          "type": "string"
        },
        "hostPort": {
          "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 \u003c x \u003c 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
          "type": "string"
        }
      },
      "required": [
        "containerPort"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerState": {
      "description": "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.",
      "properties": {
        "running": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateRunning",
          "description": "Details about a running container"
        },
        "terminated": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateTerminated",
          "description": "Details about a terminated container"
        },
        "waiting": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateWaiting",
          "description": "Details about a waiting container"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStateRunning": {
      "description": "ContainerStateRunning is a running state of a container.",
      "properties": {
        "startedAt": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time at which the container was last (re-)started"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStateTerminated": {
      "description": "ContainerStateTerminated is a terminated state of a container.",
      "properties": {
        "containerID": {
          "description": "Container's ID in the format 'docker://\u003ccontainer_id\u003e'",
          "type": "string"
        },
        "exitCode": {
          "description": "Exit status from the last termination of the container",
          "format": "int32",
          "type": "integer"
        },
        "finishedAt": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time at which the container last terminated"
        },
        "message": {
          "description": "Message regarding the last termination of the container",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason from the last termination of the container",
          "type": "string"
        },
        "signal": {
          "description": "Signal from the last termination of the container",
          "format": "int32",
          "type": "integer"
        },
        "startedAt": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time at which previous execution of the container started"
        }
      },
      "required": [
        "exitCode"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStateWaiting": {
      "description": "ContainerStateWaiting is a waiting state of a container.",
      "properties": {
        "message": {
          "description": "Message regarding why the container is not yet running.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason the container is not yet running.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStatus": {
      "description": "ContainerStatus contains details for the current status of this container.",
      "properties": {
        "containerID": {
          "description": "Container's ID in the format 'docker://\u003ccontainer_id\u003e'.",
          "type": "string"
        },
        "image": {
          "description": "The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images",
          "type": "string"
        },
        "imageID": {
          "description": "ImageID of the container's image.",
          "type": "string"
        },
        "lastState": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState",
          "description": "Details about the container's last termination condition."
        },
        "name": {
          "description": "This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.",
          "type": "string"
        },
        "ready": {
          "description": "Specifies whether the container has passed its readiness probe.",
          "type": "boolean"
        },
        "restartCount": {
          "description": "The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.",
          "format": "int32",
          "type": "integer"
        },
        "started": {
          "description": "Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.",
          "type": "boolean"
        },
        "state": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState",
          "description": "Details about the container's current condition."
        }
      },
      "required": [
        "name",
        "ready",
        "restartCount",
        "image",
        "imageID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIVolumeSource": {
      "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "description": "Items is a list of downward API volume file",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EmptyDirVolumeSource": {
      "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
      "properties": {
        "medium": {
          "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
          "type": "string"
        },
        "sizeLimit": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvFromSource": {
      "description": "EnvFromSource represents the source of a set of ConfigMaps",
      "properties": {
        "configMapRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapEnvSource",
          "description": "The ConfigMap to select from"
        },
        "prefix": {
          "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretEnvSource",
          "description": "The Secret to select from"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvVar": {
      "description": "EnvVar represents an environment variable present in a Container.",
      "properties": {
        "name": {
          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "value": {
          "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
          "type": "string"
        },
        "valueFrom": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EnvVarSource",
          "description": "Source for the environment variable's value. Cannot be used if value is not empty."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvVarSource": {
      "description": "EnvVarSource represents a source for the value of an EnvVar.",
      "properties": {
        "configMapKeyRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector",
          "description": "Selects a key of a ConfigMap."
        },
        "fieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector",
          "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs."
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector",
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported."
        },
        "secretKeyRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "Selects a key of a secret in the pod's namespace"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Event": {
      "description": "Event is a report of an event somewhere in the cluster.",
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the Regarding object.",
          "type": "string"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "count": {
          "description": "The number of times this event has occurred.",
          "format": "int32",
          "type": "integer"
        },
        "eventTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time when this Event was first observed."
        },
        "firstTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)"
        },
        "involvedObject": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The object that this event is about."
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "Event"
          ],
          "type": "string"
        },
        "lastTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time at which the most recent occurrence of this event was recorded."
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "reason": {
          "description": "This should be a short, machine understandable string that gives the reason for the transition into the object's current status.",
          "type": "string"
        },
        "related": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "Optional secondary object for more complex actions."
        },
        "reportingComponent": {
          "description": "Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "ID of the controller instance, e.g. `kubelet-xyzf`.",
          "type": "string"
        },
        "series": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSeries",
          "description": "Data about the Event series this event represents or nil if it's a singleton Event."
        },
        "source": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource",
          "description": "The component reporting this event. Should be a short machine understandable string."
        },
        "type": {
          "description": "Type of this event (Normal, Warning), new types could be added in the future",
          "type": "string"
        }
      },
      "required": [
        "metadata",
        "involvedObject"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.EventList": {
      "description": "EventList is a list of events.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of events",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Event"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "EventList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "EventList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.EventSeries": {
      "description": "EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.",
      "properties": {
        "count": {
          "description": "Number of occurrences in this series up to the last heartbeat time",
          "format": "int32",
          "type": "integer"
        },
        "lastObservedTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time of the last occurrence observed"
        },
        "state": {
          "description": "State of this Series: Ongoing or Finished Deprecated. Planned removal for 1.18",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EventSource": {
      "description": "EventSource contains information for an event.",
      "properties": {
        "component": {
          "description": "Component from which the event is generated.",
          "type": "string"
        },
        "host": {
          "description": "Node name on which the event is generated.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ExecAction": {
      "description": "ExecAction describes a \"run in container\" action.",
      "properties": {
        "command": {
          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.FCVolumeSource": {
      "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "lun": {
          "description": "Optional: FC target lun number",
          "format": "int32",
          "type": "integer"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "targetWWNs": {
          "description": "Optional: FC target worldwide names (WWNs)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "wwids": {
          "description": "Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.FlexPersistentVolumeSource": {
      "description": "FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.",
      "properties": {
        "driver": {
          "description": "Driver is the name of the driver to use for this volume.",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
          "type": "string"
        },
        "options": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional: Extra command options if any.",
          "type": "object"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts."
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.FlexVolumeSource": {
      "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
      "properties": {
        "driver": {
          "description": "Driver is the name of the driver to use for this volume.",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
          "type": "string"
        },
        "options": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional: Extra command options if any.",
          "type": "object"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts."
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.FlockerVolumeSource": {
      "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "datasetName": {
          "description": "Name of the dataset stored as metadata -\u003e name on the dataset for Flocker should be considered as deprecated",
          "type": "string"
        },
        "datasetUUID": {
          "description": "UUID of the dataset. This is unique identifier of a Flocker dataset",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.GCEPersistentDiskVolumeSource": {
      "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "string"
        },
        "partition": {
          "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "format": "int32",
          "type": "integer"
        },
        "pdName": {
          "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "boolean"
        }
      },
      "required": [
        "pdName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GitRepoVolumeSource": {
      "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
      "properties": {
        "directory": {
          "description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
          "type": "string"
        },
        "repository": {
          "description": "Repository URL",
          "type": "string"
        },
        "revision": {
          "description": "Commit hash for the specified revision.",
          "type": "string"
        }
      },
      "required": [
        "repository"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GlusterfsPersistentVolumeSource": {
      "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "endpoints": {
          "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "endpointsNamespace": {
          "description": "EndpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "path": {
          "description": "Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "boolean"
        }
      },
      "required": [
        "endpoints",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GlusterfsVolumeSource": {
      "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "endpoints": {
          "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "path": {
          "description": "Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "boolean"
        }
      },
      "required": [
        "endpoints",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HTTPGetAction": {
      "description": "HTTPGetAction describes an action based on HTTP Get requests.",
      "properties": {
        "host": {
          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
          "type": "string"
        },
        "httpHeaders": {
          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HTTPHeader"
          },
          "type": "array"
        },
        "path": {
          "description": "Path to access on the HTTP server.",
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        },
        "scheme": {
          "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
          "type": "string"
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Handler": {
      "description": "Handler defines a specific action that should be taken",
      "properties": {
        "exec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction",
          "description": "One and only one of the following should be specified. Exec specifies the action to take."
        },
        "httpGet": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction",
          "description": "HTTPGet specifies the http request to perform."
        },
        "tcpSocket": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction",
          "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.HostAlias": {
      "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
      "properties": {
        "hostnames": {
          "description": "Hostnames for the above IP address.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ip": {
          "description": "IP address of the host file entry.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.HostPathVolumeSource": {
      "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "path": {
          "description": "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "type": "string"
        },
        "type": {
          "description": "Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ISCSIPersistentVolumeSource": {
      "description": "ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
      "properties": {
        "chapAuthDiscovery": {
          "description": "whether support iSCSI Discovery CHAP authentication",
          "type": "boolean"
        },
        "chapAuthSession": {
          "description": "whether support iSCSI Session CHAP authentication",
          "type": "boolean"
        },
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
          "type": "string"
        },
        "initiatorName": {
          "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface \u003ctarget portal\u003e:\u003cvolume name\u003e will be created for the connection.",
          "type": "string"
        },
        "iqn": {
          "description": "Target iSCSI Qualified Name.",
          "type": "string"
        },
        "iscsiInterface": {
          "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
          "type": "string"
        },
        "lun": {
          "description": "iSCSI Target Lun number.",
          "format": "int32",
          "type": "integer"
        },
        "portals": {
          "description": "iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "CHAP Secret for iSCSI target and initiator authentication"
        },
        "targetPortal": {
          "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "string"
        }
      },
      "required": [
        "targetPortal",
        "iqn",
        "lun"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ISCSIVolumeSource": {
      "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
      "properties": {
        "chapAuthDiscovery": {
          "description": "whether support iSCSI Discovery CHAP authentication",
          "type": "boolean"
        },
        "chapAuthSession": {
          "description": "whether support iSCSI Session CHAP authentication",
          "type": "boolean"
        },
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
          "type": "string"
        },
        "initiatorName": {
          "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface \u003ctarget portal\u003e:\u003cvolume name\u003e will be created for the connection.",
          "type": "string"
        },
        "iqn": {
          "description": "Target iSCSI Qualified Name.",
          "type": "string"
        },
        "iscsiInterface": {
          "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
          "type": "string"
        },
        "lun": {
          "description": "iSCSI Target Lun number.",
          "format": "int32",
          "type": "integer"
        },
        "portals": {
          "description": "iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "CHAP Secret for iSCSI target and initiator authentication"
        },
        "targetPortal": {
          "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "string"
        }
      },
      "required": [
        "targetPortal",
        "iqn",
        "lun"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.KeyToPath": {
      "description": "Maps a string key to a path within a volume.",
      "properties": {
        "key": {
          "description": "The key to project.",
          "type": "string"
        },
        "mode": {
          "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
          "type": "string"
        }
      },
      "required": [
        "key",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Lifecycle": {
      "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
      "properties": {
        "postStart": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Handler",
          "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks"
        },
        "preStop": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Handler",
          "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LimitRange": {
      "description": "LimitRange sets resource usage limits for each kind of resource in a Namespace.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "LimitRange"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeSpec",
          "description": "Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.LimitRangeItem": {
      "description": "LimitRangeItem defines a min/max usage limit for any resource that matches on kind.",
      "properties": {
        "default": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Default resource requirement limit value by resource name if resource limit is omitted.",
          "type": "object"
        },
        "defaultRequest": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.",
          "type": "object"
        },
        "max": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Max usage constraints on this kind by resource name.",
          "type": "object"
        },
        "maxLimitRequestRatio": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.",
          "type": "object"
        },
        "min": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Min usage constraints on this kind by resource name.",
          "type": "object"
        },
        "type": {
          "description": "Type of resource that this limit applies to.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.LimitRangeList": {
      "description": "LimitRangeList is a list of LimitRange items.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of LimitRange objects. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "LimitRangeList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "LimitRangeList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.LimitRangeSpec": {
      "description": "LimitRangeSpec defines a min/max usage limit for resources that match on kind.",
      "properties": {
        "limits": {
          "description": "Limits is the list of LimitRangeItem objects that are enforced.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeItem"
          },
          "type": "array"
        }
      },
      "required": [
        "limits"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.LocalObjectReference": {
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LocalVolumeSource": {
      "description": "Local represents directly-attached storage with node affinity (Beta feature)",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default value is to auto-select a fileystem if unspecified.",
          "type": "string"
        },
        "path": {
          "description": "The full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).",
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NFSVolumeSource": {
      "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "path": {
          "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "boolean"
        },
        "server": {
          "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        }
      },
      "required": [
        "server",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeAffinity": {
      "description": "Node affinity is a group of node affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PreferredSchedulingTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector",
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSelector": {
      "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
      "properties": {
        "nodeSelectorTerms": {
          "description": "Required. A list of node selector terms. The terms are ORed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
          },
          "type": "array"
        }
      },
      "required": [
        "nodeSelectorTerms"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSelectorRequirement": {
      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "key",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSelectorTerm": {
      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
      "properties": {
        "matchExpressions": {
          "description": "A list of node selector requirements by node's labels.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          },
          "type": "array"
        },
        "matchFields": {
          "description": "A list of node selector requirements by node's fields.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ObjectFieldSelector": {
      "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
      "properties": {
        "apiVersion": {
          "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
          "type": "string"
        },
        "fieldPath": {
          "description": "Path of the field to select in the specified API version.",
          "type": "string"
        }
      },
      "required": [
        "fieldPath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "string"
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolume": {
      "description": "PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "PersistentVolume"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec",
          "description": "Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeStatus",
          "description": "Status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeClaim": {
      "description": "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "PersistentVolumeClaim"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec",
          "description": "Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimStatus",
          "description": "Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimCondition": {
      "description": "PersistentVolumeClaimCondition contails details about state of pvc",
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time we probed the condition."
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimList": {
      "description": "PersistentVolumeClaimList is a list of PersistentVolumeClaim items.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "A list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "PersistentVolumeClaimList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeClaimList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimSpec": {
      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
      "properties": {
        "accessModes": {
          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dataSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
          "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change."
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over volumes to consider for binding."
        },
        "storageClassName": {
          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
          "type": "string"
        },
        "volumeMode": {
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
          "type": "string"
        },
        "volumeName": {
          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimStatus": {
      "description": "PersistentVolumeClaimStatus is the current status of a persistent volume claim.",
      "properties": {
        "accessModes": {
          "description": "AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Represents the actual resources of the underlying volume.",
          "type": "object"
        },
        "conditions": {
          "description": "Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "phase": {
          "description": "Phase represents the current phase of PersistentVolumeClaim.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource": {
      "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
      "properties": {
        "claimName": {
          "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "string"
        },
        "readOnly": {
          "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
          "type": "boolean"
        }
      },
      "required": [
        "claimName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeList": {
      "description": "PersistentVolumeList is a list of PersistentVolume items.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "PersistentVolumeList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeSpec": {
      "description": "PersistentVolumeSpec is the specification of a persistent volume.",
      "properties": {
        "accessModes": {
          "description": "AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "awsElasticBlockStore": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource",
          "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
        },
        "azureDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource",
          "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod."
        },
        "azureFile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureFilePersistentVolumeSource",
          "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod."
        },
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
          "type": "object"
        },
        "cephfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CephFSPersistentVolumeSource",
          "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime"
        },
        "cinder": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CinderPersistentVolumeSource",
          "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
        },
        "claimRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding"
        },
        "csi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CSIPersistentVolumeSource",
          "description": "CSI represents storage that is handled by an external CSI driver (Beta feature)."
        },
        "fc": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource",
          "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod."
        },
        "flexVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlexPersistentVolumeSource",
          "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin."
        },
        "flocker": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource",
          "description": "Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running"
        },
        "gcePersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource",
          "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
        },
        "glusterfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsPersistentVolumeSource",
          "description": "Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md"
        },
        "hostPath": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource",
          "description": "HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
        },
        "iscsi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIPersistentVolumeSource",
          "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin."
        },
        "local": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalVolumeSource",
          "description": "Local represents directly-attached storage with node affinity"
        },
        "mountOptions": {
          "description": "A list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource",
          "description": "NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
        },
        "nodeAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.VolumeNodeAffinity",
          "description": "NodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume."
        },
        "persistentVolumeReclaimPolicy": {
          "description": "What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming",
          "type": "string"
        },
        "photonPersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource",
          "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine"
        },
        "portworxVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource",
          "description": "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine"
        },
        "quobyte": {
          "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource",
          "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime"
        },
        "rbd": {
          "$ref": "#/definitions/io.k8s.api.core.v1.RBDPersistentVolumeSource",
          "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md"
        },
        "scaleIO": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOPersistentVolumeSource",
          "description": "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes."
        },
        "storageClassName": {
          "description": "Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.",
          "type": "string"
        },
        "storageos": {
          "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSPersistentVolumeSource",
          "description": "StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md"
        },
        "volumeMode": {
          "description": "volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.",
          "type": "string"
        },
        "vsphereVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource",
          "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeStatus": {
      "description": "PersistentVolumeStatus is the current status of a persistent volume.",
      "properties": {
        "message": {
          "description": "A human-readable message indicating details about why the volume is in this state.",
          "type": "string"
        },
        "phase": {
          "description": "Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase",
          "type": "string"
        },
        "reason": {
          "description": "Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource": {
      "description": "Represents a Photon Controller persistent disk resource.",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "pdID": {
          "description": "ID that identifies Photon Controller persistent disk",
          "type": "string"
        }
      },
      "required": [
        "pdID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAffinity": {
      "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAffinityTerm": {
      "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running",
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over a set of resources, in this case pods."
        },
        "namespaces": {
          "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "topologyKey": {
          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
          "type": "string"
        }
      },
      "required": [
        "topologyKey"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAntiAffinity": {
      "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodCondition": {
      "description": "PodCondition contains details for the current condition of this pod.",
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time we probed the condition."
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
          "type": "string"
        },
        "type": {
          "description": "Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodDNSConfig": {
      "description": "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.",
      "properties": {
        "nameservers": {
          "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "options": {
          "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfigOption"
          },
          "type": "array"
        },
        "searches": {
          "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodDNSConfigOption": {
      "description": "PodDNSConfigOption defines DNS resolver options of a pod.",
      "properties": {
        "name": {
          "description": "Required.",
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodIP": {
      "description": "IP address information for entries in the (plural) PodIPs field. Each entry includes:\n   IP: An IP address allocated to the pod. Routable at least within the cluster.",
      "properties": {
        "ip": {
          "description": "ip is an IP address (IPv4 or IPv6) assigned to the pod",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodList": {
      "description": "PodList is a list of Pods.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of pods. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Pod"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "PodList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PodReadinessGate": {
      "description": "PodReadinessGate contains the reference to a pod condition",
      "properties": {
        "conditionType": {
          "description": "ConditionType refers to a condition in the pod's condition list with matching type.",
          "type": "string"
        }
      },
      "required": [
        "conditionType"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodSecurityContext": {
      "description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
      "properties": {
        "fsGroup": {
          "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
          "format": "int64",
          "type": "integer"
        },
        "fsGroupChangePolicy": {
          "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified defaults to \"Always\".",
          "type": "string"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
          "format": "int64",
          "type": "integer"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
          "format": "int64",
          "type": "integer"
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions",
          "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container."
        },
        "supplementalGroups": {
          "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "sysctls": {
          "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Sysctl"
          },
          "type": "array"
        },
        "windowsOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions",
          "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PortworxVolumeSource": {
      "description": "PortworxVolumeSource represents a Portworx volume resource.",
      "properties": {
        "fsType": {
          "description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "volumeID": {
          "description": "VolumeID uniquely identifies a Portworx volume",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PreferredSchedulingTerm": {
      "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
      "properties": {
        "preference": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm",
          "description": "A node selector term, associated with the corresponding weight."
        },
        "weight": {
          "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "weight",
        "preference"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Probe": {
      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
      "properties": {
        "exec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction",
          "description": "One and only one of the following should be specified. Exec specifies the action to take."
        },
        "failureThreshold": {
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
          "format": "int32",
          "type": "integer"
        },
        "httpGet": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction",
          "description": "HTTPGet specifies the http request to perform."
        },
        "initialDelaySeconds": {
          "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "format": "int32",
          "type": "integer"
        },
        "periodSeconds": {
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
          "format": "int32",
          "type": "integer"
        },
        "successThreshold": {
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
          "format": "int32",
          "type": "integer"
        },
        "tcpSocket": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction",
          "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported"
        },
        "timeoutSeconds": {
          "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ProjectedVolumeSource": {
      "description": "Represents a projected volume source",
      "properties": {
        "defaultMode": {
          "description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "sources": {
          "description": "list of volume projections",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeProjection"
          },
          "type": "array"
        }
      },
      "required": [
        "sources"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.QuobyteVolumeSource": {
      "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "group": {
          "description": "Group to map volume access to Default is no group",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
          "type": "boolean"
        },
        "registry": {
          "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
          "type": "string"
        },
        "tenant": {
          "description": "Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin",
          "type": "string"
        },
        "user": {
          "description": "User to map volume access to Defaults to serivceaccount user",
          "type": "string"
        },
        "volume": {
          "description": "Volume is a string that references an already created Quobyte volume by name.",
          "type": "string"
        }
      },
      "required": [
        "registry",
        "volume"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.RBDPersistentVolumeSource": {
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
          "type": "string"
        },
        "image": {
          "description": "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "keyring": {
          "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "monitors": {
          "description": "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "pool": {
          "description": "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        },
        "user": {
          "description": "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "required": [
        "monitors",
        "image"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.RBDVolumeSource": {
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
          "type": "string"
        },
        "image": {
          "description": "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "keyring": {
          "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "monitors": {
          "description": "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "pool": {
          "description": "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        },
        "user": {
          "description": "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "required": [
        "monitors",
        "image"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ReplicationController": {
      "description": "ReplicationController represents the configuration of a replication controller.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "ReplicationController"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerSpec",
          "description": "Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerStatus",
          "description": "Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ReplicationControllerCondition": {
      "description": "ReplicationControllerCondition describes the state of a replication controller at a certain point.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of replication controller condition.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ReplicationControllerList": {
      "description": "ReplicationControllerList is a collection of replication controllers.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "ReplicationControllerList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ReplicationControllerList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ReplicationControllerSpec": {
      "description": "ReplicationControllerSpec is the specification of a replication controller.",
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller",
          "format": "int32",
          "type": "integer"
        },
        "selector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "type": "object"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec",
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ReplicationControllerStatus": {
      "description": "ReplicationControllerStatus represents the current status of a replication controller.",
      "properties": {
        "availableReplicas": {
          "description": "The number of available replicas (ready for at least minReadySeconds) for this replication controller.",
          "format": "int32",
          "type": "integer"
        },
        "conditions": {
          "description": "Represents the latest available observations of a replication controller's current state.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "fullyLabeledReplicas": {
          "description": "The number of pods that have labels matching the labels of the pod template of the replication controller.",
          "format": "int32",
          "type": "integer"
        },
        "observedGeneration": {
          "description": "ObservedGeneration reflects the generation of the most recently observed replication controller.",
          "format": "int64",
          "type": "integer"
        },
        "readyReplicas": {
          "description": "The number of ready replicas for this replication controller.",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "description": "Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "replicas"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceFieldSelector": {
      "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
      "properties": {
        "containerName": {
          "description": "Container name: required for volumes, optional for env vars",
          "type": "string"
        },
        "divisor": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "Specifies the output format of the exposed resources, defaults to \"1\""
        },
        "resource": {
          "description": "Required: resource to select",
          "type": "string"
        }
      },
      "required": [
        "resource"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceRequirements": {
      "description": "ResourceRequirements describes the compute resource requirements.",
      "properties": {
        "limits": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "type": "object"
        },
        "requests": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SELinuxOptions": {
      "description": "SELinuxOptions are the labels to be applied to the container",
      "properties": {
        "level": {
          "description": "Level is SELinux level label that applies to the container.",
          "type": "string"
        },
        "role": {
          "description": "Role is a SELinux role label that applies to the container.",
          "type": "string"
        },
        "type": {
          "description": "Type is a SELinux type label that applies to the container.",
          "type": "string"
        },
        "user": {
          "description": "User is a SELinux user label that applies to the container.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ScaleIOPersistentVolumeSource": {
      "description": "ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\"",
          "type": "string"
        },
        "gateway": {
          "description": "The host address of the ScaleIO API Gateway.",
          "type": "string"
        },
        "protectionDomain": {
          "description": "The name of the ScaleIO Protection Domain for the configured storage.",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail."
        },
        "sslEnabled": {
          "description": "Flag to enable/disable SSL communication with Gateway, default false",
          "type": "boolean"
        },
        "storageMode": {
          "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
          "type": "string"
        },
        "storagePool": {
          "description": "The ScaleIO Storage Pool associated with the protection domain.",
          "type": "string"
        },
        "system": {
          "description": "The name of the storage system as configured in ScaleIO.",
          "type": "string"
        },
        "volumeName": {
          "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
          "type": "string"
        }
      },
      "required": [
        "gateway",
        "system",
        "secretRef"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ScaleIOVolumeSource": {
      "description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".",
          "type": "string"
        },
        "gateway": {
          "description": "The host address of the ScaleIO API Gateway.",
          "type": "string"
        },
        "protectionDomain": {
          "description": "The name of the ScaleIO Protection Domain for the configured storage.",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail."
        },
        "sslEnabled": {
          "description": "Flag to enable/disable SSL communication with Gateway, default false",
          "type": "boolean"
        },
        "storageMode": {
          "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
          "type": "string"
        },
        "storagePool": {
          "description": "The ScaleIO Storage Pool associated with the protection domain.",
          "type": "string"
        },
        "system": {
          "description": "The name of the storage system as configured in ScaleIO.",
          "type": "string"
        },
        "volumeName": {
          "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
          "type": "string"
        }
      },
      "required": [
        "gateway",
        "system",
        "secretRef"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Secret": {
      "description": "Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "data": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
          "type": "object"
        },
        "immutable": {
          "description": "Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil. This is an alpha field enabled by ImmutableEphemeralVolumes feature gate.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "Secret"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "stringData": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.",
          "type": "object"
        },
        "type": {
          "description": "Used to facilitate programmatic handling of secret data.",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.SecretEnvSource": {
      "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretKeySelector": {
      "description": "SecretKeySelector selects a key of a Secret.",
      "properties": {
        "key": {
          "description": "The key of the secret to select from.  Must be a valid secret key.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret or its key must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "key"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretList": {
      "description": "SecretList is a list of Secret.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Secret"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "SecretList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "SecretList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.SecretProjection": {
      "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
      "properties": {
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret or its key must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretReference": {
      "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
      "properties": {
        "name": {
          "description": "Name is unique within a namespace to reference a secret resource.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which the secret name must be unique.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretVolumeSource": {
      "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "optional": {
          "description": "Specify whether the Secret or its keys must be defined",
          "type": "boolean"
        },
        "secretName": {
          "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecurityContext": {
      "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
      "properties": {
        "allowPrivilegeEscalation": {
          "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
          "type": "boolean"
        },
        "capabilities": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Capabilities",
          "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime."
        },
        "privileged": {
          "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
          "type": "boolean"
        },
        "procMount": {
          "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
          "type": "string"
        },
        "readOnlyRootFilesystem": {
          "description": "Whether this container has a read-only root filesystem. Default is false.",
          "type": "boolean"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "format": "int64",
          "type": "integer"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "format": "int64",
          "type": "integer"
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions",
          "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
        },
        "windowsOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions",
          "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Service": {
      "description": "Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "Service"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceSpec",
          "description": "Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceStatus",
          "description": "Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServiceAccount": {
      "description": "ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "automountServiceAccountToken": {
          "description": "AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.",
          "type": "boolean"
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "ServiceAccount"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "secrets": {
          "description": "Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: https://kubernetes.io/docs/concepts/configuration/secret",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServiceAccountList": {
      "description": "ServiceAccountList is a list of ServiceAccount objects",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "ServiceAccountList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceAccountList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServiceAccountTokenProjection": {
      "description": "ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).",
      "properties": {
        "audience": {
          "description": "Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
          "type": "string"
        },
        "expirationSeconds": {
          "description": "ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
          "format": "int64",
          "type": "integer"
        },
        "path": {
          "description": "Path is the path relative to the mount point of the file to project the token into.",
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ServicePort": {
      "description": "ServicePort contains information on service's port.",
      "properties": {
        "appProtocol": {
          "description": "The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate.",
          "type": "string"
        },
        "name": {
          "description": "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.",
          "type": "string"
        },
        "nodePort": {
          "description": "The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport",
          "format": "int32",
          "type": "integer"
        },
        "port": {
          "description": "The port that will be exposed by this service.",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.",
          "type": "string"
        },
        "targetPort": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service"
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ServiceSpec": {
      "description": "ServiceSpec describes the attributes that a user creates on a service.",
      "properties": {
        "clusterIP": {
          "description": "clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "type": "string"
        },
        "externalIPs": {
          "description": "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "externalName": {
          "description": "externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.",
          "type": "string"
        },
        "externalTrafficPolicy": {
          "description": "externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.",
          "type": "string"
        },
        "healthCheckNodePort": {
          "description": "healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.",
          "format": "int32",
          "type": "integer"
        },
        "ipFamily": {
          "description": "ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.",
          "type": "string"
        },
        "loadBalancerIP": {
          "description": "Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.",
          "type": "string"
        },
        "loadBalancerSourceRanges": {
          "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ports": {
          "description": "The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ServicePort"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "port",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "port",
          "x-kubernetes-patch-strategy": "merge"
        },
        "publishNotReadyAddresses": {
          "description": "publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.",
          "type": "boolean"
        },
        "selector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
          "type": "object"
        },
        "sessionAffinity": {
          "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "type": "string"
        },
        "sessionAffinityConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SessionAffinityConfig",
          "description": "sessionAffinityConfig contains the configurations of session affinity."
        },
        "topologyKeys": {
          "description": "topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value \"*\" may be used to mean \"any topology\". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ExternalName\" maps to the specified externalName. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ServiceStatus": {
      "description": "ServiceStatus represents the current status of a service.",
      "properties": {
        "loadBalancer": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerStatus",
          "description": "LoadBalancer contains the current status of the load-balancer, if one is present."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SessionAffinityConfig": {
      "description": "SessionAffinityConfig represents the configurations of session affinity.",
      "properties": {
        "clientIP": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ClientIPConfig",
          "description": "clientIP contains the configurations of Client IP based session affinity."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.StorageOSPersistentVolumeSource": {
      "description": "Represents a StorageOS persistent volume resource.",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted."
        },
        "volumeName": {
          "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
          "type": "string"
        },
        "volumeNamespace": {
          "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.StorageOSVolumeSource": {
      "description": "Represents a StorageOS persistent volume resource.",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted."
        },
        "volumeName": {
          "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
          "type": "string"
        },
        "volumeNamespace": {
          "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Sysctl": {
      "description": "Sysctl defines a kernel parameter to be set",
      "properties": {
        "name": {
          "description": "Name of a property to set",
          "type": "string"
        },
        "value": {
          "description": "Value of a property to set",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.TCPSocketAction": {
      "description": "TCPSocketAction describes an action based on opening a socket",
      "properties": {
        "host": {
          "description": "Optional: Host name to connect to, defaults to the pod IP.",
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Taint": {
      "description": "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.",
      "properties": {
        "effect": {
          "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.",
          "type": "string"
        },
        "key": {
          "description": "Required. The taint key to be applied to a node.",
          "type": "string"
        },
        "timeAdded": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints."
        },
        "value": {
          "description": "The taint value corresponding to the taint key.",
          "type": "string"
        }
      },
      "required": [
        "key",
        "effect"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Toleration": {
      "description": "The pod this Toleration is attached to tolerates any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
      "properties": {
        "effect": {
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
          "type": "string"
        },
        "key": {
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
          "type": "string"
        },
        "operator": {
          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
          "type": "string"
        },
        "tolerationSeconds": {
          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
          "format": "int64",
          "type": "integer"
        },
        "value": {
          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.TypedLocalObjectReference": {
      "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of resource being referenced",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Volume": {
      "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
      "properties": {
        "awsElasticBlockStore": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource",
          "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
        },
        "azureDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource",
          "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod."
        },
        "azureFile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureFileVolumeSource",
          "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod."
        },
        "cephfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CephFSVolumeSource",
          "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime"
        },
        "cinder": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CinderVolumeSource",
          "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
        },
        "configMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapVolumeSource",
          "description": "ConfigMap represents a configMap that should populate this volume"
        },
        "csi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CSIVolumeSource",
          "description": "CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature)."
        },
        "downwardAPI": {
          "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeSource",
          "description": "DownwardAPI represents downward API about the pod that should populate this volume"
        },
        "emptyDir": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EmptyDirVolumeSource",
          "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
        },
        "fc": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource",
          "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod."
        },
        "flexVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlexVolumeSource",
          "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin."
        },
        "flocker": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource",
          "description": "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running"
        },
        "gcePersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource",
          "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
        },
        "gitRepo": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GitRepoVolumeSource",
          "description": "GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container."
        },
        "glusterfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsVolumeSource",
          "description": "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md"
        },
        "hostPath": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource",
          "description": "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
        },
        "iscsi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIVolumeSource",
          "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md"
        },
        "name": {
          "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "nfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource",
          "description": "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
        },
        "persistentVolumeClaim": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource",
          "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        },
        "photonPersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource",
          "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine"
        },
        "portworxVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource",
          "description": "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine"
        },
        "projected": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ProjectedVolumeSource",
          "description": "Items for all in one resources secrets, configmaps, and downward API"
        },
        "quobyte": {
          "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource",
          "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime"
        },
        "rbd": {
          "$ref": "#/definitions/io.k8s.api.core.v1.RBDVolumeSource",
          "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md"
        },
        "scaleIO": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOVolumeSource",
          "description": "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes."
        },
        "secret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretVolumeSource",
          "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
        },
        "storageos": {
          "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSVolumeSource",
          "description": "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes."
        },
        "vsphereVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource",
          "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeDevice": {
      "description": "volumeDevice describes a mapping of a raw block device within a container.",
      "properties": {
        "devicePath": {
          "description": "devicePath is the path inside of the container that the device will be mapped to.",
          "type": "string"
        },
        "name": {
          "description": "name must match the name of a persistentVolumeClaim in the pod",
          "type": "string"
        }
      },
      "required": [
        "name",
        "devicePath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeMount": {
      "description": "VolumeMount describes a mounting of a Volume within a container.",
      "properties": {
        "mountPath": {
          "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
          "type": "string"
        },
        "mountPropagation": {
          "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
          "type": "string"
        },
        "name": {
          "description": "This must match the Name of a Volume.",
          "type": "string"
        },
        "readOnly": {
          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
          "type": "boolean"
        },
        "subPath": {
          "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
          "type": "string"
        },
        "subPathExpr": {
          "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "mountPath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeNodeAffinity": {
      "description": "VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.",
      "properties": {
        "required": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector",
          "description": "Required specifies hard node constraints that must be met."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeProjection": {
      "description": "Projection that may be projected along with other supported volume types",
      "properties": {
        "configMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapProjection",
          "description": "information about the configMap data to project"
        },
        "downwardAPI": {
          "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIProjection",
          "description": "information about the downwardAPI data to project"
        },
        "secret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretProjection",
          "description": "information about the secret data to project"
        },
        "serviceAccountToken": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccountTokenProjection",
          "description": "information about the serviceAccountToken data to project"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource": {
      "description": "Represents a vSphere volume resource.",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "storagePolicyID": {
          "description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
          "type": "string"
        },
        "storagePolicyName": {
          "description": "Storage Policy Based Management (SPBM) profile name.",
          "type": "string"
        },
        "volumePath": {
          "description": "Path that identifies vSphere volume vmdk",
          "type": "string"
        }
      },
      "required": [
        "volumePath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.WeightedPodAffinityTerm": {
      "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
      "properties": {
        "podAffinityTerm": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm",
          "description": "Required. A pod affinity term, associated with the corresponding weight."
        },
        "weight": {
          "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "weight",
        "podAffinityTerm"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.WindowsSecurityContextOptions": {
      "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
      "properties": {
        "gmsaCredentialSpec": {
          "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
          "type": "string"
        },
        "gmsaCredentialSpecName": {
          "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
          "type": "string"
        },
        "runAsUserName": {
          "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "protobufAny": {
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
      "properties": {
        "type_url": {
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
          "type": "string"
        },
        "value": {
          "description": "Must be a valid serialized protocol buffer of the above specified type.",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "protobufNullValue": {
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value.",
      "enum": [
        "NULL_VALUE"
      ],
      "type": "string"
    },
    "runtimeError": {
      "properties": {
        "code": {
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "type": "array"
        },
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Activity": {
      "properties": {
        "actor": {
          "title": "Actor",
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "title": "Created at",
          "type": "string"
        },
        "event_action": {
          "title": "Event action",
          "type": "string"
        },
        "event_subject": {
          "title": "Event subject",
          "type": "string"
        },
        "object_name": {
          "title": "Object name",
          "type": "string"
        },
        "object_parent": {
          "title": "Object parent",
          "type": "string"
        },
        "object_uuid": {
          "title": "Object uuid",
          "type": "string"
        },
        "owner": {
          "title": "Owner",
          "type": "string"
        }
      },
      "title": "Activity specification",
      "type": "object"
    },
    "v1Affinity": {
      "title": "Placeholder for Affinity",
      "type": "object"
    },
    "v1Agent": {
      "properties": {
        "content": {
          "title": "Content of the agent config",
          "type": "string"
        },
        "contributors": {
          "items": {
            "type": "object"
          },
          "title": "Contributors",
          "type": "array"
        },
        "created_at": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "description": {
          "title": "Optional description",
          "type": "string"
        },
        "hostname": {
          "title": "Agent hostname",
          "type": "string"
        },
        "is_replica": {
          "title": "Agent is in replica mode",
          "type": "boolean"
        },
        "is_ui_managed": {
          "title": "Agent is updatable and managed from the UI",
          "type": "boolean"
        },
        "live_state": {
          "format": "int32",
          "title": "Current live state",
          "type": "integer"
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "namespace": {
          "title": "Namespace where the agent is deployed",
          "type": "string"
        },
        "settings": {
          "title": "Optional settings",
          "type": "object"
        },
        "stats": {
          "title": "Optional agent stats",
          "type": "object"
        },
        "status": {
          "$ref": "#/definitions/v1Statuses",
          "title": "Optional latest status of this entity"
        },
        "status_conditions": {
          "items": {
            "$ref": "#/definitions/v1StatusCondition"
          },
          "title": "The status conditions timeline",
          "type": "array"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "title": "Optional tags of this entity",
          "type": "array"
        },
        "updated_at": {
          "format": "date-time",
          "title": "Optional last time the entity was updated",
          "type": "string"
        },
        "user": {
          "title": "Optional name of user created this entity",
          "type": "string"
        },
        "uuid": {
          "title": "UUID",
          "type": "string"
        },
        "version": {
          "title": "Agent version",
          "type": "string"
        },
        "version_api": {
          "title": "Optional version api",
          "type": "object"
        }
      },
      "title": "Agent specification",
      "type": "object"
    },
    "v1AgentReconcileBodyRequest": {
      "properties": {
        "owner": {
          "title": "Owner of the namespace",
          "type": "string"
        },
        "reconcile": {
          "title": "Reconcile reconcile",
          "type": "object"
        },
        "uuid": {
          "title": "Uuid identifier of the entity",
          "type": "string"
        }
      },
      "title": "Request data to reconcile agent",
      "type": "object"
    },
    "v1AgentStateResponse": {
      "properties": {
        "compatible_updates": {
          "type": "object"
        },
        "live_state": {
          "format": "int32",
          "type": "integer"
        },
        "state": {
          "$ref": "#/definitions/AgentStateResponseAgentState"
        },
        "status": {
          "$ref": "#/definitions/v1Statuses"
        }
      },
      "title": "Contains the agents (queues/runs) state",
      "type": "object"
    },
    "v1AgentStatusBodyRequest": {
      "properties": {
        "condition": {
          "$ref": "#/definitions/v1StatusCondition",
          "title": "Status to set"
        },
        "owner": {
          "title": "Owner of the namespace",
          "type": "string"
        },
        "uuid": {
          "title": "Uuid identifier of the entity",
          "type": "string"
        }
      },
      "title": "Request data to create/update agent status",
      "type": "object"
    },
    "v1AnalyticsSpec": {
      "properties": {
        "frequency": {
          "title": "Stats frequency",
          "type": "string"
        },
        "groupby": {
          "title": "Groupby field",
          "type": "string"
        },
        "trunc": {
          "title": "Trunc field",
          "type": "string"
        },
        "view": {
          "title": "View",
          "type": "string"
        }
      },
      "title": "Analytics spec definition",
      "type": "object"
    },
    "v1ArtifactKind": {
      "default": "model",
      "description": "- model: Model asset/event\n - audio: Audio asset/event\n - video: Vidio asset/event\n - histogram: Histogram asset/event\n - image: Image asset/event\n - tensor: Tensor asset/event\n - dataframe: Dataframe asset/event\n - chart: plotly/bokeh/vega chart\n - csv: Comma separated values\n - tsv: Tab separated values\n - psv: Pipe separated values\n - ssv: Space separated values\n - metric: Metric asset/event\n - env: Env file\n - html: HTML asset/event\n - text: Text asset/event\n - file: File asset/lineage\n - dir: Dir asset/lineage\n - dockerfile: Dockerfile asset\n - docker_image: Docker image\n - data: Data asset/event\n - coderef: Coderef lineage\n - table: Table asset/event\n - tensorboard: Tensorboard lineage\n - curve: Curve event\n - confusion: Confusion matrix event\n - analysis: Analysis lineage\n - iteration: Iteration lineage\n - markdown: Mardown event\n - system: System event\n - span: Trace/Span event\n - artifact: Generic artifact",
      "enum": [
        "model",
        "audio",
        "video",
        "histogram",
        "image",
        "tensor",
        "dataframe",
        "chart",
        "csv",
        "tsv",
        "psv",
        "ssv",
        "metric",
        "env",
        "html",
        "text",
        "file",
        "dir",
        "dockerfile",
        "docker_image",
        "data",
        "coderef",
        "table",
        "tensorboard",
        "curve",
        "confusion",
        "analysis",
        "iteration",
        "markdown",
        "system",
        "span",
        "artifact"
      ],
      "title": "Artifact kind",
      "type": "string"
    },
    "v1ArtifactTree": {
      "properties": {
        "dirs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "files": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "type": "object"
        },
        "is_done": {
          "type": "boolean"
        }
      },
      "title": "Artifact tree response",
      "type": "object"
    },
    "v1ArtifactsMount": {
      "properties": {
        "name": {
          "title": "Name of the artifact(connection)",
          "type": "string"
        },
        "paths": {
          "items": {
            "type": "string"
          },
          "title": "Paths to mount",
          "type": "array"
        }
      },
      "title": "Artifact mount specification",
      "type": "object"
    },
    "v1ArtifactsType": {
      "properties": {
        "dirs": {
          "items": {
            "type": "object"
          },
          "title": "Optional dirs to initialize",
          "type": "array"
        },
        "files": {
          "items": {
            "type": "object"
          },
          "title": "Optional files to initialize",
          "type": "array"
        },
        "workers": {
          "format": "int32",
          "title": "Optional number of concurrent threads to use",
          "type": "integer"
        }
      },
      "title": "Artifacts type specification",
      "type": "object"
    },
    "v1Auth": {
      "properties": {
        "token": {
          "title": "token hash",
          "type": "string"
        }
      },
      "title": "Auth specification",
      "type": "object"
    },
    "v1AuthType": {
      "properties": {
        "password": {
          "title": "Optional password",
          "type": "string"
        },
        "user": {
          "title": "Optional user",
          "type": "string"
        }
      },
      "title": "Auth type specification",
      "type": "object"
    },
    "v1AverageStoppingPolicy": {
      "properties": {
        "kind": {
          "default": "average"
        }
      }
    },
    "v1Bayes": {
      "properties": {
        "concurrency": {
          "format": "int32",
          "title": "Number of concurrent runs",
          "type": "integer"
        },
        "earlyStopping": {
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/v1MetricEarlyStopping"
              },
              {
                "$ref": "#/definitions/v1FailureEarlyStopping"
              }
            ],
            "type": "object"
          },
          "title": "A list of Early stopping objects, accpets both metric and failure early stopping mechanisms",
          "type": "array"
        },
        "kind": {
          "default": "bayes",
          "title": "Kind of matrix, should be equal to \"bayes\"",
          "type": "string"
        },
        "maxIterations": {
          "format": "int32",
          "title": "Maximim number of iteration to produce new observations",
          "type": "integer"
        },
        "metric": {
          "$ref": "#/definitions/v1OptimizationMetric",
          "title": "Metric to optimize during the iterations"
        },
        "numInitialRuns": {
          "format": "int32",
          "title": "Number of intial random observations to create",
          "type": "integer"
        },
        "params": {
          "additionalProperties": {
            "type": "object"
          },
          "title": "Hyperparams/Space definition of params to traverse",
          "type": "object"
        },
        "seed": {
          "format": "int32",
          "title": "Seed for the random generator",
          "type": "integer"
        },
        "tuner": {
          "$ref": "#/definitions/v1Tuner",
          "title": "Tuner reference (hubRef) to use"
        },
        "utilityFunction": {
          "title": "A utility function to use for the bayesian optimization",
          "type": "object"
        }
      },
      "title": "Matrix based on Bayesian Optimization",
      "type": "object"
    },
    "v1BucketConnection": {
      "properties": {
        "bucket": {
          "title": "Bucket",
          "type": "string"
        }
      },
      "title": "Bucket connection schema validation specification",
      "type": "object"
    },
    "v1Build": {
      "properties": {
        "cache": {
          "$ref": "#/definitions/v1Cache",
          "title": "Optional flag to disable cache validation and force run this operation"
        },
        "connection": {
          "title": "Connection to use",
          "type": "string"
        },
        "hubRef": {
          "title": "Component name to use",
          "type": "string"
        },
        "namespace": {
          "title": "Optional namespace to use, uses agent's namespace by default",
          "type": "string"
        },
        "params": {
          "additionalProperties": {
            "$ref": "#/definitions/v1Param"
          },
          "title": "Optional dict of params",
          "type": "object"
        },
        "patchStrategy": {
          "$ref": "#/definitions/v1PatchStrategy",
          "title": "Optional patch strategy, default post_merge"
        },
        "presets": {
          "items": {
            "type": "string"
          },
          "title": "Optional list of presets to use for running this tuner",
          "type": "array"
        },
        "queue": {
          "title": "Optional queue to use for scheduling the tuner",
          "type": "string"
        },
        "runPatch": {
          "title": "Optional a run section to override the content of the run in the template",
          "type": "object"
        }
      },
      "title": "Build definition",
      "type": "object"
    },
    "v1Cache": {
      "properties": {
        "disable": {
          "title": "Optional flag to disable cache, Cache is enabled by default",
          "type": "boolean"
        },
        "io": {
          "items": {
            "type": "string"
          },
          "title": "Optional Inputs/Outputs' names to consider for the cache, default behavior to consider all inputs/outputs",
          "type": "array"
        },
        "sections": {
          "items": {
            "type": "string"
          },
          "title": "Optional sections to consider for the cache, default behavior to consider container(command, args), init section, and connections section",
          "type": "array"
        },
        "ttl": {
          "format": "int32",
          "title": "Optional time to live for the cache before it gets invalidated automatically,\nthe TTL is calculated based on the time the run starts",
          "type": "integer"
        }
      },
      "title": "Cache specification\nCache is calculated based on inputs state as well as component version if used",
      "type": "object"
    },
    "v1ClaimConnection": {
      "properties": {
        "kind": {
          "default": "volume_claim"
        },
        "mountPath": {
          "title": "Mount path",
          "type": "string"
        },
        "readOnly": {
          "title": "Read Only",
          "type": "boolean"
        },
        "volumeClaim": {
          "title": "Claim name",
          "type": "string"
        }
      },
      "title": "Claim connection schema validation specification",
      "type": "object"
    },
    "v1CleanPodPolicy": {
      "default": "All",
      "enum": [
        "All",
        "Running",
        "None"
      ],
      "title": "CleanPodPolicy",
      "type": "string"
    },
    "v1Cloning": {
      "properties": {
        "kind": {
          "$ref": "#/definitions/v1CloningKind",
          "title": "Optional if this run was restarted/copied/resumed/cached"
        },
        "name": {
          "title": "Optional name of the original run",
          "type": "string"
        },
        "uuid": {
          "title": "Optional uuid of the original run",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1CloningKind": {
      "default": "copy",
      "enum": [
        "copy",
        "restart",
        "cache"
      ],
      "type": "string"
    },
    "v1Compatibility": {
      "properties": {
        "agent": {
          "$ref": "#/definitions/v1Version"
        },
        "cli": {
          "$ref": "#/definitions/v1Version"
        },
        "platform": {
          "$ref": "#/definitions/v1Version"
        },
        "ui": {
          "$ref": "#/definitions/v1Version"
        }
      },
      "type": "object"
    },
    "v1CompiledOperation": {
      "properties": {
        "build": {
          "$ref": "#/definitions/v1Build",
          "title": "Optional build process"
        },
        "cache": {
          "$ref": "#/definitions/v1Cache",
          "title": "Optional flag to disable cache validation and force run this component"
        },
        "conditions": {
          "title": "An optional template containing conditions to check before starting the run",
          "type": "string"
        },
        "contexts": {
          "items": {
            "$ref": "#/definitions/v1IO"
          },
          "title": "Optional outputs definition",
          "type": "array"
        },
        "cost": {
          "format": "float",
          "title": "Optional field to assign cost to this Component",
          "type": "number"
        },
        "dependencies": {
          "items": {
            "type": "string"
          },
          "title": "Optional graph dependencies of this op",
          "type": "array"
        },
        "description": {
          "title": "Optional component description",
          "type": "string"
        },
        "events": {
          "items": {
            "$ref": "#/definitions/v1EventTrigger"
          },
          "title": "Optional events section, must be a valid List of EventTrigger option (Run/Git/Alert/Webhook/Dataset)",
          "type": "array"
        },
        "hooks": {
          "items": {
            "$ref": "#/definitions/v1Hook"
          },
          "title": "Optional hooks section",
          "type": "array"
        },
        "inputs": {
          "items": {
            "$ref": "#/definitions/v1IO"
          },
          "title": "Optional inputs definition",
          "type": "array"
        },
        "isApproved": {
          "title": "Optional flag to mark this specification requires approval before running",
          "type": "boolean"
        },
        "joins": {
          "additionalProperties": {
            "$ref": "#/definitions/v1Join"
          },
          "title": "Optional dict of joins",
          "type": "object"
        },
        "kind": {
          "title": "Optional component kind, should be equal to 'operation'",
          "type": "string"
        },
        "matrix": {
          "oneOf": [
            {
              "$ref": "#/definitions/v1RandomSearch"
            },
            {
              "$ref": "#/definitions/v1GridSearch"
            },
            {
              "$ref": "#/definitions/v1Hyperband"
            },
            {
              "$ref": "#/definitions/v1Bayes"
            },
            {
              "$ref": "#/definitions/v1Hyperopt"
            },
            {
              "$ref": "#/definitions/v1Iterative"
            },
            {
              "$ref": "#/definitions/v1Mapping"
            }
          ],
          "title": "Optional matrix section, must be a valid matrix option (Random/Grid/BO/Hyperband/Hyperopt/Mapping/Iterative)",
          "type": "object"
        },
        "name": {
          "title": "Optional component name, should a valid slug",
          "type": "string"
        },
        "namespace": {
          "title": "Optional namespace to use, uses agent's namespace by default",
          "type": "string"
        },
        "outputs": {
          "items": {
            "$ref": "#/definitions/v1IO"
          },
          "title": "Optional outputs definition",
          "type": "array"
        },
        "plugins": {
          "$ref": "#/definitions/v1Plugins",
          "title": "Optional plugins to enable"
        },
        "presets": {
          "items": {
            "type": "string"
          },
          "title": "Optional presets to use for running this component",
          "type": "array"
        },
        "queue": {
          "title": "Optional queue to use for running this component",
          "type": "string"
        },
        "run": {
          "oneOf": [
            {
              "$ref": "#/definitions/v1Dag"
            },
            {
              "$ref": "#/definitions/v1DaskJob"
            },
            {
              "$ref": "#/definitions/v1Job"
            },
            {
              "$ref": "#/definitions/v1MPIJob"
            },
            {
              "$ref": "#/definitions/v1PytorchJob"
            },
            {
              "$ref": "#/definitions/v1PaddleJob"
            },
            {
              "$ref": "#/definitions/v1MXJob"
            },
            {
              "$ref": "#/definitions/v1XGBoostJob"
            },
            {
              "$ref": "#/definitions/v1RayJob"
            },
            {
              "$ref": "#/definitions/v1Service"
            },
            {
              "$ref": "#/definitions/v1TFJob"
            }
          ],
          "title": "Run definition, should be one of run composition: Container/Ray/Dask/Kubeflow/Dask/Dag",
          "type": "object"
        },
        "schedule": {
          "oneOf": [
            {
              "$ref": "#/definitions/v1IntervalSchedule"
            },
            {
              "$ref": "#/definitions/v1DateTimeSchedule"
            },
            {
              "$ref": "#/definitions/v1CronSchedule"
            }
          ],
          "title": "Optional schedule section, must be a valid Schedule option (Cron/Interval/Repeatable/ExactTime)",
          "type": "object"
        },
        "skipOnUpstreamSkip": {
          "title": "Optional flag to skip this run if upstream was skipped",
          "type": "boolean"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "title": "Optional component tags",
          "type": "array"
        },
        "termination": {
          "$ref": "#/definitions/v1Termination",
          "title": "optional termination section"
        },
        "trigger": {
          "$ref": "#/definitions/v1TriggerPolicy",
          "title": "Optional trigger policy"
        },
        "version": {
          "format": "float",
          "title": "Spec version",
          "type": "number"
        }
      },
      "title": "CompiledOperation specification",
      "type": "object"
    },
    "v1Component": {
      "properties": {
        "build": {
          "$ref": "#/definitions/v1Build",
          "title": "Optional build process"
        },
        "cache": {
          "$ref": "#/definitions/v1Cache",
          "title": "Optional flag to disable cache validation and force run this component"
        },
        "cost": {
          "format": "float",
          "title": "Optional field to assign cost to this Component",
          "type": "number"
        },
        "description": {
          "title": "Optional component description",
          "type": "string"
        },
        "hooks": {
          "items": {
            "$ref": "#/definitions/v1Hook"
          },
          "title": "Optional hooks section",
          "type": "array"
        },
        "inputs": {
          "items": {
            "$ref": "#/definitions/v1IO"
          },
          "title": "Optional inputs definition",
          "type": "array"
        },
        "isApproved": {
          "title": "Optional flag to mark this specification requires approval before running",
          "type": "boolean"
        },
        "kind": {
          "title": "Optional component kind, should be equal to 'operation'",
          "type": "string"
        },
        "name": {
          "title": "Optional component name, should be a valid fully qualified value: name[:version]",
          "type": "string"
        },
        "namespace": {
          "title": "Optional namespace to use, uses agent's namespace by default",
          "type": "string"
        },
        "outputs": {
          "items": {
            "$ref": "#/definitions/v1IO"
          },
          "title": "Optional outputs definition",
          "type": "array"
        },
        "plugins": {
          "$ref": "#/definitions/v1Plugins",
          "title": "Optional plugins to enable"
        },
        "presets": {
          "items": {
            "type": "string"
          },
          "title": "Optional presets to use for running this component",
          "type": "array"
        },
        "queue": {
          "title": "Optional queue to use for running this component",
          "type": "string"
        },
        "run": {
          "oneOf": [
            {
              "$ref": "#/definitions/v1Dag"
            },
            {
              "$ref": "#/definitions/v1DaskJob"
            },
            {
              "$ref": "#/definitions/v1Job"
            },
            {
              "$ref": "#/definitions/v1MPIJob"
            },
            {
              "$ref": "#/definitions/v1PytorchJob"
            },
            {
              "$ref": "#/definitions/v1PaddleJob"
            },
            {
              "$ref": "#/definitions/v1MXJob"
            },
            {
              "$ref": "#/definitions/v1XGBoostJob"
            },
            {
              "$ref": "#/definitions/v1RayJob"
            },
            {
              "$ref": "#/definitions/v1Service"
            },
            {
              "$ref": "#/definitions/v1TFJob"
            }
          ],
          "title": "Run definition, should be one of: Job/Service/Ray/Kubeflow/Dask/Dag",
          "type": "object"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "title": "Optional component tags",
          "type": "array"
        },
        "template": {
          "$ref": "#/definitions/v1Template",
          "title": "Optional flag to mark this specification as template"
        },
        "termination": {
          "$ref": "#/definitions/v1Termination",
          "title": "optional termination section"
        },
        "version": {
          "format": "float",
          "title": "Spec version",
          "type": "number"
        }
      },
      "title": "Component specification",
      "type": "object"
    },
    "v1ConnectionKind": {
      "default": "host_path",
      "enum": [
        "host_path",
        "volume_claim",
        "gcs",
        "s3",
        "wasb",
        "registry",
        "git",
        "aws",
        "gcp",
        "azure",
        "mysql",
        "postgres",
        "oracle",
        "vertica",
        "sqlite",
        "mssql",
        "redis",
        "presto",
        "mongo",
        "cassandra",
        "ftp",
        "grpc",
        "hdfs",
        "http",
        "pig_cli",
        "hive_cli",
        "hive_metastore",
        "hive_server2",
        "jdbc",
        "jenkins",
        "samba",
        "snowflake",
        "ssh",
        "cloudant",
        "databricks",
        "segment",
        "slack",
        "discord",
        "mattermost",
        "pagerduty",
        "hipchat",
        "webhook",
        "custom"
      ],
      "title": "Connection kinds",
      "type": "string"
    },
    "v1ConnectionResource": {
      "properties": {
        "defaultMode": {
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mountPath": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "K8S resource schema validation",
      "type": "object"
    },
    "v1ConnectionResponse": {
      "properties": {
        "agent": {
          "title": "Agent",
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "description": {
          "title": "Optional description",
          "type": "string"
        },
        "kind": {
          "$ref": "#/definitions/v1ConnectionKind",
          "title": "The connection kind"
        },
        "live_state": {
          "format": "int32",
          "title": "Current live state",
          "type": "integer"
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "title": "Optional tags of this entity",
          "type": "array"
        },
        "updated_at": {
          "format": "date-time",
          "title": "Optional last time the entity was updated",
          "type": "string"
        },
        "user": {
          "title": "Optional name of user created this entity",
          "type": "string"
        },
        "uuid": {
          "title": "UUID",
          "type": "string"
        }
      },
      "title": "Connection specification",
      "type": "object"
    },
    "v1ConnectionSchema": {
      "properties": {
        "bucketConnection": {
          "$ref": "#/definitions/v1BucketConnection"
        },
        "claimConnection": {
          "$ref": "#/definitions/v1ClaimConnection"
        },
        "gitConnection": {
          "$ref": "#/definitions/v1GitConnection"
        },
        "hostConnection": {
          "$ref": "#/definitions/v1HostConnection"
        },
        "hostPathConnection": {
          "$ref": "#/definitions/v1HostPathConnection"
        }
      },
      "type": "object"
    },
    "v1ConnectionType": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional Metadata annotations to pass to k8s",
          "type": "object"
        },
        "configMap": {
          "$ref": "#/definitions/v1ConnectionResource",
          "title": "ConfigMap resource schema"
        },
        "description": {
          "title": "Optional connection description",
          "type": "string"
        },
        "env": {
          "items": {
            "type": "object"
          },
          "title": "Environment variables",
          "type": "array"
        },
        "kind": {
          "$ref": "#/definitions/v1ConnectionKind",
          "title": "Connection kind"
        },
        "name": {
          "title": "Connection name",
          "type": "string"
        },
        "schema": {
          "title": "The connection schema should be a valid ConnectionSchema",
          "type": "object"
        },
        "secret": {
          "$ref": "#/definitions/v1ConnectionResource",
          "title": "Secret resource schema"
        },
        "tags": {
          "title": "Optional connection tags",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Container": {
      "title": "Placeholder for Container",
      "type": "object"
    },
    "v1Credentials": {
      "properties": {
        "password": {
          "title": "User password",
          "type": "string"
        },
        "username": {
          "title": "User username or email",
          "type": "string"
        }
      },
      "title": "Login",
      "type": "object"
    },
    "v1CronSchedule": {
      "properties": {
        "cron": {
          "title": "Cron definition, e.g. 0 1 * * *",
          "type": "string"
        },
        "dependsOnPast": {
          "title": "A flag to set a dependency on past executions",
          "type": "boolean"
        },
        "endAt": {
          "format": "date-time",
          "title": "Whan to end this cron schedule",
          "type": "string"
        },
        "kind": {
          "default": "cron",
          "title": "Kind of schedule, should be equal to \"cron\"",
          "type": "string"
        },
        "maxRuns": {
          "format": "int32",
          "title": "Limit to stop executing this schedule",
          "type": "integer"
        },
        "startAt": {
          "format": "date-time",
          "title": "Whan to start this cron schedule",
          "type": "string"
        }
      },
      "title": "Cron schedule specification",
      "type": "object"
    },
    "v1Dag": {
      "properties": {
        "components": {
          "items": {
            "$ref": "#/definitions/v1Component"
          },
          "title": "Optional component refrences",
          "type": "array"
        },
        "concurrency": {
          "format": "int32",
          "title": "Optional component description",
          "type": "integer"
        },
        "connections": {
          "items": {
            "type": "string"
          },
          "title": "Optional connections section",
          "type": "array"
        },
        "earlyStopping": {
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/v1MetricEarlyStopping"
              },
              {
                "$ref": "#/definitions/v1FailureEarlyStopping"
              }
            ],
            "type": "object"
          },
          "title": "Optional component tags",
          "type": "array"
        },
        "environment": {
          "$ref": "#/definitions/v1Environment",
          "title": "Optional environment section"
        },
        "kind": {
          "default": "dag",
          "title": "Optional component kind, should be equal to 'dag'",
          "type": "string"
        },
        "operations": {
          "items": {
            "$ref": "#/definitions/v1Operation"
          },
          "title": "Ops used in the graph",
          "type": "array"
        },
        "volumes": {
          "description": "Volumes is a list of volumes that can be mounted.",
          "items": {
            "$ref": "#/definitions/v1Volume"
          },
          "type": "array"
        }
      },
      "title": "Dag specificaiton",
      "type": "object"
    },
    "v1DagRef": {
      "properties": {
        "kind": {
          "default": "dag_ref",
          "title": "Kind of reference, should be equal to \"dag_ref\"",
          "type": "string"
        },
        "name": {
          "title": "Value",
          "type": "string"
        }
      },
      "title": "Dag reference specification",
      "type": "object"
    },
    "v1Dashboard": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "description": {
          "title": "Optional description",
          "type": "string"
        },
        "live_state": {
          "format": "int32",
          "title": "Current live state",
          "type": "integer"
        },
        "name": {
          "title": "Optional name",
          "type": "string"
        },
        "org_level": {
          "title": "Optional dashboard level",
          "type": "boolean"
        },
        "spec": {
          "$ref": "#/definitions/v1DashboardSpec",
          "title": "Optional dashboard specification"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "title": "Optional tags of this entity",
          "type": "array"
        },
        "updated_at": {
          "format": "date-time",
          "title": "Optional last time the entity was updated",
          "type": "string"
        },
        "user": {
          "title": "Required name of user started this entity",
          "type": "string"
        },
        "uuid": {
          "title": "UUID",
          "type": "string"
        }
      },
      "title": "Dashboard specification",
      "type": "object"
    },
    "v1DashboardSpec": {
      "properties": {
        "ignore_outliers": {
          "title": "Ignore outliers",
          "type": "boolean"
        },
        "sample_size": {
          "format": "int32",
          "title": "Sample size",
          "type": "integer"
        },
        "sections": {
          "items": {
            "$ref": "#/definitions/v1SectionSpec"
          },
          "title": "Section Spec",
          "type": "array"
        },
        "smoothing": {
          "format": "int32",
          "title": "Smoothing",
          "type": "integer"
        },
        "step": {
          "format": "int32",
          "title": "Step",
          "type": "integer"
        },
        "xaxis": {
          "title": "xaxis",
          "type": "string"
        }
      },
      "title": "Dashboard spec definition",
      "type": "object"
    },
    "v1DaskJob": {
      "properties": {
        "container": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Container"
        },
        "job": {
          "$ref": "#/definitions/v1DaskReplica",
          "title": "Job pod specification to execute"
        },
        "kind": {
          "default": "daskjob",
          "title": "Optional component kind, should be equal to 'daskjob'",
          "type": "string"
        },
        "scheduler": {
          "$ref": "#/definitions/v1DaskReplica",
          "title": "Scheduler pod specification"
        },
        "sidecars": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "type": "array"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "type": "array"
        },
        "worker": {
          "$ref": "#/definitions/v1DaskReplica",
          "title": "Worker pod specification"
        }
      },
      "title": "Dask specification",
      "type": "object"
    },
    "v1DaskReplica": {
      "properties": {
        "connections": {
          "items": {
            "type": "string"
          },
          "title": "Optional connections section",
          "type": "array"
        },
        "container": {
          "$ref": "#/definitions/v1Container",
          "title": "Optional container to run"
        },
        "environment": {
          "$ref": "#/definitions/v1Environment",
          "title": "Optional environment section"
        },
        "init": {
          "items": {
            "$ref": "#/definitions/v1Init"
          },
          "title": "Optional init connections section",
          "type": "array"
        },
        "replicas": {
          "format": "int32",
          "title": "Number of replicas",
          "type": "integer"
        },
        "sidecars": {
          "items": {
            "$ref": "#/definitions/v1Container"
          },
          "title": "Optional sidecars section",
          "type": "array"
        },
        "volumes": {
          "items": {
            "$ref": "#/definitions/v1Volume"
          },
          "title": "Optional connections section",
          "type": "array"
        }
      },
      "title": "Dask replica definition",
      "type": "object"
    },
    "v1DateTimeSchedule": {
      "properties": {
        "kind": {
          "default": "datetime",
          "title": "Kind of schedule, should be equal to \"datetime\"",
          "type": "string"
        },
        "startAt": {
          "format": "date-time",
          "title": "Whan to start this cron schedule",
          "type": "string"
        }
      },
      "title": "DateTime schedule specification",
      "type": "object"
    },
    "v1DiffStoppingPolicy": {
      "description": "Early stopping with diff factor stopping, this policy computes checks runs against the best run\nand stops those whose performance is worse than the best by the factor defined by the user.",
      "properties": {
        "evaluationInterval": {
          "description": "Interval/Frequency for applying the policy.",
          "format": "int32",
          "type": "integer"
        },
        "kind": {
          "title": "Kind of this stopping policy, should be equal to \"average\"",
          "type": "string"
        },
        "minInterval": {
          "format": "int32",
          "title": "Min interval (e.g steps) before starting the process",
          "type": "integer"
        },
        "minSamples": {
          "format": "int32",
          "title": "Min samples runs succeeded before starting the process",
          "type": "integer"
        },
        "percent": {
          "format": "float",
          "title": "The diff factor, if not given than a zero tolerance policy is applied",
          "type": "number"
        }
      },
      "type": "object"
    },
    "v1DockerfileType": {
      "properties": {
        "copy": {
          "items": {
            "type": "object"
          },
          "title": "An optional list of strings or tuples for copying paths, translate to a COPY statements, if string is passed the path is copy to the workdir",
          "type": "array"
        },
        "env": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "An optional list of tuples(key, value) for defining env vars, translate to an ENV statements",
          "type": "object"
        },
        "filename": {
          "title": "A filename to give to the generated dockerfile",
          "type": "string"
        },
        "gid": {
          "format": "int32",
          "title": "A gid to use when creating the docker image",
          "type": "integer"
        },
        "image": {
          "title": "Docker image to use as a base",
          "type": "string"
        },
        "langEnv": {
          "title": "An optional string defining a language, e.g. en_US.UTF-8",
          "type": "string"
        },
        "path": {
          "items": {
            "type": "string"
          },
          "title": "An optional list of strings for exporting paths, translate to a PATH statements",
          "type": "array"
        },
        "post_run_copy": {
          "items": {
            "type": "object"
          },
          "title": "An optional list of strings or tuples for copying paths post run commands to leverage the cache, translate to a COPY statements, if string is passed the path is copy to the workdir",
          "type": "array"
        },
        "run": {
          "items": {
            "type": "string"
          },
          "title": "An optional list of strings for executing Run commands, translate to a RUN statements",
          "type": "array"
        },
        "shell": {
          "title": "An optional shell type, defaults to \"/bin/bash\"",
          "type": "string"
        },
        "uid": {
          "format": "int32",
          "title": "A uid to use when creating the docker image",
          "type": "integer"
        },
        "username": {
          "format": "int32",
          "title": "Optional username value to use, default to \"polyaxon\"",
          "type": "integer"
        },
        "workdir": {
          "title": "A work dir to copy code to, default to /code",
          "type": "string"
        },
        "workdirPath": {
          "title": "An optional workdir path",
          "type": "string"
        }
      },
      "title": "Dockerfile type specification",
      "type": "object"
    },
    "v1EarlyStopping": {
      "properties": {
        "diff": {
          "$ref": "#/definitions/v1DiffStoppingPolicy"
        },
        "failure": {
          "$ref": "#/definitions/v1FailureEarlyStopping"
        },
        "median": {
          "$ref": "#/definitions/v1MedianStoppingPolicy"
        },
        "metric": {
          "$ref": "#/definitions/v1MetricEarlyStopping"
        },
        "truncation": {
          "$ref": "#/definitions/v1TruncationStoppingPolicy"
        }
      },
      "title": "All Schemas message",
      "type": "object"
    },
    "v1EntitiesTags": {
      "properties": {
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "uuids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1EntitiesTransfer": {
      "properties": {
        "project": {
          "type": "string"
        },
        "uuids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1EntityNotificationBody": {
      "properties": {
        "condition": {
          "$ref": "#/definitions/v1StatusCondition",
          "title": "Status condition"
        },
        "connections": {
          "items": {
            "type": "string"
          },
          "title": "Connections to notify",
          "type": "array"
        },
        "name": {
          "title": "Optional name of the entity",
          "type": "string"
        },
        "namespace": {
          "title": "Na,espace",
          "type": "string"
        },
        "owner": {
          "title": "Owner of the namespace",
          "type": "string"
        },
        "project": {
          "title": "Project where the run will be assigned",
          "type": "string"
        },
        "uuid": {
          "title": "Uuid identifier of the entity",
          "type": "string"
        }
      },
      "title": "Request data to create/update entity status",
      "type": "object"
    },
    "v1EntityStageBodyRequest": {
      "properties": {
        "condition": {
          "$ref": "#/definitions/v1StageCondition",
          "title": "Stage to set"
        },
        "entity": {
          "title": "Entity namespace",
          "type": "string"
        },
        "kind": {
          "title": "Optional kind, only required for an version entity",
          "type": "string"
        },
        "name": {
          "title": "Name of the entity to apply the stage to",
          "type": "string"
        },
        "owner": {
          "title": "Owner of the namespace",
          "type": "string"
        }
      },
      "title": "Request data to create/update entity stage",
      "type": "object"
    },
    "v1EntityStatusBodyRequest": {
      "properties": {
        "condition": {
          "$ref": "#/definitions/v1StatusCondition",
          "title": "Status to set"
        },
        "force": {
          "title": "Force flag",
          "type": "boolean"
        },
        "owner": {
          "title": "Owner of the namespace",
          "type": "string"
        },
        "project": {
          "title": "Project where the run will be assigned",
          "type": "string"
        },
        "uuid": {
          "title": "Uuid identifier of the entity",
          "type": "string"
        }
      },
      "title": "Request data to create/update entity status",
      "type": "object"
    },
    "v1Environment": {
      "properties": {
        "affinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity",
          "description": "Optional Affinity sets the scheduling constraints."
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional Metadata annotations to pass to k8s",
          "type": "object"
        },
        "dnsConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfig",
          "description": "PodDNSConfig defines the DNS parameters of a pod in addition to\nthose generated from DNSPolicy."
        },
        "dnsPolicy": {
          "description": "Set DNS policy for the pod.\nDefaults to \"ClusterFirst\".\nValid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.\nDNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.\nTo have DNS options set along with hostNetwork, you have to specify DNS policy\nexplicitly to 'ClusterFirstWithHostNet'.",
          "type": "string"
        },
        "hostAliases": {
          "description": "Optional HostAliases is an optional list of hosts and IPs that will be injected into the pod spec.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
          },
          "type": "array"
        },
        "hostNetwork": {
          "description": "Host networking requested for this workflow pod. Default to false.",
          "type": "boolean"
        },
        "hostPID": {
          "description": "Use the host's pid namespace. Default to false.",
          "type": "string"
        },
        "imagePullSecrets": {
          "items": {
            "type": "string"
          },
          "title": "Optional image pull secrets to use for this run\nImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images\nin pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets\ncan be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet.\nMore info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod",
          "type": "array"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional Metadata labels to pass to k8s",
          "type": "object"
        },
        "nodeName": {
          "description": "Optional NodeName is a request to schedule this pod onto a specific node. If it is non-empty,\nthe scheduler simply schedules this pod onto that node, assuming that it fits resource\nrequirements.",
          "type": "string"
        },
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional NodeSelector is a selector which must be true for the pod to fit on a node.\nSelector which must match a node's labels for the pod to be scheduled on that node.\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
          "type": "object"
        },
        "priority": {
          "description": "The priority value. Various system components use this field to find the\npriority of the pod. When Priority Admission Controller is enabled, it\nprevents users from setting this field. The admission controller populates\nthis field from PriorityClassName.\nThe higher the value, the higher the priority.",
          "format": "int32",
          "type": "integer"
        },
        "priorityClassName": {
          "description": "If specified, indicates the pod's priority. \"system-node-critical\" and\n\"system-cluster-critical\" are two special keywords which indicate the\nhighest priorities with the former being the highest priority. Any other\nname must be defined by creating a PriorityClass object with that name.\nIf not specified, the pod priority will be default or zero if there is no\ndefault.",
          "type": "string"
        },
        "restartPolicy": {
          "title": "A valid restart policy",
          "type": "string"
        },
        "schedulerName": {
          "title": "If specified, the pod will be dispatched by specified scheduler.\nOr it will be dispatched by workflow scope scheduler if specified.\nIf neither specified, the pod will be dispatched by default scheduler.\n+optional",
          "type": "string"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
          "description": "PodSecurityContext holds pod-level security attributes and common container settings.\nSome fields are also present in container.securityContext.  Field values of\ncontainer.securityContext take precedence over field values of PodSecurityContext."
        },
        "serviceAccountName": {
          "title": "Optional service account name to use for this run",
          "type": "string"
        },
        "tolerations": {
          "description": "Optional Tolerations to apply.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          },
          "type": "array"
        }
      },
      "title": "Environment specification",
      "type": "object"
    },
    "v1Event": {
      "properties": {
        "artifact": {
          "$ref": "#/definitions/v1EventArtifact"
        },
        "audio": {
          "$ref": "#/definitions/v1EventAudio"
        },
        "chart": {
          "$ref": "#/definitions/v1EventChart"
        },
        "confusion": {
          "$ref": "#/definitions/v1EventConfusionMatrix"
        },
        "curve": {
          "$ref": "#/definitions/v1EventCurve"
        },
        "dataframe": {
          "$ref": "#/definitions/v1EventDataframe"
        },
        "histogram": {
          "$ref": "#/definitions/v1EventHistogram"
        },
        "html": {
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/v1EventImage"
        },
        "metric": {
          "format": "float",
          "type": "number"
        },
        "model": {
          "$ref": "#/definitions/v1EventModel"
        },
        "span": {
          "$ref": "#/definitions/v1EventSpan"
        },
        "step": {
          "description": "Global step of the event.",
          "format": "int32",
          "type": "integer"
        },
        "text": {
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "video": {
          "$ref": "#/definitions/v1EventVideo"
        }
      },
      "title": "Event spec definition",
      "type": "object"
    },
    "v1EventArtifact": {
      "properties": {
        "kind": {
          "$ref": "#/definitions/v1ArtifactKind",
          "title": "Artifact kind"
        },
        "path": {
          "title": "Filepath",
          "type": "string"
        }
      },
      "title": "Artifact spec definition",
      "type": "object"
    },
    "v1EventAudio": {
      "properties": {
        "content_type": {
          "title": "Content type of the audio",
          "type": "string"
        },
        "length_frames": {
          "description": "Length of the audio in frames (samples per channel).",
          "format": "int32",
          "type": "integer"
        },
        "num_channels": {
          "description": "Number of channels of audio.",
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "title": "/ Filepath",
          "type": "string"
        },
        "sample_rate": {
          "description": "Sample rate of the audio in Hz.",
          "format": "float",
          "type": "number"
        }
      },
      "title": "Audio spec definition",
      "type": "object"
    },
    "v1EventChart": {
      "properties": {
        "figure": {
          "title": "Figure json object",
          "type": "object"
        },
        "kind": {
          "$ref": "#/definitions/v1EventChartKind",
          "title": "Chart kind"
        }
      },
      "title": "Chart spec definition",
      "type": "object"
    },
    "v1EventChartKind": {
      "default": "plotly",
      "description": "- plotly: Plotly chart\n - bokeh: Bokeh chart\n - vega: Vega chart",
      "enum": [
        "plotly",
        "bokeh",
        "vega"
      ],
      "title": "Chart kind",
      "type": "string"
    },
    "v1EventConfusionMatrix": {
      "properties": {
        "x": {
          "items": {
            "type": "object"
          },
          "title": "X",
          "type": "array"
        },
        "y": {
          "items": {
            "type": "object"
          },
          "title": "Y",
          "type": "array"
        },
        "z": {
          "items": {
            "type": "object"
          },
          "title": "Z",
          "type": "array"
        }
      },
      "title": "Cofusion matrix spec definition",
      "type": "object"
    },
    "v1EventCurve": {
      "properties": {
        "annotation": {
          "title": "Annotation",
          "type": "string"
        },
        "kind": {
          "$ref": "#/definitions/v1EventCurveKind",
          "title": "Curve kind"
        },
        "x": {
          "items": {
            "format": "float",
            "type": "number"
          },
          "title": "X",
          "type": "array"
        },
        "y": {
          "items": {
            "format": "float",
            "type": "number"
          },
          "title": "Y",
          "type": "array"
        }
      },
      "title": "Custom Curve spec definition",
      "type": "object"
    },
    "v1EventCurveKind": {
      "default": "roc",
      "description": "- roc: ROC curve\n - pr: Precision Recall curve\n - custom: Custom curve",
      "enum": [
        "roc",
        "pr",
        "custom"
      ],
      "title": "Curve kind",
      "type": "string"
    },
    "v1EventDataframe": {
      "properties": {
        "content_type": {
          "title": "Format",
          "type": "string"
        },
        "path": {
          "title": "Filepath",
          "type": "string"
        }
      },
      "title": "Dataframe spec definition",
      "type": "object"
    },
    "v1EventHistogram": {
      "properties": {
        "counts": {
          "items": {
            "format": "double",
            "type": "number"
          },
          "type": "array"
        },
        "values": {
          "items": {
            "format": "double",
            "type": "number"
          },
          "type": "array"
        }
      },
      "title": "Histogram spec definition",
      "type": "object"
    },
    "v1EventImage": {
      "properties": {
        "colorspace": {
          "format": "int32",
          "title": "Valid colorspace values are\n  1 - grayscale\n  2 - grayscale + alpha\n  3 - RGB\n  4 - RGBA\n  5 - DIGITAL_YUV\n  6 - BGRA",
          "type": "integer"
        },
        "height": {
          "description": "Height of the image.",
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "title": "Filepath",
          "type": "string"
        },
        "width": {
          "description": "Width of the image.",
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "Image spec definition",
      "type": "object"
    },
    "v1EventKind": {
      "default": "run_status_created",
      "enum": [
        "run_status_created",
        "run_status_resuming",
        "run_status_compiled",
        "run_status_on_schedule",
        "run_status_queued",
        "run_status_scheduled",
        "run_status_starting",
        "run_status_running",
        "run_status_processing",
        "run_status_stopping",
        "run_status_failed",
        "run_status_stopped",
        "run_status_succeeded",
        "run_status_skipped",
        "run_status_warning",
        "run_status_unschedulable",
        "run_status_upstream_failed",
        "run_status_retrying",
        "run_status_unknown",
        "run_status_done",
        "run_approved_actor",
        "run_invalidated_actor",
        "run_new_artifacts",
        "connection_git_commit",
        "connection_dataset_version",
        "connection_registry_image",
        "alert_info",
        "alert_warning",
        "alert_critical",
        "model_version_new_metric",
        "project_custom_event",
        "org_custom_event"
      ],
      "type": "string"
    },
    "v1EventModel": {
      "properties": {
        "framework": {
          "title": "Model framwork",
          "type": "string"
        },
        "path": {
          "title": "Filepath",
          "type": "string"
        },
        "spec": {
          "title": "Model spec (a dictionnary defnining the requirement for the model)",
          "type": "object"
        }
      },
      "title": "Model spec definition",
      "type": "object"
    },
    "v1EventSpan": {
      "properties": {
        "children": {
          "items": {
            "$ref": "#/definitions/v1EventSpan"
          },
          "title": "Child events",
          "type": "array"
        },
        "finished_at": {
          "format": "date-time",
          "title": "End time",
          "type": "string"
        },
        "inputs": {
          "title": "Inputs",
          "type": "object"
        },
        "kind": {
          "$ref": "#/definitions/v1EventSpanKind",
          "title": "Span kind"
        },
        "metadata": {
          "title": "Metadata",
          "type": "object"
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "outputs": {
          "title": "Outputs",
          "type": "object"
        },
        "started_at": {
          "format": "date-time",
          "title": "Start time",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1Statuses",
          "title": "Status"
        },
        "status_conditions": {
          "items": {
            "$ref": "#/definitions/v1StatusCondition"
          },
          "title": "Status conditions",
          "type": "array"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "title": "Tags",
          "type": "array"
        },
        "uuid": {
          "title": "UUID",
          "type": "string"
        }
      },
      "title": "Trace/Span spec definition",
      "type": "object"
    },
    "v1EventSpanKind": {
      "default": "llm",
      "enum": [
        "llm",
        "chain",
        "agent",
        "tool",
        "embedding",
        "retriever"
      ],
      "title": "Curve kind",
      "type": "string"
    },
    "v1EventTrigger": {
      "properties": {
        "kinds": {
          "items": {
            "$ref": "#/definitions/v1EventKind"
          },
          "title": "The event kinds to subscribe to for the current reference",
          "type": "array"
        },
        "ref": {
          "title": "Ref corresponds to a reference of an object",
          "type": "string"
        }
      },
      "title": "Event definition",
      "type": "object"
    },
    "v1EventType": {
      "properties": {
        "kind": {
          "$ref": "#/definitions/v1ArtifactKind",
          "title": "Type of the event"
        },
        "name": {
          "title": "Name of the event",
          "type": "string"
        }
      },
      "title": "Event type specification",
      "type": "object"
    },
    "v1EventVideo": {
      "properties": {
        "colorspace": {
          "format": "int32",
          "title": "Valid colorspace values are\n  1 - grayscale\n  2 - grayscale + alpha\n  3 - RGB\n  4 - RGBA\n  5 - DIGITAL_YUV\n  6 - BGRA",
          "type": "integer"
        },
        "content_type": {
          "title": "Content type of the video",
          "type": "string"
        },
        "height": {
          "description": "Height of the video.",
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "title": "Filepath",
          "type": "string"
        },
        "width": {
          "description": "Width of the video.",
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "Video spec definition",
      "type": "object"
    },
    "v1EventsResponse": {
      "properties": {
        "data": {
          "items": {
            "type": "object"
          },
          "title": "Events data",
          "type": "array"
        }
      },
      "title": "Events response definition",
      "type": "object"
    },
    "v1FailureEarlyStopping": {
      "description": "FailureEarlyStoppingSchema specification\nEarly stopping based on failure config.\nthis policy stops based on a percentage of\nfailed runs at every evaluation.",
      "properties": {
        "kind": {
          "default": "failure_early_stopping",
          "title": "Kind of this metric early stopping policy, should be equal to \"failure_early_stopping\"",
          "type": "string"
        },
        "percent": {
          "description": "The percentage of failed runs, at each evaluation interval.\ne.g. 1 - 99.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1FileType": {
      "properties": {
        "chmod": {
          "title": "An optional permissions to apply to the file after creation, e.g +x",
          "type": "string"
        },
        "content": {
          "title": "File content",
          "type": "string"
        },
        "filename": {
          "title": "A name to give to the generated file",
          "type": "string"
        },
        "kind": {
          "title": "An optional Artifact kind to log the lineage information",
          "type": "string"
        }
      },
      "title": "File type specification",
      "type": "object"
    },
    "v1GcsType": {
      "properties": {
        "blob": {
          "title": "Optional storage_account",
          "type": "string"
        },
        "bucket": {
          "title": "Optional container",
          "type": "string"
        }
      },
      "title": "Wasb type specification",
      "type": "object"
    },
    "v1GitConnection": {
      "properties": {
        "flags": {
          "items": {
            "type": "string"
          },
          "title": "Additional command flag",
          "type": "array"
        },
        "revision": {
          "title": "revision",
          "type": "boolean"
        },
        "url": {
          "title": "Url",
          "type": "string"
        }
      },
      "title": "Git connection schema validation connection",
      "type": "object"
    },
    "v1GitType": {
      "properties": {
        "flags": {
          "items": {
            "type": "string"
          },
          "title": "Addional command flag",
          "type": "array"
        },
        "revision": {
          "title": "Optional revision",
          "type": "string"
        },
        "url": {
          "title": "Optional Url",
          "type": "string"
        }
      },
      "title": "Git type specification, url or a connection is required",
      "type": "object"
    },
    "v1GridSearch": {
      "properties": {
        "concurrency": {
          "format": "int32",
          "title": "Number of concurrent runs",
          "type": "integer"
        },
        "earlyStopping": {
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/v1MetricEarlyStopping"
              },
              {
                "$ref": "#/definitions/v1FailureEarlyStopping"
              }
            ],
            "type": "object"
          },
          "title": "A list of Early stopping objects, accpets both metric and failure early stopping mechanisms",
          "type": "array"
        },
        "kind": {
          "default": "grid",
          "title": "Kind of matrix, should be equal to \"grid\"",
          "type": "string"
        },
        "numRuns": {
          "format": "int32",
          "title": "Number of runs to generate and search",
          "type": "integer"
        },
        "params": {
          "additionalProperties": {
            "type": "object"
          },
          "title": "Hyperparams/Space definition of params to traverse",
          "type": "object"
        },
        "seed": {
          "format": "int32",
          "title": "Seed for the random generator",
          "type": "integer"
        }
      },
      "title": "Matrix based on grid/cartesian product generated search space",
      "type": "object"
    },
    "v1Hook": {
      "properties": {
        "conditions": {
          "title": "An optional template containing conditions to check before starting the run",
          "type": "string"
        },
        "connection": {
          "title": "Connection to use",
          "type": "string"
        },
        "disableDefaults": {
          "title": "Optional params context from the main operation",
          "type": "boolean"
        },
        "hubRef": {
          "title": "Component name to use",
          "type": "string"
        },
        "namespace": {
          "title": "Optional namespace to use, uses agent's namespace by default",
          "type": "string"
        },
        "params": {
          "additionalProperties": {
            "$ref": "#/definitions/v1Param"
          },
          "title": "Optional dict of params",
          "type": "object"
        },
        "presets": {
          "items": {
            "type": "string"
          },
          "title": "Optional preset to use for running this operation",
          "type": "array"
        },
        "queue": {
          "title": "Optional queue to use for scheduling the hook",
          "type": "string"
        },
        "trigger": {
          "$ref": "#/definitions/v1Statuses",
          "title": "Optional trigger policy, default done"
        }
      },
      "title": "Hook definition",
      "type": "object"
    },
    "v1HostAlias": {
      "title": "Placeholder for HostAlias",
      "type": "object"
    },
    "v1HostConnection": {
      "properties": {
        "insecure": {
          "title": "insecure",
          "type": "boolean"
        },
        "url": {
          "title": "Url",
          "type": "string"
        }
      },
      "title": "Host connection schema validation connection",
      "type": "object"
    },
    "v1HostPathConnection": {
      "properties": {
        "hostPath": {
          "title": "host path",
          "type": "string"
        },
        "kind": {
          "default": "host_path"
        },
        "mountPath": {
          "title": "Mount path",
          "type": "string"
        },
        "readOnly": {
          "title": "Read Only",
          "type": "boolean"
        }
      },
      "title": "Host path connection schema validation specification",
      "type": "object"
    },
    "v1HpChoice": {
      "properties": {
        "kind": {
          "default": "choice",
          "title": "Kind of hp, should be equal to \"choice\"",
          "type": "string"
        },
        "value": {
          "title": "Value",
          "type": "object"
        }
      },
      "title": "HP Choice specification",
      "type": "object"
    },
    "v1HpDateRange": {
      "properties": {
        "kind": {
          "default": "daterange",
          "title": "Kind of hp, should be equal to \"daterange\"",
          "type": "string"
        },
        "value": {
          "title": "Value",
          "type": "object"
        }
      },
      "title": "DateRange specification",
      "type": "object"
    },
    "v1HpDateTimeRange": {
      "properties": {
        "kind": {
          "default": "datetimerange",
          "title": "Kind of hp, should be equal to \"datetimerange\"",
          "type": "string"
        },
        "value": {
          "title": "Value",
          "type": "object"
        }
      },
      "title": "DateTimeRange specification",
      "type": "object"
    },
    "v1HpGeomSpace": {
      "properties": {
        "kind": {
          "default": "geomspace",
          "title": "Kind of hp, should be equal to \"geomspace\"",
          "type": "string"
        },
        "value": {
          "title": "Value",
          "type": "object"
        }
      },
      "title": "HP Geom Space specification",
      "type": "object"
    },
    "v1HpLinSpace": {
      "properties": {
        "kind": {
          "default": "linspace",
          "title": "Kind of hp, should be equal to \"linspace\"",
          "type": "string"
        },
        "value": {
          "title": "Value",
          "type": "object"
        }
      },
      "title": "HP Linear Space specification",
      "type": "object"
    },
    "v1HpLogNormal": {
      "properties": {
        "kind": {
          "default": "lognormal",
          "title": "Kind of hp, should be equal to \"lognormal\"",
          "type": "string"
        },
        "value": {
          "title": "Value",
          "type": "object"
        }
      },
      "title": "HP Log Normal Dist specification",
      "type": "object"
    },
    "v1HpLogSpace": {
      "properties": {
        "kind": {
          "default": "logspace",
          "title": "Kind of hp, should be equal to \"logspace\"",
          "type": "string"
        },
        "value": {
          "title": "Value",
          "type": "object"
        }
      },
      "title": "HP Log Space specification",
      "type": "object"
    },
    "v1HpLogUniform": {
      "properties": {
        "kind": {
          "default": "loguniform",
          "title": "Kind of hp, should be equal to \"loguniform\"",
          "type": "string"
        },
        "value": {
          "title": "Value",
          "type": "object"
        }
      },
      "title": "HP Log Uniform Dist specification",
      "type": "object"
    },
    "v1HpNormal": {
      "properties": {
        "kind": {
          "default": "normal",
          "title": "Kind of hp, should be equal to \"normal\"",
          "type": "string"
        },
        "value": {
          "title": "Value",
          "type": "object"
        }
      },
      "title": "HP Normal Dist specification",
      "type": "object"
    },
    "v1HpPChoice": {
      "properties": {
        "kind": {
          "default": "pchoice",
          "title": "Kind of hp, should be equal to \"pchoice\"",
          "type": "string"
        },
        "value": {
          "title": "Value",
          "type": "object"
        }
      },
      "title": "HP Probabilistic Choice specification",
      "type": "object"
    },
    "v1HpParams": {
      "properties": {
        "choice": {
          "$ref": "#/definitions/v1HpChoice"
        },
        "daterange": {
          "$ref": "#/definitions/v1HpDateRange"
        },
        "datetimerange": {
          "$ref": "#/definitions/v1HpDateTimeRange"
        },
        "geomspace": {
          "$ref": "#/definitions/v1HpGeomSpace"
        },
        "linspace": {
          "$ref": "#/definitions/v1HpLinSpace"
        },
        "lognormal": {
          "$ref": "#/definitions/v1HpLogNormal"
        },
        "logspace": {
          "$ref": "#/definitions/v1HpLogSpace"
        },
        "loguniform": {
          "$ref": "#/definitions/v1HpLogUniform"
        },
        "normal": {
          "$ref": "#/definitions/v1HpNormal"
        },
        "pchoice": {
          "$ref": "#/definitions/v1HpPChoice"
        },
        "qlognormal": {
          "$ref": "#/definitions/v1HpQLogNormal"
        },
        "qloguniform": {
          "$ref": "#/definitions/v1HpQLogUniform"
        },
        "qnormal": {
          "$ref": "#/definitions/v1HpQNormal"
        },
        "quniform": {
          "$ref": "#/definitions/v1HpQUniform"
        },
        "range": {
          "$ref": "#/definitions/v1HpRange"
        },
        "uniform": {
          "$ref": "#/definitions/v1HpUniform"
        }
      },
      "title": "Hp Matrix specification",
      "type": "object"
    },
    "v1HpQLogNormal": {
      "properties": {
        "kind": {
          "default": "qlognormal",
          "title": "Kind of hp, should be equal to \"qlognormal\"",
          "type": "string"
        },
        "value": {
          "title": "Value",
          "type": "object"
        }
      },
      "title": "HP Quantized Log Normal Dist specification",
      "type": "object"
    },
    "v1HpQLogUniform": {
      "properties": {
        "kind": {
          "default": "qloguniform",
          "title": "Kind of hp, should be equal to \"qloguniform\"",
          "type": "string"
        },
        "value": {
          "title": "Value",
          "type": "object"
        }
      },
      "title": "HP Quantized Log Uniform Dist specification",
      "type": "object"
    },
    "v1HpQNormal": {
      "properties": {
        "kind": {
          "default": "qnormal",
          "title": "Kind of hp, should be equal to \"qnormal\"",
          "type": "string"
        },
        "value": {
          "title": "Value",
          "type": "object"
        }
      },
      "title": "HP Quantized Normal Dist specification",
      "type": "object"
    },
    "v1HpQUniform": {
      "properties": {
        "kind": {
          "default": "quniform",
          "title": "Kind of hp, should be equal to \"quniform\"",
          "type": "string"
        },
        "value": {
          "title": "Value",
          "type": "object"
        }
      },
      "title": "HP Quantized Uniform Dist specification",
      "type": "object"
    },
    "v1HpRange": {
      "properties": {
        "kind": {
          "default": "range",
          "title": "Kind of hp, should be equal to \"range\"",
          "type": "string"
        },
        "value": {
          "title": "Value",
          "type": "object"
        }
      },
      "title": "HP Range specification",
      "type": "object"
    },
    "v1HpUniform": {
      "properties": {
        "kind": {
          "default": "uniform",
          "title": "Kind of hp, should be equal to \"uniform\"",
          "type": "string"
        },
        "value": {
          "title": "Value",
          "type": "object"
        }
      },
      "title": "HP Uniform Dist specification",
      "type": "object"
    },
    "v1HubRef": {
      "properties": {
        "kind": {
          "default": "hub_ref",
          "title": "Kind of reference, should be equal to \"hub_ref\"",
          "type": "string"
        },
        "name": {
          "title": "Value",
          "type": "string"
        }
      },
      "title": "Hub reference specification",
      "type": "object"
    },
    "v1Hyperband": {
      "properties": {
        "concurrency": {
          "format": "int32",
          "title": "Number of concurrent runs",
          "type": "integer"
        },
        "earlyStopping": {
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/v1MetricEarlyStopping"
              },
              {
                "$ref": "#/definitions/v1FailureEarlyStopping"
              }
            ],
            "type": "object"
          },
          "title": "A list of Early stopping objects, accpets both metric and failure early stopping mechanisms",
          "type": "array"
        },
        "eta": {
          "format": "int32",
          "title": "Eta",
          "type": "integer"
        },
        "kind": {
          "default": "hyperband",
          "title": "Kind of matrix, should be equal to \"hyperband\"",
          "type": "string"
        },
        "maxIterations": {
          "format": "int32",
          "title": "Maximim number of iteration to produce new observations",
          "type": "integer"
        },
        "metric": {
          "$ref": "#/definitions/v1OptimizationMetric",
          "title": "Metric to optimize during the iterations"
        },
        "params": {
          "additionalProperties": {
            "type": "object"
          },
          "title": "Hyperparams/Space definition of params to traverse",
          "type": "object"
        },
        "resource": {
          "$ref": "#/definitions/v1OptimizationResource",
          "title": "Resource to optimize (should be an integer or a float)"
        },
        "resume": {
          "title": "A flag to resume or restart the selected runs",
          "type": "boolean"
        },
        "seed": {
          "format": "int32",
          "title": "Seed for the random generator",
          "type": "integer"
        },
        "tuner": {
          "$ref": "#/definitions/v1Tuner",
          "title": "Tuner reference (hubRef) to use"
        }
      },
      "title": "Matrix based on hyperband",
      "type": "object"
    },
    "v1Hyperopt": {
      "properties": {
        "algorithm": {
          "$ref": "#/definitions/v1HyperoptAlgorithms",
          "title": "Algorithm to use from the hyperopt library"
        },
        "concurrency": {
          "format": "int32",
          "title": "Number of concurrent runs",
          "type": "integer"
        },
        "earlyStopping": {
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/v1MetricEarlyStopping"
              },
              {
                "$ref": "#/definitions/v1FailureEarlyStopping"
              }
            ],
            "type": "object"
          },
          "title": "A list of Early stopping objects, accepts both metric and failure early stopping mechanisms",
          "type": "array"
        },
        "kind": {
          "default": "hyperopt",
          "title": "Kind of matrix, should be equal to \"hyperopt\"",
          "type": "string"
        },
        "maxIterations": {
          "format": "int32",
          "title": "Maximum number of iteration to produce new observations",
          "type": "integer"
        },
        "metric": {
          "$ref": "#/definitions/v1OptimizationMetric",
          "title": "Metric to optimize during the iterations"
        },
        "numRuns": {
          "format": "int32",
          "title": "Number of runs to generate and search",
          "type": "integer"
        },
        "params": {
          "additionalProperties": {
            "type": "object"
          },
          "title": "Hyperparams/Space definition of params to traverse",
          "type": "object"
        },
        "seed": {
          "format": "int32",
          "title": "Seed for the random generator",
          "type": "integer"
        },
        "tuner": {
          "$ref": "#/definitions/v1Tuner",
          "title": "Tuner reference (hubRef) to use"
        }
      },
      "title": "Matrix based on hyperopt",
      "type": "object"
    },
    "v1HyperoptAlgorithms": {
      "default": "tpe",
      "description": "- tpe: tpe algorithm\n - rand: random algorithm\n - anneal: anneal algorithm",
      "enum": [
        "tpe",
        "rand",
        "anneal"
      ],
      "title": "Hyperopt algorithms enum",
      "type": "string"
    },
    "v1IO": {
      "properties": {
        "argFormat": {
          "title": "An optional argFromat of the input/output to be used instead of passing the value as is",
          "type": "string"
        },
        "connection": {
          "title": "A flag to signal to Polyaxon that this io is used with a connection",
          "type": "string"
        },
        "delayValidation": {
          "title": "(Deprecated) A flag to tell if param validation for this input/output should be delayed",
          "type": "boolean"
        },
        "description": {
          "title": "Description for the input/output",
          "type": "string"
        },
        "isFlag": {
          "title": "A flag to tell if this input/output is flag, only valid for bool type",
          "type": "boolean"
        },
        "isList": {
          "title": "A flag to tell if this input/output is list",
          "type": "boolean"
        },
        "isOptional": {
          "title": "A flag to tell if this input/output is optional",
          "type": "boolean"
        },
        "name": {
          "title": "Name for the input/output",
          "type": "string"
        },
        "options": {
          "items": {
            "type": "object"
          },
          "title": "(Deprecated) An optional field to provide possible values for validation",
          "type": "array"
        },
        "toEnv": {
          "title": "A flag to signal to Polyaxon that this io must be tranformed to the environment variable passed",
          "type": "string"
        },
        "toInit": {
          "title": "A flag to signal to Polyaxon that this io must be tranformed to an init container",
          "type": "boolean"
        },
        "type": {
          "title": "The type of the input/output",
          "type": "string"
        },
        "validation": {
          "$ref": "#/definitions/v1Validation",
          "title": "Optional validation for this input/output"
        },
        "value": {
          "title": "The value of the input/output should be compatible with the type",
          "type": "object"
        }
      },
      "title": "Inputs/Outputs specification",
      "type": "object"
    },
    "v1Init": {
      "properties": {
        "artifactRef": {
          "title": "Artifact version initializer",
          "type": "string"
        },
        "artifacts": {
          "$ref": "#/definitions/v1ArtifactsType",
          "title": "Artifacts initializer"
        },
        "connection": {
          "title": "Optional, connection to use with this initializer",
          "type": "string"
        },
        "container": {
          "$ref": "#/definitions/v1Container",
          "title": "Container to override"
        },
        "dockerfile": {
          "$ref": "#/definitions/v1DockerfileType",
          "title": "Schema of the dockerfile to init"
        },
        "file": {
          "$ref": "#/definitions/v1FileType",
          "title": "File initializer"
        },
        "git": {
          "$ref": "#/definitions/v1GitType",
          "title": "Override for git connections"
        },
        "lineageRef": {
          "title": "Lineage reference initializer",
          "type": "string"
        },
        "modelRef": {
          "title": "Model version initializer",
          "type": "string"
        },
        "path": {
          "title": "Optional context path, the path to mount to main the container",
          "type": "string"
        },
        "paths": {
          "items": {
            "type": "object"
          },
          "title": "Paths initializer",
          "type": "array"
        },
        "tensorboard": {
          "$ref": "#/definitions/v1TensorboardType",
          "title": "Tensorboard initializer"
        }
      },
      "title": "Initializer specification",
      "type": "object"
    },
    "v1Installation": {
      "properties": {
        "auth": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "defaultStreamsUrl": {
          "type": "string"
        },
        "dist": {
          "type": "string"
        },
        "hmac": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "mode": {
          "type": "string"
        },
        "orgs": {
          "type": "boolean"
        },
        "singleUrl": {
          "type": "boolean"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1IntervalSchedule": {
      "properties": {
        "dependsOnPast": {
          "title": "A flag to set a dependency on past executions",
          "type": "boolean"
        },
        "endAt": {
          "format": "date-time",
          "title": "Whan to end this interval schedule",
          "type": "string"
        },
        "frequency": {
          "format": "int32",
          "title": "Frequency (timedelta) at which to execute the runs",
          "type": "integer"
        },
        "kind": {
          "default": "interval",
          "title": "Kind of schedule, should be equal to \"interval\"",
          "type": "string"
        },
        "maxRuns": {
          "format": "int32",
          "title": "Limit to stop executing this schedule",
          "type": "integer"
        },
        "startAt": {
          "format": "date-time",
          "title": "When to start this interval schedule",
          "type": "string"
        }
      },
      "title": "Interval schedule specification",
      "type": "object"
    },
    "v1Iterative": {
      "properties": {
        "concurrency": {
          "format": "int32",
          "title": "Number of concurrent runs",
          "type": "integer"
        },
        "earlyStopping": {
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/v1MetricEarlyStopping"
              },
              {
                "$ref": "#/definitions/v1FailureEarlyStopping"
              }
            ],
            "type": "object"
          },
          "title": "A list of Early stopping objects, accepts both metric and failure early stopping mechanisms",
          "type": "array"
        },
        "kind": {
          "default": "iterative",
          "title": "Kind of matrix, should be equal to \"iterative\"",
          "type": "string"
        },
        "maxIterations": {
          "format": "int32",
          "title": "Maximum number of iteration to produce new observations",
          "type": "integer"
        },
        "params": {
          "additionalProperties": {
            "type": "object"
          },
          "title": "Hyperparam/Space definition of params to traverse",
          "type": "object"
        },
        "seed": {
          "format": "int32",
          "title": "Seed for the random generator",
          "type": "integer"
        },
        "tuner": {
          "$ref": "#/definitions/v1Tuner",
          "title": "Tuner reference (hubRef) to use"
        }
      },
      "title": "Matrix based on a custom iterative algorithm (suggestions -\u003e mapping -\u003e reduce -\u003e repeat)",
      "type": "object"
    },
    "v1Job": {
      "properties": {
        "connections": {
          "items": {
            "type": "string"
          },
          "title": "Optional connections section",
          "type": "array"
        },
        "container": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Container",
          "title": "Optional container to run"
        },
        "environment": {
          "$ref": "#/definitions/v1Environment",
          "title": "Optional environment section"
        },
        "init": {
          "items": {
            "$ref": "#/definitions/v1Init"
          },
          "title": "Optional init connections/containers section",
          "type": "array"
        },
        "kind": {
          "default": "job",
          "title": "Optional component kind, should be equal to 'job'",
          "type": "string"
        },
        "sidecars": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "title": "Optional sidecars section",
          "type": "array"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "type": "array"
        }
      },
      "title": "Job specification",
      "type": "object"
    },
    "v1Join": {
      "properties": {
        "limit": {
          "format": "int32",
          "title": "The search limit",
          "type": "integer"
        },
        "offset": {
          "format": "int32",
          "title": "The search offset",
          "type": "integer"
        },
        "params": {
          "additionalProperties": {
            "$ref": "#/definitions/v1JoinParam"
          },
          "title": "The params mapping keys to the values to pull from the join",
          "type": "object"
        },
        "query": {
          "title": "The search query",
          "type": "string"
        },
        "ref": {
          "title": "An optional ref to an already saved search",
          "type": "string"
        },
        "sort": {
          "title": "The search sort",
          "type": "string"
        }
      },
      "title": "Join specification",
      "type": "object"
    },
    "v1JoinParam": {
      "properties": {
        "connection": {
          "title": "A flag to signal to Polyaxon that this param is used with a connection",
          "type": "string"
        },
        "contextOnly": {
          "title": "A flag to signal to Polyaxon that this param should not be validated against io",
          "type": "boolean"
        },
        "toEnv": {
          "title": "A flag to signal to Polyaxon that this param must be tranformed to the environment variable passed",
          "type": "string"
        },
        "toInit": {
          "title": "A flag to signal to Polyaxon that this param must be tranformed to an init container",
          "type": "boolean"
        },
        "value": {
          "title": "The value to pass, if no ref or search is passed then it corresponds to a literal value",
          "type": "string"
        }
      },
      "title": "JoinParam specification",
      "type": "object"
    },
    "v1KFReplica": {
      "properties": {
        "connections": {
          "items": {
            "type": "string"
          },
          "title": "Optional connections section",
          "type": "array"
        },
        "container": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Container",
          "title": "Optional container to run"
        },
        "environment": {
          "$ref": "#/definitions/v1Environment",
          "title": "Optional environment section"
        },
        "init": {
          "items": {
            "$ref": "#/definitions/v1Init"
          },
          "title": "Optional init connections section",
          "type": "array"
        },
        "replicas": {
          "format": "int32",
          "title": "Number of replicas",
          "type": "integer"
        },
        "sidecars": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "title": "Optional sidecars section",
          "type": "array"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "title": "Optional connections section",
          "type": "array"
        }
      },
      "title": "Distributed Replica specification",
      "type": "object"
    },
    "v1ListActivitiesResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1Activity"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of activities",
      "type": "object"
    },
    "v1ListAgentsResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1Agent"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of agents",
      "type": "object"
    },
    "v1ListBookmarksResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "type": "object"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of of bookmarks",
      "type": "object"
    },
    "v1ListConnectionsResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1ConnectionResponse"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of connections",
      "type": "object"
    },
    "v1ListDashboardsResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1Dashboard"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of dashboards",
      "type": "object"
    },
    "v1ListOrganizationMembersResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1OrganizationMember"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of organization members",
      "type": "object"
    },
    "v1ListOrganizationsResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1Organization"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of organizations",
      "type": "object"
    },
    "v1ListPoliciesResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1Policy"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of policies",
      "type": "object"
    },
    "v1ListPresetsResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1Preset"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of scheduling presets",
      "type": "object"
    },
    "v1ListProjectVersionsResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1ProjectVersion"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of component hub",
      "type": "object"
    },
    "v1ListProjectsResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1Project"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of projects",
      "type": "object"
    },
    "v1ListQueuesResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1Queue"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of agents",
      "type": "object"
    },
    "v1ListRunArtifactsResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1RunArtifact"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of run artifacts",
      "type": "object"
    },
    "v1ListRunConnectionsResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1RunConnection"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of runs",
      "type": "object"
    },
    "v1ListRunEdgesResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1RunEdge"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of run edges",
      "type": "object"
    },
    "v1ListRunsResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1Run"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of runs",
      "type": "object"
    },
    "v1ListSearchesResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1Search"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of searches",
      "type": "object"
    },
    "v1ListServiceAccountsResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1ServiceAccount"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of service accounts",
      "type": "object"
    },
    "v1ListTagsResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1Tag"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of tags",
      "type": "object"
    },
    "v1ListTeamMembersResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1TeamMember"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of organization members",
      "type": "object"
    },
    "v1ListTeamsResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1Team"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of teams",
      "type": "object"
    },
    "v1ListTokenResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "title": "Count of the entities",
          "type": "integer"
        },
        "next": {
          "title": "Next page",
          "type": "string"
        },
        "previous": {
          "title": "Previous page",
          "type": "string"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/v1Token"
          },
          "title": "List of all entities",
          "type": "array"
        }
      },
      "title": "Contains list of tokens",
      "type": "object"
    },
    "v1Log": {
      "properties": {
        "container": {
          "title": "Container id",
          "type": "string"
        },
        "node": {
          "title": "Node name",
          "type": "string"
        },
        "pod": {
          "title": "Pod name",
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "value": {
          "title": "Log line",
          "type": "string"
        }
      },
      "title": "Log spec definition",
      "type": "object"
    },
    "v1LogHandler": {
      "properties": {
        "dsn": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Logs": {
      "properties": {
        "files": {
          "items": {
            "type": "string"
          },
          "title": "Log files",
          "type": "array"
        },
        "last_file": {
          "title": "Last log file",
          "type": "string"
        },
        "last_time": {
          "format": "date-time",
          "title": "Last log time",
          "type": "string"
        },
        "logs": {
          "items": {
            "$ref": "#/definitions/v1Log"
          },
          "title": "Log lines",
          "type": "array"
        }
      },
      "title": "Logs",
      "type": "object"
    },
    "v1MPIJob": {
      "properties": {
        "cleanPodPolicy": {
          "$ref": "#/definitions/v1CleanPodPolicy",
          "title": "optional clean pod policy section"
        },
        "kind": {
          "default": "mpijob",
          "title": "Optional component kind, should be equal to 'mpijob'",
          "type": "string"
        },
        "launcher": {
          "$ref": "#/definitions/v1KFReplica",
          "title": "Launcher replicas definition"
        },
        "schedulingPolicy": {
          "$ref": "#/definitions/v1SchedulingPolicy",
          "title": "optional scheduling policy section"
        },
        "slotsPerWorker": {
          "format": "int32",
          "title": "Optional slots per worker",
          "type": "integer"
        },
        "worker": {
          "$ref": "#/definitions/v1KFReplica",
          "title": "Worker replicas definition"
        }
      },
      "title": "MPI Job specification",
      "type": "object"
    },
    "v1MXJob": {
      "properties": {
        "cleanPodPolicy": {
          "$ref": "#/definitions/v1CleanPodPolicy",
          "title": "optional clean pod policy section"
        },
        "kind": {
          "default": "mxjob",
          "title": "Optional component kind, should be equal to 'mxjob'",
          "type": "string"
        },
        "mode": {
          "$ref": "#/definitions/MXJobMode",
          "description": "MXJob mode \"MXTrain\" and \"MXTune\"."
        },
        "scheduler": {
          "$ref": "#/definitions/v1KFReplica",
          "title": "Scheduler replicas definition"
        },
        "schedulingPolicy": {
          "$ref": "#/definitions/v1SchedulingPolicy",
          "title": "optional scheduling policy section"
        },
        "server": {
          "$ref": "#/definitions/v1KFReplica",
          "title": "Server replicas definition"
        },
        "tuner": {
          "$ref": "#/definitions/v1KFReplica",
          "title": "Tuner replicas definition"
        },
        "tuner_server": {
          "$ref": "#/definitions/v1KFReplica",
          "title": "TunerServer replicas definition"
        },
        "tuner_tracker": {
          "$ref": "#/definitions/v1KFReplica",
          "title": "TunerTracker replicas definition"
        },
        "worker": {
          "$ref": "#/definitions/v1KFReplica",
          "title": "Worker replicas definition"
        }
      },
      "title": "MXNet Job specification",
      "type": "object"
    },
    "v1ManagedBy": {
      "default": "client",
      "enum": [
        "client",
        "cli",
        "agent"
      ],
      "type": "string"
    },
    "v1Mapping": {
      "properties": {
        "concurrency": {
          "format": "int32",
          "title": "Number of concurrent runs",
          "type": "integer"
        },
        "earlyStopping": {
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/v1MetricEarlyStopping"
              },
              {
                "$ref": "#/definitions/v1FailureEarlyStopping"
              }
            ],
            "type": "object"
          },
          "title": "A list of Early stopping objects, accpets both metric and failure early stopping mechanisms",
          "type": "array"
        },
        "kind": {
          "default": "mapping",
          "title": "Kind of matrix, should be equal to \"mapping\"",
          "type": "string"
        },
        "values": {
          "items": {
            "type": "object"
          },
          "title": "The mapping values",
          "type": "array"
        }
      },
      "title": "Matrix based on map/array either specified manually by the user or passed from another step",
      "type": "object"
    },
    "v1Matrix": {
      "properties": {
        "bayes": {
          "$ref": "#/definitions/v1Bayes"
        },
        "grid": {
          "$ref": "#/definitions/v1GridSearch"
        },
        "hyperband": {
          "$ref": "#/definitions/v1Hyperband"
        },
        "hyperopt": {
          "$ref": "#/definitions/v1Hyperopt"
        },
        "iterative": {
          "$ref": "#/definitions/v1Iterative"
        },
        "mapping": {
          "$ref": "#/definitions/v1Mapping"
        },
        "random": {
          "$ref": "#/definitions/v1RandomSearch"
        }
      },
      "title": "All Schemas message",
      "type": "object"
    },
    "v1MatrixKind": {
      "default": "random",
      "enum": [
        "random",
        "grid",
        "hyperband",
        "bayes",
        "hyperopt",
        "iterative",
        "mapping"
      ],
      "type": "string"
    },
    "v1MedianStoppingPolicy": {
      "description": "Early stopping with median stopping, this policy computes running medians across\nall runs and stops those whose best performance is worse than the median\nof the running runs.",
      "properties": {
        "evaluationInterval": {
          "description": "Interval/Frequency for applying the policy.",
          "format": "int32",
          "type": "integer"
        },
        "kind": {
          "default": "median",
          "title": "Kind of this stopping policy, should be equal to \"median\"",
          "type": "string"
        },
        "minInterval": {
          "format": "int32",
          "title": "Min interval (e.g steps) before starting the process",
          "type": "integer"
        },
        "minSamples": {
          "format": "int32",
          "title": "Min samples runs succeeded before starting the process",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1MetricEarlyStopping": {
      "description": "MetricEarlyStoppingSchema specification\nEarly stopping based on metric config.",
      "properties": {
        "kind": {
          "default": "metric_early_stopping",
          "title": "Kind of this metric early stopping policy, should be equal to \"metric_early_stopping\"",
          "type": "string"
        },
        "metric": {
          "description": "Metric name to use for early stopping.",
          "type": "string"
        },
        "optimization": {
          "$ref": "#/definitions/v1Optimization",
          "description": "Optimization to do: maximize or minimize."
        },
        "policy": {
          "title": "Policy to use, should be one of the stopping policies:\nMedianStoppingPolicy, AverageStoppingPolicy, TruncationStoppingPolicy",
          "type": "object"
        },
        "value": {
          "description": "Metric value to use for the condition.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1MultiEventsResponse": {
      "properties": {
        "data": {
          "title": "Events data",
          "type": "object"
        }
      },
      "title": "Multi Run Events response definition",
      "type": "object"
    },
    "v1Notification": {
      "properties": {
        "connections": {
          "items": {
            "type": "string"
          },
          "title": "Connections to use for notification",
          "type": "array"
        },
        "trigger": {
          "$ref": "#/definitions/v1Statuses",
          "title": "Optional trigger policy, default done"
        }
      },
      "title": "Notification message",
      "type": "object"
    },
    "v1Operation": {
      "properties": {
        "build": {
          "$ref": "#/definitions/v1Build",
          "title": "Optional build process"
        },
        "cache": {
          "$ref": "#/definitions/v1Cache",
          "title": "Optional flag to disable cache validation and force run this operation"
        },
        "component": {
          "$ref": "#/definitions/v1Component"
        },
        "conditions": {
          "title": "An optional template containing conditions to check before starting the run",
          "type": "string"
        },
        "cost": {
          "format": "float",
          "title": "Optional field to assign cost to this Component",
          "type": "number"
        },
        "dagRef": {
          "type": "string"
        },
        "dependencies": {
          "items": {
            "type": "string"
          },
          "title": "Optional graph dependencies of this op",
          "type": "array"
        },
        "description": {
          "title": "Optional component description override",
          "type": "string"
        },
        "events": {
          "items": {
            "$ref": "#/definitions/v1EventTrigger"
          },
          "title": "Optional events section, must be a valid List of EventTrigger option (Run/Git/Alert/Webhook/Dataset)",
          "type": "array"
        },
        "hooks": {
          "items": {
            "$ref": "#/definitions/v1Hook"
          },
          "title": "Optional hooks section",
          "type": "array"
        },
        "hubRef": {
          "type": "string"
        },
        "isApproved": {
          "title": "Optional flag to mark this specification requires approval before running",
          "type": "boolean"
        },
        "isPreset": {
          "title": "Optional flag to mark this specification as preset",
          "type": "boolean"
        },
        "joins": {
          "additionalProperties": {
            "$ref": "#/definitions/v1Join"
          },
          "title": "Optional dict of joins",
          "type": "object"
        },
        "kind": {
          "title": "Optional component kind, should be equal to 'operation'",
          "type": "string"
        },
        "matrix": {
          "oneOf": [
            {
              "$ref": "#/definitions/v1RandomSearch"
            },
            {
              "$ref": "#/definitions/v1GridSearch"
            },
            {
              "$ref": "#/definitions/v1Hyperband"
            },
            {
              "$ref": "#/definitions/v1Bayes"
            },
            {
              "$ref": "#/definitions/v1Hyperopt"
            },
            {
              "$ref": "#/definitions/v1Iterative"
            },
            {
              "$ref": "#/definitions/v1Mapping"
            }
          ],
          "title": "Optional matrix section, must be a valid matrix option (Random/Grid/BO/Hyperband/Hyperopt/Mapping/Iterative)",
          "type": "object"
        },
        "name": {
          "title": "Optional component name override, should a valid slug",
          "type": "string"
        },
        "namespace": {
          "title": "Optional namespace to use, uses agent's namespace by default",
          "type": "string"
        },
        "params": {
          "additionalProperties": {
            "$ref": "#/definitions/v1Param"
          },
          "title": "Optional dict of params",
          "type": "object"
        },
        "patchStrategy": {
          "$ref": "#/definitions/v1PatchStrategy",
          "title": "Optional patch strategy, default post_merge"
        },
        "pathRef": {
          "type": "string"
        },
        "plugins": {
          "$ref": "#/definitions/v1Plugins",
          "title": "Optional plugins to enable"
        },
        "presets": {
          "items": {
            "type": "string"
          },
          "title": "Optional list of presets to use for running this operation",
          "type": "array"
        },
        "queue": {
          "title": "Optional queue to use for running this operation",
          "type": "string"
        },
        "runPatch": {
          "oneOf": [
            {
              "$ref": "#/definitions/v1Dag"
            },
            {
              "$ref": "#/definitions/v1DaskJob"
            },
            {
              "$ref": "#/definitions/v1Job"
            },
            {
              "$ref": "#/definitions/v1MPIJob"
            },
            {
              "$ref": "#/definitions/v1PytorchJob"
            },
            {
              "$ref": "#/definitions/v1PaddleJob"
            },
            {
              "$ref": "#/definitions/v1MXJob"
            },
            {
              "$ref": "#/definitions/v1XGBoostJob"
            },
            {
              "$ref": "#/definitions/v1RayJob"
            },
            {
              "$ref": "#/definitions/v1Service"
            },
            {
              "$ref": "#/definitions/v1TFJob"
            }
          ],
          "title": "Optional a run section to override the content of the run in the template\nshould be one of: Job/Service/Ray/Kubeflow/Dask/Dag",
          "type": "object"
        },
        "schedule": {
          "oneOf": [
            {
              "$ref": "#/definitions/v1IntervalSchedule"
            },
            {
              "$ref": "#/definitions/v1DateTimeSchedule"
            },
            {
              "$ref": "#/definitions/v1CronSchedule"
            }
          ],
          "title": "Optional schedule section, must be a valid Schedule option (Cron/Interval/Repeatable/ExactTime)",
          "type": "object"
        },
        "skipOnUpstreamSkip": {
          "title": "Optional flag to skip this run if upstream was skipped",
          "type": "boolean"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "title": "Optional component tags override",
          "type": "array"
        },
        "template": {
          "$ref": "#/definitions/v1Template",
          "title": "Optional to mark this specification as template with instructions"
        },
        "termination": {
          "$ref": "#/definitions/v1Termination",
          "title": "optional termination section"
        },
        "trigger": {
          "$ref": "#/definitions/v1TriggerPolicy",
          "title": "Optional trigger policy"
        },
        "urlRef": {
          "type": "string"
        },
        "version": {
          "format": "float",
          "title": "Spec version",
          "type": "number"
        }
      },
      "title": "Operation specification",
      "type": "object"
    },
    "v1OperationBody": {
      "properties": {
        "content": {
          "title": "The Operation body content as dump string",
          "type": "string"
        },
        "description": {
          "title": "Optional",
          "type": "string"
        },
        "is_managed": {
          "title": "Optional, if the run is managed, true by default, this flag should be false if starting a non-managed run",
          "type": "boolean"
        },
        "managed_by": {
          "$ref": "#/definitions/v1ManagedBy",
          "title": "Optional flag of the managing service"
        },
        "meta_info": {
          "title": "Meta",
          "type": "object"
        },
        "name": {
          "title": "Optional",
          "type": "string"
        },
        "pending": {
          "$ref": "#/definitions/v1RunPending",
          "title": "Optional, if the run is approved, true by default, this flag should be false if a run requires human validation"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "title": "Optional",
          "type": "array"
        }
      },
      "title": "Operation creation",
      "type": "object"
    },
    "v1Optimization": {
      "default": "maximize",
      "description": "- maximize: Minimize a metric\n - minimize: Minimize a metric",
      "enum": [
        "maximize",
        "minimize"
      ],
      "title": "Optimization enum for metrics",
      "type": "string"
    },
    "v1OptimizationMetric": {
      "properties": {
        "name": {
          "title": "Name of the metric to optimize",
          "type": "string"
        },
        "optimization": {
          "$ref": "#/definitions/v1Optimization",
          "title": "Optimization to use fot the metric"
        }
      },
      "title": "OptimizationMetric specification",
      "type": "object"
    },
    "v1OptimizationResource": {
      "properties": {
        "name": {
          "title": "Name of the resource to allocate",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1ResourceType",
          "title": "Type to use fot the resource"
        }
      },
      "title": "OptimizationResource specification",
      "type": "object"
    },
    "v1Organization": {
      "properties": {
        "archived_deletion_interval": {
          "format": "int32",
          "title": "Setting to configure default archived deletion interval",
          "type": "integer"
        },
        "auth": {
          "title": "Auth Settings",
          "type": "object"
        },
        "created_at": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "default_presets": {
          "items": {
            "type": "string"
          },
          "title": "Default presets",
          "type": "array"
        },
        "default_presets_ordered": {
          "items": {
            "type": "string"
          },
          "title": "Default presets ordered",
          "type": "array"
        },
        "expiration": {
          "format": "int32",
          "title": "Optional expiration for support",
          "type": "integer"
        },
        "is_cloud_viewable": {
          "title": "Setting to enable viewable metadata on cloud",
          "type": "boolean"
        },
        "is_public": {
          "title": "Optional flag to tell if this organization is public",
          "type": "boolean"
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "plan": {
          "title": "Plan settings",
          "type": "object"
        },
        "queue": {
          "title": "Default queue",
          "type": "string"
        },
        "role": {
          "title": "Current user's role in this org",
          "type": "string"
        },
        "support_revoke_at": {
          "format": "date-time",
          "title": "Optional time to revoke support access",
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "title": "Optional last time the entity was updated",
          "type": "string"
        },
        "usage": {
          "title": "Usage info",
          "type": "object"
        },
        "user": {
          "title": "User",
          "type": "string"
        },
        "user_email": {
          "title": "Read-only User email",
          "type": "string"
        }
      },
      "title": "Organization specification",
      "type": "object"
    },
    "v1OrganizationMember": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "kind": {
          "title": "Kind",
          "type": "string"
        },
        "role": {
          "title": "Role",
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "title": "Optional last time the entity was updated",
          "type": "string"
        },
        "user": {
          "title": "User",
          "type": "string"
        },
        "user_email": {
          "title": "Read-only User email",
          "type": "string"
        }
      },
      "title": "Organization member specification",
      "type": "object"
    },
    "v1PaddleElasticPolic": {
      "properties": {
        "maxReplicas": {
          "format": "int32",
          "type": "integer"
        },
        "maxRestarts": {
          "format": "int32",
          "type": "integer"
        },
        "metrics": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "minReplicas": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "Paddle elastic policy",
      "type": "object"
    },
    "v1PaddleJob": {
      "properties": {
        "cleanPodPolicy": {
          "$ref": "#/definitions/v1CleanPodPolicy",
          "title": "optional clean pod policy section"
        },
        "elasticPolicy": {
          "$ref": "#/definitions/v1PaddleElasticPolic",
          "title": "Optional elastic policy section"
        },
        "kind": {
          "default": "paddlejob",
          "title": "Optional component kind, should be equal to 'paddlejob'",
          "type": "string"
        },
        "master": {
          "$ref": "#/definitions/v1KFReplica",
          "title": "Master replicas definition"
        },
        "schedulingPolicy": {
          "$ref": "#/definitions/v1SchedulingPolicy",
          "title": "optional scheduling policy section"
        },
        "worker": {
          "$ref": "#/definitions/v1KFReplica",
          "title": "Worker replicas definition"
        }
      },
      "title": "Paddle Job specification",
      "type": "object"
    },
    "v1Param": {
      "properties": {
        "connection": {
          "title": "A flag to signal to Polyaxon that this param is used with a connection",
          "type": "string"
        },
        "contextOnly": {
          "title": "A flag to signal to Polyaxon that this param should not be validated against io",
          "type": "boolean"
        },
        "ref": {
          "title": "Ref corresponds to a reference of an object",
          "type": "string"
        },
        "toEnv": {
          "title": "A flag to signal to Polyaxon that this io must be tranformed to the environment variable passed",
          "type": "string"
        },
        "toInit": {
          "title": "A flag to signal to Polyaxon that this param must be tranformed to an init container",
          "type": "boolean"
        },
        "value": {
          "title": "The value to pass, if no ref or search is passed then it corresponds to a literal value",
          "type": "object"
        }
      },
      "title": "Param specification",
      "type": "object"
    },
    "v1PasswordChange": {
      "properties": {
        "new_password1": {
          "title": "New password",
          "type": "string"
        },
        "new_password2": {
          "title": "New password confirmation",
          "type": "string"
        },
        "old_password": {
          "title": "Old password",
          "type": "string"
        }
      },
      "title": "User password change",
      "type": "object"
    },
    "v1PatchStrategy": {
      "default": "replace",
      "description": "- replace: Replaces the keys\n - isnull: Only set the keys if they do not exist or if they are null\n - post_merge: Merge the all keys and replace by new one\n - pre_merge: Merge the all keys and keep old ones",
      "enum": [
        "replace",
        "isnull",
        "post_merge",
        "pre_merge"
      ],
      "title": "PatchStrategy",
      "type": "string"
    },
    "v1PathRef": {
      "properties": {
        "kind": {
          "default": "path_ref",
          "title": "Kind of reference, should be equal to \"path_ref\"",
          "type": "string"
        },
        "path": {
          "title": "Value",
          "type": "string"
        }
      },
      "title": "Path reference specification",
      "type": "object"
    },
    "v1Pipeline": {
      "properties": {
        "kind": {
          "$ref": "#/definitions/v1PipelineKind",
          "title": "Optional if the pipeline kind dag/matrix"
        },
        "name": {
          "title": "Optional name of the pipeline run",
          "type": "string"
        },
        "uuid": {
          "title": "Optional uuid of the pipeline run",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1PipelineKind": {
      "default": "dag",
      "enum": [
        "dag",
        "matrix"
      ],
      "type": "string"
    },
    "v1Plugins": {
      "properties": {
        "auth": {
          "title": "Optional flag to tell Polyaxon if it should set an auth context for the run, default true",
          "type": "boolean"
        },
        "autoResume": {
          "title": "Auto resume a run's artifacts (applies to resume and retries), works if collects_artifacts is enabled",
          "type": "boolean"
        },
        "collectArtifacts": {
          "title": "Optional flag to tell Polyaxon to collect artifacts and outputs",
          "type": "boolean"
        },
        "collectLogs": {
          "title": "Optional flag to tell Polyaxon to collect logs",
          "type": "boolean"
        },
        "collectResources": {
          "title": "Optional flag to tell Polyaxon to collect container resources (cpu/memory/gpu)",
          "type": "boolean"
        },
        "docker": {
          "title": "Optional flag to tell Polyaxon if it should set a docker socket context for the run, default false",
          "type": "boolean"
        },
        "externalHost": {
          "title": "Optional flag to tell Polyaxon to connect to the control plan via the external host",
          "type": "boolean"
        },
        "logLevel": {
          "title": "Optional log level",
          "type": "string"
        },
        "mountArtifactsStore": {
          "title": "Optional flag to mount the artifacts store to the main container",
          "type": "boolean"
        },
        "notifications": {
          "items": {
            "$ref": "#/definitions/v1Notification"
          },
          "title": "Option Notifications: Deprecated",
          "type": "array"
        },
        "shm": {
          "title": "Optional flag to tell Polyaxon if it should set a shm context for the run, default false",
          "type": "boolean"
        },
        "sidecar": {
          "$ref": "#/definitions/v1PolyaxonSidecarContainer",
          "title": "Optional to override the sidecar's default config"
        },
        "syncStatuses": {
          "title": "Optional flag to tell Polyaxon to sync statuses",
          "type": "boolean"
        }
      },
      "title": "Plugins specification",
      "type": "object"
    },
    "v1PodDNSConfig": {
      "title": "Placeholder for PodDNSConfig",
      "type": "object"
    },
    "v1PodSecurityContext": {
      "title": "Placeholder for PodSecurityContext",
      "type": "object"
    },
    "v1Policy": {
      "properties": {
        "agents": {
          "items": {
            "type": "string"
          },
          "title": "Authorized agents",
          "type": "array"
        },
        "archived_deletion_interval": {
          "format": "int32",
          "title": "Optional project archived deletion interval",
          "type": "integer"
        },
        "connected_projects": {
          "items": {
            "type": "string"
          },
          "title": "Connected projects",
          "type": "array"
        },
        "connections": {
          "items": {
            "type": "string"
          },
          "title": "Authorized connections",
          "type": "array"
        },
        "created_at": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "default_presets": {
          "items": {
            "type": "string"
          },
          "title": "Default Presets",
          "type": "array"
        },
        "default_presets_ordered": {
          "items": {
            "type": "string"
          },
          "title": "Default Presets ordered",
          "type": "array"
        },
        "description": {
          "title": "Optional description",
          "type": "string"
        },
        "excluded_features": {
          "items": {
            "type": "string"
          },
          "title": "Optional project excluded features",
          "type": "array"
        },
        "excluded_runtimes": {
          "items": {
            "type": "string"
          },
          "title": "Optional project excluded runtimes",
          "type": "array"
        },
        "name": {
          "title": "Required name",
          "type": "string"
        },
        "namespaces": {
          "items": {
            "type": "string"
          },
          "title": "Authorized namespaces",
          "type": "array"
        },
        "owner": {
          "title": "Owner/namespace where the project was created",
          "type": "string"
        },
        "presets": {
          "items": {
            "type": "string"
          },
          "title": "Authorized Presets",
          "type": "array"
        },
        "projects": {
          "items": {
            "type": "string"
          },
          "title": "Authorized projects",
          "type": "array"
        },
        "queue": {
          "title": "Default Queue",
          "type": "string"
        },
        "queues": {
          "items": {
            "type": "string"
          },
          "title": "Authorized queues",
          "type": "array"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "title": "Optional tags of this entity",
          "type": "array"
        },
        "teams": {
          "items": {
            "type": "string"
          },
          "title": "Authorized teams",
          "type": "array"
        },
        "updated_at": {
          "format": "date-time",
          "title": "Optional last time the entity was updated",
          "type": "string"
        },
        "user": {
          "title": "Optional name of user created this entity",
          "type": "string"
        },
        "user_accesses": {
          "items": {
            "$ref": "#/definitions/v1UserAccess"
          },
          "title": "Authorized users",
          "type": "array"
        },
        "uuid": {
          "title": "UUID",
          "type": "string"
        }
      },
      "title": "Organization policy",
      "type": "object"
    },
    "v1PolyaxonInitContainer": {
      "properties": {
        "image": {
          "type": "string"
        },
        "imagePullPolicy": {
          "type": "string"
        },
        "imageTag": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        }
      },
      "title": "Polyaxon init specification",
      "type": "object"
    },
    "v1PolyaxonSidecarContainer": {
      "properties": {
        "image": {
          "type": "string"
        },
        "imagePullPolicy": {
          "type": "string"
        },
        "imageTag": {
          "type": "string"
        },
        "monitorLogs": {
          "type": "boolean"
        },
        "monitorSpec": {
          "type": "boolean"
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "sleepInterval": {
          "format": "int32",
          "type": "integer"
        },
        "syncInterval": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "Polyaxon sidecar specification",
      "type": "object"
    },
    "v1Preset": {
      "properties": {
        "content": {
          "title": "The content of the preset",
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "description": {
          "title": "Optional description",
          "type": "string"
        },
        "live_state": {
          "format": "int32",
          "title": "Current live state",
          "type": "integer"
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "settings": {
          "$ref": "#/definitions/v1PresetSettings",
          "title": "settings"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "title": "Optional tags of this entity",
          "type": "array"
        },
        "updated_at": {
          "format": "date-time",
          "title": "Optional last time the entity was updated",
          "type": "string"
        },
        "user": {
          "title": "Optional name of user created this entity",
          "type": "string"
        },
        "uuid": {
          "title": "UUID",
          "type": "string"
        }
      },
      "title": "Preset specification",
      "type": "object"
    },
    "v1PresetSettings": {
      "properties": {
        "projects": {
          "items": {
            "$ref": "#/definitions/v1SettingsCatalog"
          },
          "title": "Projects",
          "type": "array"
        },
        "runs": {
          "items": {
            "$ref": "#/definitions/v1SettingsCatalog"
          },
          "title": "Component hubs",
          "type": "array"
        }
      },
      "title": "Preset Settings specification",
      "type": "object"
    },
    "v1Project": {
      "properties": {
        "archived_deletion_interval": {
          "format": "int32",
          "title": "Optional project archived deletion interval",
          "type": "integer"
        },
        "bookmarked": {
          "title": "Optional if this entity was bookmarked",
          "type": "boolean"
        },
        "contributors": {
          "items": {
            "type": "object"
          },
          "title": "Contributors",
          "type": "array"
        },
        "created_at": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "description": {
          "title": "Optional description",
          "type": "string"
        },
        "excluded_features": {
          "items": {
            "type": "string"
          },
          "title": "Optional project excluded features",
          "type": "array"
        },
        "excluded_runtimes": {
          "items": {
            "type": "string"
          },
          "title": "Optional project excluded runtimes",
          "type": "array"
        },
        "is_public": {
          "title": "Optional flag to tell if this project is public",
          "type": "boolean"
        },
        "live_state": {
          "format": "int32",
          "title": "Current live state",
          "type": "integer"
        },
        "name": {
          "title": "Required name",
          "type": "string"
        },
        "owner": {
          "title": "Owner/namespace where the project was created",
          "type": "string"
        },
        "readme": {
          "title": "Optional Markdown description/readme",
          "type": "string"
        },
        "role": {
          "title": "Current user's role in this (org/teams)/project",
          "type": "string"
        },
        "settings": {
          "$ref": "#/definitions/v1ProjectSettings",
          "title": "Optional project settings"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "title": "Optional tags of this entity",
          "type": "array"
        },
        "updated_at": {
          "format": "date-time",
          "title": "Optional last time the entity was updated",
          "type": "string"
        },
        "user": {
          "title": "Optional name of user created this entity",
          "type": "string"
        },
        "uuid": {
          "title": "UUID",
          "type": "string"
        }
      },
      "title": "Project specification",
      "type": "object"
    },
    "v1ProjectSettings": {
      "properties": {
        "agents": {
          "items": {
            "type": "string"
          },
          "title": "Authorized agents",
          "type": "array"
        },
        "connections": {
          "items": {
            "type": "string"
          },
          "title": "Authorized connections",
          "type": "array"
        },
        "default_presets": {
          "items": {
            "type": "string"
          },
          "title": "Default Presets",
          "type": "array"
        },
        "default_presets_ordered": {
          "items": {
            "type": "string"
          },
          "title": "Default Presets ordered",
          "type": "array"
        },
        "namespaces": {
          "items": {
            "type": "string"
          },
          "title": "Authorized namespaces",
          "type": "array"
        },
        "policy": {
          "title": "Attached policy",
          "type": "string"
        },
        "presets": {
          "items": {
            "type": "string"
          },
          "title": "Authorized Presets",
          "type": "array"
        },
        "projects": {
          "items": {
            "type": "string"
          },
          "title": "Authorized projects",
          "type": "array"
        },
        "queue": {
          "title": "Default Queue",
          "type": "string"
        },
        "queues": {
          "items": {
            "type": "string"
          },
          "title": "Authorized queues",
          "type": "array"
        },
        "teams": {
          "items": {
            "type": "string"
          },
          "title": "Authorized teams",
          "type": "array"
        },
        "user_accesses": {
          "items": {
            "$ref": "#/definitions/v1UserAccess"
          },
          "title": "Authorized users",
          "type": "array"
        }
      },
      "title": "Project Settings specification",
      "type": "object"
    },
    "v1ProjectVersion": {
      "properties": {
        "artifacts": {
          "items": {
            "type": "string"
          },
          "title": "Artifacts lineage",
          "type": "array"
        },
        "connection": {
          "title": "Connection name",
          "type": "string"
        },
        "content": {
          "title": "The metadata/content body",
          "type": "string"
        },
        "contributors": {
          "items": {
            "type": "object"
          },
          "title": "Contributors",
          "type": "array"
        },
        "created_at": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "description": {
          "title": "Optional description",
          "type": "string"
        },
        "kind": {
          "$ref": "#/definitions/v1ProjectVersionKind",
          "title": "Optional kind to tell the kind of this version"
        },
        "meta_info": {
          "description": "Extra information related to the run, lineage, artifacts, ...",
          "type": "object"
        },
        "name": {
          "title": "Optional component name, should be a valid fully qualified value: name[:version]",
          "type": "string"
        },
        "owner": {
          "title": "Owner of this entity",
          "type": "string"
        },
        "project": {
          "title": "Project name",
          "type": "string"
        },
        "readme": {
          "title": "Optional Markdown description/readme",
          "type": "string"
        },
        "role": {
          "title": "Current user's role in this (org/teams)/hub/version",
          "type": "string"
        },
        "run": {
          "title": "Run lineage",
          "type": "string"
        },
        "stage": {
          "$ref": "#/definitions/v1Stages",
          "title": "Optional latest stage of this entity"
        },
        "stage_conditions": {
          "items": {
            "$ref": "#/definitions/v1StageCondition"
          },
          "title": "The status conditions timeline",
          "type": "array"
        },
        "state": {
          "title": "The version state read-only",
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "title": "Optional tags of this entity",
          "type": "array"
        },
        "updated_at": {
          "format": "date-time",
          "title": "Optional last time the entity was updated",
          "type": "string"
        },
        "user": {
          "title": "Required name of user started this entity",
          "type": "string"
        },
        "uuid": {
          "title": "UUID",
          "type": "string"
        }
      },
      "title": "component hub specification",
      "type": "object"
    },
    "v1ProjectVersionKind": {
      "default": "component",
      "enum": [
        "component",
        "model",
        "artifact"
      ],
      "type": "string"
    },
    "v1PytorchElasticPolicy": {
      "properties": {
        "Metrics": {
          "description": "Metrics contains the specifications which are used to calculate the\ndesired replica count (the maximum replica count across all metrics will\nbe used).  The desired replica count is calculated with multiplying the\nratio between the target value and the current value by the current\nnumber of pods. Ergo, metrics used must decrease as the pod count is\nincreased, and vice-versa.  See the individual metric source types for\nmore information about how each type of metric must respond.\nIf not set, the HPA will not be created.",
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "maxReplicas": {
          "description": "upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas, defaults to null.",
          "format": "int32",
          "type": "integer"
        },
        "maxRestarts": {
          "format": "int32",
          "type": "integer"
        },
        "minReplicas": {
          "description": "minReplicas is the lower limit for the number of replicas to which the training job can scale down.",
          "format": "int32",
          "type": "integer"
        },
        "nProcPerNode": {
          "description": "Number of workers per node; supported values: [auto, cpu, gpu, int].\nDeprecated: This API is deprecated in v1.7+\nUse .spec.nprocPerNode instead.",
          "format": "int32",
          "type": "integer"
        },
        "rdvzBackend": {
          "type": "string"
        },
        "rdvzConf": {
          "description": "RDZVConf contains additional rendezvous configuration (\u003ckey1\u003e=\u003cvalue1\u003e,\u003ckey2\u003e=\u003cvalue2\u003e,...).",
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "rdvzHost": {
          "type": "string"
        },
        "rdvzId": {
          "type": "string"
        },
        "rdvzPort": {
          "format": "int32",
          "type": "integer"
        },
        "standalone": {
          "description": "Start a local standalone rendezvous backend that is represented by a C10d TCP store\non port 29400. Useful when launching single-node, multi-worker job. If specified\n--rdzv_backend, --rdzv_endpoint, --rdzv_id are auto-assigned; any explicitly set values\nare ignored.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "v1PytorchJob": {
      "properties": {
        "cleanPodPolicy": {
          "$ref": "#/definitions/v1CleanPodPolicy",
          "title": "optional clean pod policy section"
        },
        "elasticPolicy": {
          "$ref": "#/definitions/v1PytorchElasticPolicy",
          "title": "Optional elastic policy section"
        },
        "kind": {
          "default": "pytorchjob",
          "title": "Optional component kind, should be equal to 'pytorchjob'",
          "type": "string"
        },
        "master": {
          "$ref": "#/definitions/v1KFReplica",
          "title": "Master replicas definition"
        },
        "nProcPerNode": {
          "type": "string"
        },
        "schedulingPolicy": {
          "$ref": "#/definitions/v1SchedulingPolicy",
          "title": "optional scheduling policy section"
        },
        "worker": {
          "$ref": "#/definitions/v1KFReplica",
          "title": "Worker replicas definition"
        }
      },
      "title": "Pytorch Job specification",
      "type": "object"
    },
    "v1Queue": {
      "properties": {
        "agent": {
          "title": "Agent",
          "type": "string"
        },
        "concurrency": {
          "format": "int32",
          "title": "The queue concurrency",
          "type": "integer"
        },
        "contributors": {
          "items": {
            "type": "object"
          },
          "title": "Optional contributors",
          "type": "array"
        },
        "created_at": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "description": {
          "title": "Optional description",
          "type": "string"
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "priority": {
          "format": "int32",
          "title": "The queue priority",
          "type": "integer"
        },
        "quota": {
          "title": "Optional queue quota",
          "type": "string"
        },
        "resource": {
          "title": "Optional queue resource",
          "type": "string"
        },
        "stats": {
          "title": "Optional queue stats",
          "type": "object"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "title": "Optional tags of this entity",
          "type": "array"
        },
        "updated_at": {
          "format": "date-time",
          "title": "Optional last time the entity was updated",
          "type": "string"
        },
        "user": {
          "title": "Required name of user started this entity",
          "type": "string"
        },
        "uuid": {
          "title": "UUID",
          "type": "string"
        }
      },
      "title": "Queue specification",
      "type": "object"
    },
    "v1RandomSearch": {
      "properties": {
        "concurrency": {
          "format": "int32",
          "title": "Number of concurrent runs",
          "type": "integer"
        },
        "earlyStopping": {
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/v1MetricEarlyStopping"
              },
              {
                "$ref": "#/definitions/v1FailureEarlyStopping"
              }
            ],
            "type": "object"
          },
          "title": "A list of Early stoppings, accpets both metric and failure early stopping mechanisms",
          "type": "array"
        },
        "kind": {
          "default": "random",
          "title": "Kind of matrix, should be equal to \"random\"",
          "type": "string"
        },
        "numRuns": {
          "format": "int32",
          "title": "Number of runs to generate and search",
          "type": "integer"
        },
        "params": {
          "additionalProperties": {
            "type": "object"
          },
          "title": "Hyperparams/Space definition of params to traverse",
          "type": "object"
        },
        "seed": {
          "format": "int32",
          "title": "Seed for the random generator",
          "type": "integer"
        }
      },
      "title": "Matrix based on randomly generated search space",
      "type": "object"
    },
    "v1RayJob": {
      "properties": {
        "entrypoint": {
          "title": "Entrypoint of the ray application, e.g. python path/to/run.py",
          "type": "string"
        },
        "head": {
          "$ref": "#/definitions/v1RayReplica",
          "title": "Ray head goupr section"
        },
        "kind": {
          "default": "rayjob",
          "title": "Kind of runtime, should be equal to \"rayjob\"",
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional metadata section",
          "type": "object"
        },
        "rayVersion": {
          "title": "Cluster ray version, must be equal to the ray image version",
          "type": "string"
        },
        "runtimeEnv": {
          "title": "Optional run environment section to install pip packages or expose env vars",
          "type": "object"
        },
        "workers": {
          "items": {
            "$ref": "#/definitions/v1RayReplica"
          },
          "title": "Ray workers group section",
          "type": "array"
        }
      },
      "title": "Ray specification",
      "type": "object"
    },
    "v1RayReplica": {
      "properties": {
        "connections": {
          "items": {
            "type": "string"
          },
          "title": "Optional connections section",
          "type": "array"
        },
        "container": {
          "$ref": "#/definitions/v1Container",
          "title": "Optional container to run"
        },
        "environment": {
          "$ref": "#/definitions/v1Environment",
          "title": "Optional environment section"
        },
        "groupName": {
          "type": "string"
        },
        "init": {
          "items": {
            "$ref": "#/definitions/v1Init"
          },
          "title": "Optional init connections section",
          "type": "array"
        },
        "maxReplicas": {
          "format": "int32",
          "type": "integer"
        },
        "minReplicas": {
          "format": "int32",
          "type": "integer"
        },
        "rayStartParams": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "replicas": {
          "format": "int32",
          "title": "Number of replicas",
          "type": "integer"
        },
        "sidecars": {
          "items": {
            "$ref": "#/definitions/v1Container"
          },
          "title": "Optional sidecars section",
          "type": "array"
        },
        "volumes": {
          "description": "Volumes is a list of volumes that can be mounted.",
          "items": {
            "$ref": "#/definitions/v1Volume"
          },
          "type": "array"
        }
      },
      "title": "Ray replica definition",
      "type": "object"
    },
    "v1Reference": {
      "properties": {
        "dagRef": {
          "$ref": "#/definitions/v1DagRef"
        },
        "hubRef": {
          "$ref": "#/definitions/v1HubRef"
        },
        "pathRef": {
          "$ref": "#/definitions/v1PathRef"
        },
        "urlRef": {
          "$ref": "#/definitions/v1UrlRef"
        }
      },
      "title": "Reference specification",
      "type": "object"
    },
    "v1ResourceRequirements": {
      "title": "Placeholder Resource Requirements",
      "type": "object"
    },
    "v1ResourceType": {
      "default": "int",
      "description": "- int: Int resource\n - float: Float resource",
      "enum": [
        "int",
        "float"
      ],
      "title": "ResourceTypes enum for optmiztion resources",
      "type": "string"
    },
    "v1Run": {
      "properties": {
        "bookmarked": {
          "title": "Optional if this entity was bookmarked",
          "type": "boolean"
        },
        "content": {
          "title": "Optional content of the entity's spec",
          "type": "string"
        },
        "contributors": {
          "items": {
            "type": "object"
          },
          "title": "Contributors",
          "type": "array"
        },
        "created_at": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "description": {
          "title": "Optional description",
          "type": "string"
        },
        "duration": {
          "format": "float",
          "title": "Optional duration of the entity",
          "type": "number"
        },
        "finished_at": {
          "format": "date-time",
          "title": "Optional last time the entity was started",
          "type": "string"
        },
        "graph": {
          "title": "Optional graph definition",
          "type": "object"
        },
        "inputs": {
          "title": "Optional inputs of this entity",
          "type": "object"
        },
        "is_approved": {
          "title": "Deprecated flag that was replaced by \"pending\", and it will be completely dropped after v1.15",
          "type": "boolean"
        },
        "is_managed": {
          "title": "Optional flag to tell if this entity is managed by the platform",
          "type": "boolean"
        },
        "kind": {
          "$ref": "#/definitions/v1RunKind",
          "title": "Optional kind to tell the kind of this run"
        },
        "live_state": {
          "format": "int32",
          "title": "Current live state",
          "type": "integer"
        },
        "managed_by": {
          "$ref": "#/definitions/v1ManagedBy",
          "title": "Optional flag of the managing service"
        },
        "merge": {
          "title": "Optional merge flag",
          "type": "boolean"
        },
        "meta_info": {
          "title": "Optional run meta info",
          "type": "object"
        },
        "name": {
          "title": "Optional name",
          "type": "string"
        },
        "original": {
          "$ref": "#/definitions/v1Cloning",
          "title": "Optional original run meta information"
        },
        "outputs": {
          "title": "Optional outputs of this entity",
          "type": "object"
        },
        "owner": {
          "title": "Required name of owner of this entity",
          "type": "string"
        },
        "pending": {
          "$ref": "#/definitions/v1RunPending",
          "title": "Optional to tell if this entity requires approval before it should be scheduled"
        },
        "pipeline": {
          "$ref": "#/definitions/v1Pipeline",
          "title": "Optional pipeline run meta information"
        },
        "project": {
          "title": "Required project name",
          "type": "string"
        },
        "raw_content": {
          "title": "Optional content of the entity's spec",
          "type": "string"
        },
        "readme": {
          "title": "Optional Markdown description/readme",
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/v1RunResources",
          "title": "Options resources"
        },
        "role": {
          "title": "Current user's role in this (org/teams)/project/runs",
          "type": "string"
        },
        "runtime": {
          "$ref": "#/definitions/v1RunKind",
          "title": "Optional meta kind to tell the nature of this run"
        },
        "schedule_at": {
          "format": "date-time",
          "title": "Optional last time the entity was started",
          "type": "string"
        },
        "settings": {
          "$ref": "#/definitions/v1RunSettings",
          "title": "Optional settings"
        },
        "started_at": {
          "format": "date-time",
          "title": "Optional last time the entity was started",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1Statuses",
          "title": "Optional latest status of this entity"
        },
        "status_conditions": {
          "items": {
            "$ref": "#/definitions/v1StatusCondition"
          },
          "title": "The status conditions timeline",
          "type": "array"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "title": "Optional tags of this entity",
          "type": "array"
        },
        "updated_at": {
          "format": "date-time",
          "title": "Optional last time the entity was updated",
          "type": "string"
        },
        "user": {
          "title": "Required name of user started this entity",
          "type": "string"
        },
        "uuid": {
          "title": "UUID",
          "type": "string"
        },
        "wait_time": {
          "format": "float",
          "title": "Optional wait time of the entity",
          "type": "number"
        }
      },
      "title": "Run specification",
      "type": "object"
    },
    "v1RunArtifact": {
      "properties": {
        "connection": {
          "title": "Optional Connection",
          "type": "string"
        },
        "is_input": {
          "title": "Optional flag to check the use of the artifact in a context",
          "type": "boolean"
        },
        "kind": {
          "$ref": "#/definitions/v1ArtifactKind",
          "title": "Artifact type"
        },
        "meta_info": {
          "title": "Optional meta information",
          "type": "object"
        },
        "name": {
          "title": "Artifact name",
          "type": "string"
        },
        "path": {
          "title": "Artifact path",
          "type": "string"
        },
        "run": {
          "title": "Optional Run",
          "type": "string"
        },
        "state": {
          "title": "State",
          "type": "string"
        },
        "summary": {
          "title": "Artifact schema",
          "type": "object"
        }
      },
      "title": "Run Artifact spec definition",
      "type": "object"
    },
    "v1RunArtifacts": {
      "properties": {
        "artifacts": {
          "items": {
            "$ref": "#/definitions/v1RunArtifact"
          },
          "title": "Run Artifacts",
          "type": "array"
        }
      },
      "title": "Run Artifacts spec definition",
      "type": "object"
    },
    "v1RunConnection": {
      "properties": {
        "kind": {
          "title": "Kind",
          "type": "string"
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "uuid": {
          "title": "Uuid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1RunEdge": {
      "properties": {
        "downstream": {
          "$ref": "#/definitions/v1Run",
          "title": "Optional name of the edge run"
        },
        "kind": {
          "$ref": "#/definitions/v1RunEdgeKind",
          "title": "Optional edge run kind"
        },
        "statuses": {
          "items": {
            "$ref": "#/definitions/v1Statuses"
          },
          "title": "Options statuses events",
          "type": "array"
        },
        "upstream": {
          "$ref": "#/definitions/v1Run",
          "title": "Optional uuid of the edge run"
        },
        "values": {
          "title": "Optional edge values",
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1RunEdgeKind": {
      "default": "action",
      "enum": [
        "action",
        "event",
        "hook",
        "dag",
        "join",
        "run",
        "tb",
        "build",
        "manual"
      ],
      "type": "string"
    },
    "v1RunEdgeLineage": {
      "properties": {
        "is_upstream": {
          "title": "Optional edge run direction",
          "type": "boolean"
        },
        "uuid": {
          "title": "Run uuid to link",
          "type": "string"
        },
        "values": {
          "title": "Optional edge values",
          "type": "object"
        }
      },
      "title": "single run edge",
      "type": "object"
    },
    "v1RunEdgesGraph": {
      "properties": {
        "edges": {
          "items": {
            "$ref": "#/definitions/v1RunEdgeLineage"
          },
          "title": "Run edges",
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1RunKind": {
      "default": "job",
      "enum": [
        "job",
        "service",
        "dag",
        "daskjob",
        "rayjob",
        "mpijob",
        "tfjob",
        "pytorchjob",
        "mxjob",
        "xgbjob",
        "paddlejob",
        "matrix",
        "schedule",
        "tuner",
        "watchdog",
        "notifier",
        "builder",
        "cleaner"
      ],
      "title": "Run kind enum\nKinds: job, service, dag, matrix, schedule\nRuntime kinds: job, service, dag, dask, ray, mpijob, tfjob\nhelper kinds: tuner, watchdog, notifier, cleaner, build",
      "type": "string"
    },
    "v1RunPending": {
      "default": "approval",
      "enum": [
        "approval",
        "upload",
        "cache",
        "build"
      ],
      "type": "string"
    },
    "v1RunReferenceCatalog": {
      "properties": {
        "name": {
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "title": "Owner",
          "type": "string"
        },
        "project": {
          "title": "Project",
          "type": "string"
        },
        "state": {
          "title": "State",
          "type": "string"
        }
      },
      "title": "Run Settings catalog specification",
      "type": "object"
    },
    "v1RunResources": {
      "properties": {
        "cost": {
          "format": "float",
          "type": "number"
        },
        "cpu": {
          "format": "float",
          "type": "number"
        },
        "custom": {
          "format": "float",
          "type": "number"
        },
        "gpu": {
          "format": "float",
          "type": "number"
        },
        "memory": {
          "format": "float",
          "type": "number"
        }
      },
      "title": "Run Resources specification",
      "type": "object"
    },
    "v1RunSchema": {
      "properties": {
        "dag": {
          "$ref": "#/definitions/v1Dag"
        },
        "daskJob": {
          "$ref": "#/definitions/v1DaskJob"
        },
        "job": {
          "$ref": "#/definitions/v1Job"
        },
        "mpiJob": {
          "$ref": "#/definitions/v1MPIJob"
        },
        "mxJob": {
          "$ref": "#/definitions/v1MXJob"
        },
        "paddleJob": {
          "$ref": "#/definitions/v1PaddleJob"
        },
        "pytorchJob": {
          "$ref": "#/definitions/v1PytorchJob"
        },
        "rayJob": {
          "$ref": "#/definitions/v1RayJob"
        },
        "service": {
          "$ref": "#/definitions/v1Service"
        },
        "tfJob": {
          "$ref": "#/definitions/v1TFJob"
        },
        "xgboostJob": {
          "$ref": "#/definitions/v1XGBoostJob"
        }
      },
      "type": "object"
    },
    "v1RunSettings": {
      "properties": {
        "agent": {
          "$ref": "#/definitions/v1SettingsCatalog",
          "title": "Agent"
        },
        "artifacts": {
          "items": {
            "$ref": "#/definitions/v1RunReferenceCatalog"
          },
          "title": "Artifact version references",
          "type": "array"
        },
        "artifacts_store": {
          "$ref": "#/definitions/v1SettingsCatalog",
          "title": "Artifacts Store"
        },
        "build": {
          "title": "Build reference, if it exists",
          "type": "object"
        },
        "component": {
          "title": "Component reference",
          "type": "object"
        },
        "models": {
          "items": {
            "$ref": "#/definitions/v1RunReferenceCatalog"
          },
          "title": "Model version references",
          "type": "array"
        },
        "namespace": {
          "title": "Namespace",
          "type": "string"
        },
        "queue": {
          "$ref": "#/definitions/v1SettingsCatalog",
          "title": "Queue"
        },
        "tensorboard": {
          "title": "Latest Tensorboard reference, if it exists",
          "type": "object"
        }
      },
      "title": "Run Settings specification",
      "type": "object"
    },
    "v1S3Type": {
      "properties": {
        "bucket": {
          "title": "Optional container",
          "type": "string"
        },
        "key": {
          "title": "Optional storage_account",
          "type": "string"
        }
      },
      "title": "Wasb type specification",
      "type": "object"
    },
    "v1Schedule": {
      "properties": {
        "cron": {
          "$ref": "#/definitions/v1CronSchedule"
        },
        "datetime": {
          "$ref": "#/definitions/v1DateTimeSchedule"
        },
        "interval": {
          "$ref": "#/definitions/v1IntervalSchedule"
        }
      },
      "title": "All Schemas message",
      "type": "object"
    },
    "v1ScheduleKind": {
      "default": "cron",
      "enum": [
        "cron",
        "interval",
        "datetime"
      ],
      "type": "string"
    },
    "v1SchedulingPolicy": {
      "properties": {
        "minAvailable": {
          "format": "int32",
          "type": "integer"
        },
        "minResources": {
          "type": "object"
        },
        "priorityClass": {
          "type": "string"
        },
        "queue": {
          "type": "string"
        },
        "scheduleTimeoutSeconds": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1Schemas": {
      "properties": {
        "artifacs": {
          "$ref": "#/definitions/v1ArtifactsType"
        },
        "artifactsMount": {
          "$ref": "#/definitions/v1ArtifactsMount"
        },
        "auth": {
          "$ref": "#/definitions/v1AuthType"
        },
        "compiledOperation": {
          "$ref": "#/definitions/v1CompiledOperation"
        },
        "connection": {
          "$ref": "#/definitions/v1ConnectionType"
        },
        "connectionSchema": {
          "$ref": "#/definitions/v1ConnectionSchema"
        },
        "earlyStopping": {
          "$ref": "#/definitions/v1EarlyStopping"
        },
        "event": {
          "$ref": "#/definitions/v1Event"
        },
        "eventType": {
          "$ref": "#/definitions/v1EventType"
        },
        "gcs": {
          "$ref": "#/definitions/v1GcsType"
        },
        "hpParams": {
          "$ref": "#/definitions/v1HpParams"
        },
        "matrix": {
          "$ref": "#/definitions/v1Matrix"
        },
        "matrixKind": {
          "$ref": "#/definitions/v1MatrixKind"
        },
        "operation": {
          "$ref": "#/definitions/v1Operation"
        },
        "polyaxonInitContainer": {
          "$ref": "#/definitions/v1PolyaxonInitContainer"
        },
        "polyaxonSidecarContainer": {
          "$ref": "#/definitions/v1PolyaxonSidecarContainer"
        },
        "reference": {
          "$ref": "#/definitions/v1Reference"
        },
        "resource": {
          "$ref": "#/definitions/v1ConnectionResource"
        },
        "run": {
          "$ref": "#/definitions/v1RunSchema"
        },
        "s3": {
          "$ref": "#/definitions/v1S3Type"
        },
        "schedule": {
          "$ref": "#/definitions/v1Schedule"
        },
        "scheduleKind": {
          "$ref": "#/definitions/v1ScheduleKind"
        },
        "uri": {
          "$ref": "#/definitions/v1UriType"
        },
        "wasb": {
          "$ref": "#/definitions/v1WasbType"
        }
      },
      "type": "object"
    },
    "v1Search": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "description": {
          "title": "Optional description",
          "type": "string"
        },
        "live_state": {
          "format": "int32",
          "title": "Current live state",
          "type": "integer"
        },
        "name": {
          "title": "Optional name",
          "type": "string"
        },
        "org_level": {
          "title": "Optional search level",
          "type": "boolean"
        },
        "spec": {
          "$ref": "#/definitions/v1SearchSpec",
          "title": "Search spec"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "title": "Optional tags of this entity",
          "type": "array"
        },
        "updated_at": {
          "format": "date-time",
          "title": "Optional last time the entity was updated",
          "type": "string"
        },
        "user": {
          "title": "Optional name of user created this entity",
          "type": "string"
        },
        "uuid": {
          "title": "UUID",
          "type": "string"
        },
        "view": {
          "$ref": "#/definitions/SearchView",
          "title": "Optional search view"
        }
      },
      "title": "Search specification",
      "type": "object"
    },
    "v1SearchSpec": {
      "properties": {
        "analytics": {
          "$ref": "#/definitions/v1AnalyticsSpec",
          "title": "Optional analytics specification"
        },
        "columns": {
          "title": "Search columns",
          "type": "string"
        },
        "compares": {
          "title": "Compare Flags",
          "type": "string"
        },
        "events": {
          "$ref": "#/definitions/v1DashboardSpec",
          "title": "Optional events specification"
        },
        "groupby": {
          "title": "Search group bys",
          "type": "string"
        },
        "heat": {
          "title": "Optional heat fields",
          "type": "string"
        },
        "histograms": {
          "title": "Optional histograms specification",
          "type": "object"
        },
        "layout": {
          "title": "Search layout",
          "type": "string"
        },
        "limit": {
          "format": "int32",
          "title": "Limit size",
          "type": "integer"
        },
        "offset": {
          "format": "int32",
          "title": "Offset value",
          "type": "integer"
        },
        "query": {
          "title": "Search query",
          "type": "string"
        },
        "sections": {
          "title": "Search sections",
          "type": "string"
        },
        "sort": {
          "title": "Search sort",
          "type": "string"
        },
        "trends": {
          "title": "Optional trends specification",
          "type": "object"
        }
      },
      "title": "Search spec definition",
      "type": "object"
    },
    "v1SectionSpec": {
      "properties": {
        "columns": {
          "format": "int32",
          "title": "Number of columns",
          "type": "integer"
        },
        "height": {
          "format": "int32",
          "title": "Height",
          "type": "integer"
        },
        "ignore_outliers": {
          "title": "Ignore outliers",
          "type": "boolean"
        },
        "is_frozen": {
          "title": "Freeze",
          "type": "boolean"
        },
        "is_minimized": {
          "title": "Minimize",
          "type": "boolean"
        },
        "name": {
          "title": "Section name",
          "type": "string"
        },
        "page_index": {
          "format": "int32",
          "title": "Page index",
          "type": "integer"
        },
        "page_size": {
          "format": "int32",
          "title": "Page size",
          "type": "integer"
        },
        "sample_size": {
          "format": "int32",
          "title": "Sample size",
          "type": "integer"
        },
        "smoothing": {
          "format": "int32",
          "title": "Smoothing",
          "type": "integer"
        },
        "step": {
          "format": "int32",
          "title": "Step",
          "type": "integer"
        },
        "widgets": {
          "items": {
            "type": "object"
          },
          "title": "Section's widgets",
          "type": "array"
        },
        "xaxis": {
          "title": "xaxis",
          "type": "string"
        }
      },
      "title": "Dashboard section definition",
      "type": "object"
    },
    "v1Service": {
      "properties": {
        "connections": {
          "items": {
            "type": "string"
          },
          "title": "Optional connections section",
          "type": "array"
        },
        "container": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Container",
          "title": "Optional container to notification"
        },
        "environment": {
          "$ref": "#/definitions/v1Environment",
          "title": "Optional environment section"
        },
        "init": {
          "items": {
            "$ref": "#/definitions/v1Init"
          },
          "title": "Optional init connections/containers section",
          "type": "array"
        },
        "isExternal": {
          "description": "Optional flag to signal to Polyaxon that this service should not go through Polyaxon's auth\nDefault is false, the service will be controlled by Polyaxon's auth.",
          "type": "boolean"
        },
        "kind": {
          "default": "service",
          "title": "Optional component kind, should be equal to 'service'",
          "type": "string"
        },
        "ports": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "title": "Optional service section",
          "type": "array"
        },
        "replicas": {
          "format": "int32",
          "title": "Optional value to provision more than a single replica for the service",
          "type": "integer"
        },
        "rewritePath": {
          "description": "Rewrite path to remove polyaxon base url(i.e. /v1/services/namespace/owner/project/).\nDefault is false, the service shoud handle a base url.",
          "type": "boolean"
        },
        "sidecars": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "title": "Optional sidecars section",
          "type": "array"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "type": "array"
        }
      },
      "title": "Service specification",
      "type": "object"
    },
    "v1ServiceAccount": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "description": {
          "title": "Optional description",
          "type": "string"
        },
        "live_state": {
          "format": "int32",
          "title": "Current live state",
          "type": "integer"
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "scopes": {
          "items": {
            "type": "string"
          },
          "title": "Optional scopes allowed for this service account",
          "type": "array"
        },
        "services": {
          "items": {
            "type": "string"
          },
          "title": "Optional services allowed for this service account",
          "type": "array"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "title": "Optional tags of this entity",
          "type": "array"
        },
        "updated_at": {
          "format": "date-time",
          "title": "Optional last time the entity was updated",
          "type": "string"
        },
        "user": {
          "title": "Optional name of user created this entity",
          "type": "string"
        },
        "uuid": {
          "title": "UUID",
          "type": "string"
        }
      },
      "title": "ServiceAccount specification",
      "type": "object"
    },
    "v1SettingsCatalog": {
      "properties": {
        "name": {
          "title": "Name",
          "type": "string"
        },
        "url": {
          "title": "Url",
          "type": "string"
        },
        "uuid": {
          "title": "Uuid",
          "type": "string"
        },
        "version": {
          "title": "Version",
          "type": "string"
        }
      },
      "title": "Settings catalog specification",
      "type": "object"
    },
    "v1Stage": {
      "properties": {
        "stage": {
          "$ref": "#/definitions/v1Stages",
          "title": "The current stage"
        },
        "stage_conditions": {
          "items": {
            "$ref": "#/definitions/v1StageCondition"
          },
          "title": "The stage conditions timeline",
          "type": "array"
        },
        "uuid": {
          "title": "The uuid of the stage",
          "type": "string"
        }
      },
      "title": "Stage specification",
      "type": "object"
    },
    "v1StageCondition": {
      "properties": {
        "last_transition_time": {
          "format": "date-time",
          "title": "last transition time",
          "type": "string"
        },
        "last_update_time": {
          "format": "date-time",
          "title": "last update time",
          "type": "string"
        },
        "message": {
          "title": "Status message",
          "type": "string"
        },
        "meta_info": {
          "title": "Optional meta_info",
          "type": "object"
        },
        "reason": {
          "title": "Status reason",
          "type": "string"
        },
        "status": {
          "title": "Status state",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1Stages",
          "title": "Status type"
        }
      },
      "title": "stage condition specification",
      "type": "object"
    },
    "v1Stages": {
      "default": "testing",
      "enum": [
        "testing",
        "staging",
        "production",
        "disabled"
      ],
      "type": "string"
    },
    "v1Status": {
      "properties": {
        "meta_info": {
          "title": "Additional optional meta_info",
          "type": "object"
        },
        "status": {
          "$ref": "#/definitions/v1Statuses",
          "title": "The current status"
        },
        "status_conditions": {
          "items": {
            "$ref": "#/definitions/v1StatusCondition"
          },
          "title": "The status conditions timeline",
          "type": "array"
        },
        "uuid": {
          "title": "The uuid of the status",
          "type": "string"
        }
      },
      "title": "Status specification",
      "type": "object"
    },
    "v1StatusCondition": {
      "properties": {
        "last_transition_time": {
          "format": "date-time",
          "title": "last transition time",
          "type": "string"
        },
        "last_update_time": {
          "format": "date-time",
          "title": "last update time",
          "type": "string"
        },
        "message": {
          "title": "Status message",
          "type": "string"
        },
        "meta_info": {
          "title": "Optional meta_info",
          "type": "object"
        },
        "reason": {
          "title": "Status reason",
          "type": "string"
        },
        "status": {
          "title": "Status state",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1Statuses",
          "title": "Status type"
        }
      },
      "title": "Status condition specification",
      "type": "object"
    },
    "v1Statuses": {
      "default": "created",
      "enum": [
        "created",
        "resuming",
        "on_schedule",
        "compiled",
        "queued",
        "scheduled",
        "starting",
        "running",
        "processing",
        "stopping",
        "failed",
        "stopped",
        "succeeded",
        "skipped",
        "warning",
        "unschedulable",
        "upstream_failed",
        "retrying",
        "unknown",
        "done"
      ],
      "type": "string"
    },
    "v1TFJob": {
      "properties": {
        "chief": {
          "$ref": "#/definitions/v1KFReplica",
          "title": "Chief replicas definition"
        },
        "cleanPodPolicy": {
          "$ref": "#/definitions/v1CleanPodPolicy",
          "title": "optional clean pod policy section"
        },
        "enableDynamicWorker": {
          "title": "optional flag to enable dynamic worker",
          "type": "boolean"
        },
        "evaluator": {
          "$ref": "#/definitions/v1KFReplica",
          "title": "Evaluator replicas definition"
        },
        "kind": {
          "default": "tfjob",
          "title": "Optional component kind, should be equal to 'tfjob'",
          "type": "string"
        },
        "ps": {
          "$ref": "#/definitions/v1KFReplica",
          "title": "PS replicas definition"
        },
        "schedulingPolicy": {
          "$ref": "#/definitions/v1SchedulingPolicy",
          "title": "optional scheduling policy section"
        },
        "successPolicy": {
          "title": "optiona success policy",
          "type": "string"
        },
        "worker": {
          "$ref": "#/definitions/v1KFReplica",
          "title": "Worker replicas definition"
        }
      },
      "title": "TF Job specification",
      "type": "object"
    },
    "v1Tag": {
      "properties": {
        "color": {
          "title": "Optional Tag color",
          "type": "string"
        },
        "description": {
          "title": "Optional tag description",
          "type": "string"
        },
        "icon": {
          "title": "Optional tag icon",
          "type": "string"
        },
        "name": {
          "title": "Tag name",
          "type": "string"
        },
        "stats": {
          "title": "Optional tag stats",
          "type": "object"
        },
        "user": {
          "title": "Optional name of user created this entity",
          "type": "string"
        },
        "uuid": {
          "title": "UUID",
          "type": "string"
        }
      },
      "title": "Tag specification",
      "type": "object"
    },
    "v1Team": {
      "properties": {
        "component_hubs": {
          "items": {
            "type": "string"
          },
          "title": "hubs",
          "type": "array"
        },
        "created_at": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "model_registries": {
          "items": {
            "type": "string"
          },
          "title": "registries",
          "type": "array"
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "owner": {
          "title": "Owner/namespace where the team was created",
          "type": "string"
        },
        "policy": {
          "title": "Attached policy",
          "type": "string"
        },
        "projects": {
          "items": {
            "type": "string"
          },
          "title": "projects",
          "type": "array"
        },
        "role": {
          "title": "Current user's role in this (org/teams)/project",
          "type": "string"
        },
        "settings": {
          "$ref": "#/definitions/v1TeamSettings",
          "title": "settings"
        },
        "updated_at": {
          "format": "date-time",
          "title": "Optional last time the entity was updated",
          "type": "string"
        },
        "user": {
          "title": "Optional name of user created this entity",
          "type": "string"
        },
        "uuid": {
          "title": "Uuid",
          "type": "string"
        }
      },
      "title": "Team specification",
      "type": "object"
    },
    "v1TeamMember": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "org_role": {
          "title": "Organization Role",
          "type": "string"
        },
        "role": {
          "title": "Role",
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "title": "Optional last time the entity was updated",
          "type": "string"
        },
        "user": {
          "title": "User",
          "type": "string"
        },
        "user_email": {
          "title": "User email",
          "type": "string"
        }
      },
      "title": "Team member specification",
      "type": "object"
    },
    "v1TeamSettings": {
      "properties": {
        "hubs": {
          "items": {
            "$ref": "#/definitions/v1SettingsCatalog"
          },
          "title": "Component hubs",
          "type": "array"
        },
        "projects": {
          "items": {
            "$ref": "#/definitions/v1SettingsCatalog"
          },
          "title": "Projects",
          "type": "array"
        },
        "registries": {
          "items": {
            "$ref": "#/definitions/v1SettingsCatalog"
          },
          "title": "Model registries",
          "type": "array"
        }
      },
      "title": "Team Settings specification",
      "type": "object"
    },
    "v1Template": {
      "properties": {
        "description": {
          "title": "Template description",
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "fields": {
          "items": {
            "type": "string"
          },
          "title": "Fields that require customization",
          "type": "array"
        }
      },
      "title": "Template specification",
      "type": "object"
    },
    "v1TensorboardType": {
      "properties": {
        "path_prefix": {
          "title": "An optional path prefix to use for exposing the service",
          "type": "string"
        },
        "plugins": {
          "title": "An optional comma separated list of plugins to install before starting the tensorboard service",
          "type": "string"
        },
        "port": {
          "format": "int32",
          "title": "Port to expose the tensorboard service",
          "type": "integer"
        },
        "use_names": {
          "title": "A flag to initialize the paths under the operation's names",
          "type": "boolean"
        },
        "uuids": {
          "items": {
            "type": "string"
          },
          "title": "A comma separated list of operation's uuids to load the tensorboard logs from",
          "type": "array"
        }
      },
      "title": "Tensorboard type specification",
      "type": "object"
    },
    "v1Termination": {
      "description": "Termination specification, it defines how to handle failures, job runtime, and cleanup policy.",
      "properties": {
        "maxRetries": {
          "format": "int32",
          "title": "Max retries for a specific run",
          "type": "integer"
        },
        "timeout": {
          "format": "int32",
          "title": "A timeout in seconds",
          "type": "integer"
        },
        "ttl": {
          "format": "int32",
          "title": "A TTL definition",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1Token": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "expiration": {
          "format": "int32",
          "title": "Write only expiration day",
          "type": "integer"
        },
        "expires_at": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "key": {
          "title": "Key",
          "type": "string"
        },
        "name": {
          "title": "Optional token name",
          "type": "string"
        },
        "scopes": {
          "items": {
            "type": "string"
          },
          "title": "Optional scopes allowed for this token",
          "type": "array"
        },
        "services": {
          "items": {
            "type": "string"
          },
          "title": "Optional services allowed for this token",
          "type": "array"
        },
        "started_at": {
          "format": "date-time",
          "title": "Optional time when the entity was created",
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "title": "Optional last time the entity was updated",
          "type": "string"
        },
        "uuid": {
          "title": "UUID",
          "type": "string"
        }
      },
      "title": "Token specification",
      "type": "object"
    },
    "v1Toleration": {
      "title": "Placeholder for Toleration",
      "type": "object"
    },
    "v1TrialStart": {
      "properties": {
        "details": {
          "title": "Details",
          "type": "object"
        },
        "email": {
          "title": "Email",
          "type": "string"
        },
        "name": {
          "title": "name",
          "type": "string"
        },
        "organization": {
          "title": "Organization",
          "type": "string"
        },
        "plan": {
          "title": "Plan",
          "type": "string"
        },
        "seats": {
          "format": "int32",
          "title": "Sets",
          "type": "integer"
        }
      },
      "title": "Trial start",
      "type": "object"
    },
    "v1TriggerPolicy": {
      "default": "all_succeeded",
      "enum": [
        "all_succeeded",
        "all_failed",
        "all_done",
        "one_succeeded",
        "one_failed",
        "one_done"
      ],
      "title": "TriggerPolicy enum",
      "type": "string"
    },
    "v1TruncationStoppingPolicy": {
      "description": "Early stopping with truncation stopping, this policy stops a percentage of\nall running runs at every evaluation.",
      "properties": {
        "evaluationInterval": {
          "description": "Interval/Frequency for applying the policy.",
          "format": "int32",
          "type": "integer"
        },
        "includeSucceeded": {
          "title": "Flag to include or not the succeeded runs in the calculation",
          "type": "boolean"
        },
        "kind": {
          "default": "truncation",
          "title": "Kind of this stopping policy, should be equal to \"truncation\"",
          "type": "string"
        },
        "minInterval": {
          "format": "int32",
          "title": "Min interval (e.g steps) before starting the process",
          "type": "integer"
        },
        "minSamples": {
          "format": "int32",
          "title": "Min samples runs succeeded before starting the process",
          "type": "integer"
        },
        "percent": {
          "description": "The percentage of runs to stop, at each evaluation interval.\ne.g. 1 - 99.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1Tuner": {
      "properties": {
        "hubRef": {
          "title": "Component name to use",
          "type": "string"
        },
        "namespace": {
          "title": "Optional namespace to use, uses agent's namespace by default",
          "type": "string"
        },
        "params": {
          "additionalProperties": {
            "$ref": "#/definitions/v1Param"
          },
          "title": "Optional dict of params",
          "type": "object"
        },
        "presets": {
          "items": {
            "type": "string"
          },
          "title": "Optional list of presets to use for running this tuner",
          "type": "array"
        },
        "queue": {
          "title": "Optional queue to use for scheduling the tuner",
          "type": "string"
        }
      },
      "title": "Tuner definition",
      "type": "object"
    },
    "v1UriType": {
      "properties": {
        "host": {
          "title": "Optional host",
          "type": "boolean"
        },
        "password": {
          "title": "Optional password",
          "type": "string"
        },
        "user": {
          "title": "Optional user",
          "type": "string"
        }
      },
      "title": "Uri type specification",
      "type": "object"
    },
    "v1UrlRef": {
      "properties": {
        "kind": {
          "default": "url_ref",
          "title": "Kind of reference, should be equal to \"url_ref\"",
          "type": "string"
        },
        "url": {
          "title": "Value",
          "type": "string"
        }
      },
      "title": "Url reference specification",
      "type": "object"
    },
    "v1User": {
      "properties": {
        "email": {
          "title": "Email",
          "type": "string"
        },
        "kind": {
          "title": "Kind",
          "type": "string"
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "organization": {
          "title": "Default organization",
          "type": "string"
        },
        "theme": {
          "format": "int32",
          "title": "Theme",
          "type": "integer"
        },
        "username": {
          "title": "Username",
          "type": "string"
        }
      },
      "title": "Auth specification",
      "type": "object"
    },
    "v1UserAccess": {
      "properties": {
        "default_presets": {
          "items": {
            "type": "string"
          },
          "title": "Optional default presets to configure for user",
          "type": "array"
        },
        "default_presets_ordered": {
          "items": {
            "type": "string"
          },
          "title": "Default presets ordered",
          "type": "array"
        },
        "namespace": {
          "title": "Optiona namespace to configure for user",
          "type": "string"
        },
        "queue": {
          "title": "Optional queue to configure for user",
          "type": "string"
        },
        "user": {
          "title": "User to give access to",
          "type": "string"
        },
        "user_data": {
          "$ref": "#/definitions/v1UserAccessData",
          "title": "Optional graph definition"
        }
      },
      "title": "User request",
      "type": "object"
    },
    "v1UserAccessData": {
      "properties": {
        "is_sa": {
          "title": "Is service account",
          "type": "boolean"
        },
        "username": {
          "title": "Username",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1UserEmail": {
      "properties": {
        "email": {
          "title": "User username",
          "type": "string"
        }
      },
      "title": "User email",
      "type": "object"
    },
    "v1UserSingup": {
      "properties": {
        "email": {
          "title": "User email",
          "type": "string"
        },
        "invitation_key": {
          "title": "Invitation key",
          "type": "string"
        },
        "organization": {
          "title": "User organization",
          "type": "string"
        },
        "password": {
          "title": "User password",
          "type": "string"
        },
        "username": {
          "title": "User username",
          "type": "string"
        }
      },
      "title": "User singup",
      "type": "object"
    },
    "v1Uuids": {
      "properties": {
        "uuids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1Validation": {
      "properties": {
        "contains": {
          "items": {
            "type": "object"
          },
          "title": "Generic",
          "type": "array"
        },
        "containsKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "decimalPlaces": {
          "format": "int32",
          "type": "integer"
        },
        "delay": {
          "title": "Validation delay",
          "type": "boolean"
        },
        "excludes": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "excludesKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ge": {
          "format": "int32",
          "type": "integer"
        },
        "gt": {
          "format": "int32",
          "title": "Numeric Constraints (these constraints are also applied item wise for lists and for dict values)",
          "type": "integer"
        },
        "keys": {
          "items": {
            "type": "string"
          },
          "title": "Dict keys Constraints",
          "type": "array"
        },
        "le": {
          "format": "int32",
          "type": "integer"
        },
        "lt": {
          "format": "int32",
          "type": "integer"
        },
        "maxDigits": {
          "format": "int32",
          "type": "integer"
        },
        "maxItems": {
          "format": "int32",
          "type": "integer"
        },
        "maxLength": {
          "format": "int32",
          "type": "integer"
        },
        "minDigits": {
          "format": "int32",
          "title": "Decimal Constraints (these constraints are also applied item wise for lists and for dict values)",
          "type": "integer"
        },
        "minItems": {
          "format": "int32",
          "title": "Items Constraints",
          "type": "integer"
        },
        "minLength": {
          "format": "int32",
          "type": "integer"
        },
        "multipleOf": {
          "format": "int32",
          "type": "integer"
        },
        "options": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "regex": {
          "title": "String Constraints (these constraints are also applied item wise for lists and for dict values)",
          "type": "string"
        }
      },
      "title": "Validation specification based on pydantic",
      "type": "object"
    },
    "v1Version": {
      "properties": {
        "latest": {
          "title": "Latest version",
          "type": "string"
        },
        "min": {
          "title": "Min version",
          "type": "string"
        }
      },
      "title": "Version specification",
      "type": "object"
    },
    "v1Volume": {
      "title": "Placeholder for Volume",
      "type": "object"
    },
    "v1WasbType": {
      "properties": {
        "container": {
          "title": "Optional container",
          "type": "string"
        },
        "path": {
          "title": "Optional path",
          "type": "boolean"
        },
        "storageAccount": {
          "title": "Optional storage_account",
          "type": "string"
        }
      },
      "title": "Wasb type specification",
      "type": "object"
    },
    "v1XGBoostJob": {
      "properties": {
        "cleanPodPolicy": {
          "$ref": "#/definitions/v1CleanPodPolicy",
          "title": "optional clean pod policy section"
        },
        "kind": {
          "default": "xgboostjob",
          "title": "Optional component kind, should be equal to 'xgboostjob'",
          "type": "string"
        },
        "master": {
          "$ref": "#/definitions/v1KFReplica",
          "title": "Master replicas definition"
        },
        "schedulingPolicy": {
          "$ref": "#/definitions/v1SchedulingPolicy",
          "title": "optional scheduling policy section"
        },
        "worker": {
          "$ref": "#/definitions/v1KFReplica",
          "title": "Worker replicas definition"
        }
      },
      "title": "XGBoost Job specification",
      "type": "object"
    }
  },
  "oneOf": [
    {
      "$ref": "#/definitions/v1CompiledOperation"
    },
    {
      "$ref": "#/definitions/v1Operation"
    },
    {
      "$ref": "#/definitions/v1Component"
    }
  ],
  "type": "object"
}
