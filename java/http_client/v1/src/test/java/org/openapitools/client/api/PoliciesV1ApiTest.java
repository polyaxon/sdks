/*
 * Polyaxon SDKs and REST API specification.
 *
 *
 * The version of the OpenAPI document: 2.8.1-rc2
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.RuntimeError;
import org.openapitools.client.model.V1ListPoliciesResponse;
import org.openapitools.client.model.V1Policy;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PoliciesV1Api
 */
@Disabled
public class PoliciesV1ApiTest {

    private final PoliciesV1Api api = new PoliciesV1Api();

    /**
     * Create Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPolicyTest() throws ApiException {
        String owner = null;
        V1Policy body = null;
        V1Policy response = api.createPolicy(owner, body);
        // TODO: test validations
    }

    /**
     * Delete scheduling preset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePolicyTest() throws ApiException {
        String owner = null;
        String uuid = null;
        String entity = null;
        api.deletePolicy(owner, uuid, entity);
        // TODO: test validations
    }

    /**
     * Get Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPolicyTest() throws ApiException {
        String owner = null;
        String uuid = null;
        String entity = null;
        V1Policy response = api.getPolicy(owner, uuid, entity);
        // TODO: test validations
    }

    /**
     * List Policies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPoliciesTest() throws ApiException {
        String owner = null;
        Integer offset = null;
        Integer limit = null;
        String sort = null;
        String query = null;
        Boolean bookmarks = null;
        String mode = null;
        Boolean noPage = null;
        V1ListPoliciesResponse response = api.listPolicies(owner, offset, limit, sort, query, bookmarks, mode, noPage);
        // TODO: test validations
    }

    /**
     * List scheduling policies names
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPolicyNamesTest() throws ApiException {
        String owner = null;
        Integer offset = null;
        Integer limit = null;
        String sort = null;
        String query = null;
        Boolean bookmarks = null;
        String mode = null;
        Boolean noPage = null;
        V1ListPoliciesResponse response = api.listPolicyNames(owner, offset, limit, sort, query, bookmarks, mode, noPage);
        // TODO: test validations
    }

    /**
     * Patch Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchPolicyTest() throws ApiException {
        String owner = null;
        String policyUuid = null;
        V1Policy body = null;
        V1Policy response = api.patchPolicy(owner, policyUuid, body);
        // TODO: test validations
    }

    /**
     * Update Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePolicyTest() throws ApiException {
        String owner = null;
        String policyUuid = null;
        V1Policy body = null;
        V1Policy response = api.updatePolicy(owner, policyUuid, body);
        // TODO: test validations
    }

}
