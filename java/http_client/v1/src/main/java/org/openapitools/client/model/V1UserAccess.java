/*
 * Polyaxon SDKs and REST API specification.
 *
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.V1UserAccessData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V1UserAccess
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class V1UserAccess {
  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_USER_DATA = "user_data";
  @SerializedName(SERIALIZED_NAME_USER_DATA)
  private V1UserAccessData userData;

  public static final String SERIALIZED_NAME_QUEUE = "queue";
  @SerializedName(SERIALIZED_NAME_QUEUE)
  private String queue;

  public static final String SERIALIZED_NAME_DEFAULT_PRESETS = "default_presets";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PRESETS)
  private List<String> defaultPresets;

  public static final String SERIALIZED_NAME_DEFAULT_PRESETS_ORDERED = "default_presets_ordered";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PRESETS_ORDERED)
  private List<String> defaultPresetsOrdered;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public V1UserAccess() {
  }

  public V1UserAccess user(String user) {

    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable

  public String getUser() {
    return user;
  }


  public void setUser(String user) {
    this.user = user;
  }


  public V1UserAccess userData(V1UserAccessData userData) {

    this.userData = userData;
    return this;
  }

   /**
   * Get userData
   * @return userData
  **/
  @javax.annotation.Nullable

  public V1UserAccessData getUserData() {
    return userData;
  }


  public void setUserData(V1UserAccessData userData) {
    this.userData = userData;
  }


  public V1UserAccess queue(String queue) {

    this.queue = queue;
    return this;
  }

   /**
   * Get queue
   * @return queue
  **/
  @javax.annotation.Nullable

  public String getQueue() {
    return queue;
  }


  public void setQueue(String queue) {
    this.queue = queue;
  }


  public V1UserAccess defaultPresets(List<String> defaultPresets) {

    this.defaultPresets = defaultPresets;
    return this;
  }

  public V1UserAccess addDefaultPresetsItem(String defaultPresetsItem) {
    if (this.defaultPresets == null) {
      this.defaultPresets = new ArrayList<>();
    }
    this.defaultPresets.add(defaultPresetsItem);
    return this;
  }

   /**
   * Get defaultPresets
   * @return defaultPresets
  **/
  @javax.annotation.Nullable

  public List<String> getDefaultPresets() {
    return defaultPresets;
  }


  public void setDefaultPresets(List<String> defaultPresets) {
    this.defaultPresets = defaultPresets;
  }


  public V1UserAccess defaultPresetsOrdered(List<String> defaultPresetsOrdered) {

    this.defaultPresetsOrdered = defaultPresetsOrdered;
    return this;
  }

  public V1UserAccess addDefaultPresetsOrderedItem(String defaultPresetsOrderedItem) {
    if (this.defaultPresetsOrdered == null) {
      this.defaultPresetsOrdered = new ArrayList<>();
    }
    this.defaultPresetsOrdered.add(defaultPresetsOrderedItem);
    return this;
  }

   /**
   * Get defaultPresetsOrdered
   * @return defaultPresetsOrdered
  **/
  @javax.annotation.Nullable

  public List<String> getDefaultPresetsOrdered() {
    return defaultPresetsOrdered;
  }


  public void setDefaultPresetsOrdered(List<String> defaultPresetsOrdered) {
    this.defaultPresetsOrdered = defaultPresetsOrdered;
  }


  public V1UserAccess namespace(String namespace) {

    this.namespace = namespace;
    return this;
  }

   /**
   * Get namespace
   * @return namespace
  **/
  @javax.annotation.Nullable

  public String getNamespace() {
    return namespace;
  }


  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1UserAccess v1UserAccess = (V1UserAccess) o;
    return Objects.equals(this.user, v1UserAccess.user) &&
        Objects.equals(this.userData, v1UserAccess.userData) &&
        Objects.equals(this.queue, v1UserAccess.queue) &&
        Objects.equals(this.defaultPresets, v1UserAccess.defaultPresets) &&
        Objects.equals(this.defaultPresetsOrdered, v1UserAccess.defaultPresetsOrdered) &&
        Objects.equals(this.namespace, v1UserAccess.namespace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(user, userData, queue, defaultPresets, defaultPresetsOrdered, namespace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1UserAccess {\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userData: ").append(toIndentedString(userData)).append("\n");
    sb.append("    queue: ").append(toIndentedString(queue)).append("\n");
    sb.append("    defaultPresets: ").append(toIndentedString(defaultPresets)).append("\n");
    sb.append("    defaultPresetsOrdered: ").append(toIndentedString(defaultPresetsOrdered)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("user");
    openapiFields.add("user_data");
    openapiFields.add("queue");
    openapiFields.add("default_presets");
    openapiFields.add("default_presets_ordered");
    openapiFields.add("namespace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1UserAccess
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!V1UserAccess.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1UserAccess is not found in the empty JSON string", V1UserAccess.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1UserAccess.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1UserAccess` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      // validate the optional field `user_data`
      if (jsonObj.get("user_data") != null && !jsonObj.get("user_data").isJsonNull()) {
        V1UserAccessData.validateJsonObject(jsonObj.getAsJsonObject("user_data"));
      }
      if ((jsonObj.get("queue") != null && !jsonObj.get("queue").isJsonNull()) && !jsonObj.get("queue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queue").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("default_presets") != null && !jsonObj.get("default_presets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_presets` to be an array in the JSON string but got `%s`", jsonObj.get("default_presets").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("default_presets_ordered") != null && !jsonObj.get("default_presets_ordered").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_presets_ordered` to be an array in the JSON string but got `%s`", jsonObj.get("default_presets_ordered").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1UserAccess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1UserAccess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1UserAccess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1UserAccess.class));

       return (TypeAdapter<T>) new TypeAdapter<V1UserAccess>() {
           @Override
           public void write(JsonWriter out, V1UserAccess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1UserAccess read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1UserAccess given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1UserAccess
  * @throws IOException if the JSON string is invalid with respect to V1UserAccess
  */
  public static V1UserAccess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1UserAccess.class);
  }

 /**
  * Convert an instance of V1UserAccess to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

