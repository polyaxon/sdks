// Code generated by go-swagger; DO NOT EDIT.

package organizations_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOrganizationSettingsParams creates a new GetOrganizationSettingsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOrganizationSettingsParams() *GetOrganizationSettingsParams {
	return &GetOrganizationSettingsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrganizationSettingsParamsWithTimeout creates a new GetOrganizationSettingsParams object
// with the ability to set a timeout on a request.
func NewGetOrganizationSettingsParamsWithTimeout(timeout time.Duration) *GetOrganizationSettingsParams {
	return &GetOrganizationSettingsParams{
		timeout: timeout,
	}
}

// NewGetOrganizationSettingsParamsWithContext creates a new GetOrganizationSettingsParams object
// with the ability to set a context for a request.
func NewGetOrganizationSettingsParamsWithContext(ctx context.Context) *GetOrganizationSettingsParams {
	return &GetOrganizationSettingsParams{
		Context: ctx,
	}
}

// NewGetOrganizationSettingsParamsWithHTTPClient creates a new GetOrganizationSettingsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOrganizationSettingsParamsWithHTTPClient(client *http.Client) *GetOrganizationSettingsParams {
	return &GetOrganizationSettingsParams{
		HTTPClient: client,
	}
}

/*
GetOrganizationSettingsParams contains all the parameters to send to the API endpoint

	for the get organization settings operation.

	Typically these are written to a http.Request.
*/
type GetOrganizationSettingsParams struct {

	/* OrganizationArchivedDeletionInterval.

	   Setting to configure default archived deletion interval.

	   Format: int32
	*/
	OrganizationArchivedDeletionInterval *int32

	/* OrganizationCreatedAt.

	   Optional time when the entity was created.

	   Format: date-time
	*/
	OrganizationCreatedAt *strfmt.DateTime

	/* OrganizationDefaultPresets.

	   Default presets.
	*/
	OrganizationDefaultPresets []string

	/* OrganizationDefaultPresetsOrdered.

	   Default presets ordered.
	*/
	OrganizationDefaultPresetsOrdered []string

	/* OrganizationExpiration.

	   Optional expiration for support.

	   Format: int32
	*/
	OrganizationExpiration *int32

	/* OrganizationIsCloudViewable.

	   Setting to enable viewable metadata on cloud.
	*/
	OrganizationIsCloudViewable *bool

	/* OrganizationIsPublic.

	   Optional flag to tell if this organization is public.
	*/
	OrganizationIsPublic *bool

	/* OrganizationName.

	   Name.
	*/
	OrganizationName *string

	/* OrganizationQueue.

	   Default queue.
	*/
	OrganizationQueue *string

	/* OrganizationRole.

	   Current user's role in this org.
	*/
	OrganizationRole *string

	/* OrganizationSupportRevokeAt.

	   Optional time to revoke support access.

	   Format: date-time
	*/
	OrganizationSupportRevokeAt *strfmt.DateTime

	/* OrganizationUpdatedAt.

	   Optional last time the entity was updated.

	   Format: date-time
	*/
	OrganizationUpdatedAt *strfmt.DateTime

	/* OrganizationUser.

	   User.
	*/
	OrganizationUser *string

	/* OrganizationUserEmail.

	   Read-only User email.
	*/
	OrganizationUserEmail *string

	/* Owner.

	   Owner of the namespace
	*/
	Owner string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get organization settings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationSettingsParams) WithDefaults() *GetOrganizationSettingsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get organization settings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationSettingsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get organization settings params
func (o *GetOrganizationSettingsParams) WithTimeout(timeout time.Duration) *GetOrganizationSettingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get organization settings params
func (o *GetOrganizationSettingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get organization settings params
func (o *GetOrganizationSettingsParams) WithContext(ctx context.Context) *GetOrganizationSettingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get organization settings params
func (o *GetOrganizationSettingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get organization settings params
func (o *GetOrganizationSettingsParams) WithHTTPClient(client *http.Client) *GetOrganizationSettingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get organization settings params
func (o *GetOrganizationSettingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrganizationArchivedDeletionInterval adds the organizationArchivedDeletionInterval to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationArchivedDeletionInterval(organizationArchivedDeletionInterval *int32) *GetOrganizationSettingsParams {
	o.SetOrganizationArchivedDeletionInterval(organizationArchivedDeletionInterval)
	return o
}

// SetOrganizationArchivedDeletionInterval adds the organizationArchivedDeletionInterval to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationArchivedDeletionInterval(organizationArchivedDeletionInterval *int32) {
	o.OrganizationArchivedDeletionInterval = organizationArchivedDeletionInterval
}

// WithOrganizationCreatedAt adds the organizationCreatedAt to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationCreatedAt(organizationCreatedAt *strfmt.DateTime) *GetOrganizationSettingsParams {
	o.SetOrganizationCreatedAt(organizationCreatedAt)
	return o
}

// SetOrganizationCreatedAt adds the organizationCreatedAt to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationCreatedAt(organizationCreatedAt *strfmt.DateTime) {
	o.OrganizationCreatedAt = organizationCreatedAt
}

// WithOrganizationDefaultPresets adds the organizationDefaultPresets to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationDefaultPresets(organizationDefaultPresets []string) *GetOrganizationSettingsParams {
	o.SetOrganizationDefaultPresets(organizationDefaultPresets)
	return o
}

// SetOrganizationDefaultPresets adds the organizationDefaultPresets to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationDefaultPresets(organizationDefaultPresets []string) {
	o.OrganizationDefaultPresets = organizationDefaultPresets
}

// WithOrganizationDefaultPresetsOrdered adds the organizationDefaultPresetsOrdered to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationDefaultPresetsOrdered(organizationDefaultPresetsOrdered []string) *GetOrganizationSettingsParams {
	o.SetOrganizationDefaultPresetsOrdered(organizationDefaultPresetsOrdered)
	return o
}

// SetOrganizationDefaultPresetsOrdered adds the organizationDefaultPresetsOrdered to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationDefaultPresetsOrdered(organizationDefaultPresetsOrdered []string) {
	o.OrganizationDefaultPresetsOrdered = organizationDefaultPresetsOrdered
}

// WithOrganizationExpiration adds the organizationExpiration to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationExpiration(organizationExpiration *int32) *GetOrganizationSettingsParams {
	o.SetOrganizationExpiration(organizationExpiration)
	return o
}

// SetOrganizationExpiration adds the organizationExpiration to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationExpiration(organizationExpiration *int32) {
	o.OrganizationExpiration = organizationExpiration
}

// WithOrganizationIsCloudViewable adds the organizationIsCloudViewable to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationIsCloudViewable(organizationIsCloudViewable *bool) *GetOrganizationSettingsParams {
	o.SetOrganizationIsCloudViewable(organizationIsCloudViewable)
	return o
}

// SetOrganizationIsCloudViewable adds the organizationIsCloudViewable to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationIsCloudViewable(organizationIsCloudViewable *bool) {
	o.OrganizationIsCloudViewable = organizationIsCloudViewable
}

// WithOrganizationIsPublic adds the organizationIsPublic to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationIsPublic(organizationIsPublic *bool) *GetOrganizationSettingsParams {
	o.SetOrganizationIsPublic(organizationIsPublic)
	return o
}

// SetOrganizationIsPublic adds the organizationIsPublic to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationIsPublic(organizationIsPublic *bool) {
	o.OrganizationIsPublic = organizationIsPublic
}

// WithOrganizationName adds the organizationName to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationName(organizationName *string) *GetOrganizationSettingsParams {
	o.SetOrganizationName(organizationName)
	return o
}

// SetOrganizationName adds the organizationName to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationName(organizationName *string) {
	o.OrganizationName = organizationName
}

// WithOrganizationQueue adds the organizationQueue to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationQueue(organizationQueue *string) *GetOrganizationSettingsParams {
	o.SetOrganizationQueue(organizationQueue)
	return o
}

// SetOrganizationQueue adds the organizationQueue to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationQueue(organizationQueue *string) {
	o.OrganizationQueue = organizationQueue
}

// WithOrganizationRole adds the organizationRole to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationRole(organizationRole *string) *GetOrganizationSettingsParams {
	o.SetOrganizationRole(organizationRole)
	return o
}

// SetOrganizationRole adds the organizationRole to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationRole(organizationRole *string) {
	o.OrganizationRole = organizationRole
}

// WithOrganizationSupportRevokeAt adds the organizationSupportRevokeAt to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationSupportRevokeAt(organizationSupportRevokeAt *strfmt.DateTime) *GetOrganizationSettingsParams {
	o.SetOrganizationSupportRevokeAt(organizationSupportRevokeAt)
	return o
}

// SetOrganizationSupportRevokeAt adds the organizationSupportRevokeAt to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationSupportRevokeAt(organizationSupportRevokeAt *strfmt.DateTime) {
	o.OrganizationSupportRevokeAt = organizationSupportRevokeAt
}

// WithOrganizationUpdatedAt adds the organizationUpdatedAt to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationUpdatedAt(organizationUpdatedAt *strfmt.DateTime) *GetOrganizationSettingsParams {
	o.SetOrganizationUpdatedAt(organizationUpdatedAt)
	return o
}

// SetOrganizationUpdatedAt adds the organizationUpdatedAt to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationUpdatedAt(organizationUpdatedAt *strfmt.DateTime) {
	o.OrganizationUpdatedAt = organizationUpdatedAt
}

// WithOrganizationUser adds the organizationUser to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationUser(organizationUser *string) *GetOrganizationSettingsParams {
	o.SetOrganizationUser(organizationUser)
	return o
}

// SetOrganizationUser adds the organizationUser to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationUser(organizationUser *string) {
	o.OrganizationUser = organizationUser
}

// WithOrganizationUserEmail adds the organizationUserEmail to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOrganizationUserEmail(organizationUserEmail *string) *GetOrganizationSettingsParams {
	o.SetOrganizationUserEmail(organizationUserEmail)
	return o
}

// SetOrganizationUserEmail adds the organizationUserEmail to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOrganizationUserEmail(organizationUserEmail *string) {
	o.OrganizationUserEmail = organizationUserEmail
}

// WithOwner adds the owner to the get organization settings params
func (o *GetOrganizationSettingsParams) WithOwner(owner string) *GetOrganizationSettingsParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the get organization settings params
func (o *GetOrganizationSettingsParams) SetOwner(owner string) {
	o.Owner = owner
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrganizationSettingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.OrganizationArchivedDeletionInterval != nil {

		// query param organization.archived_deletion_interval
		var qrOrganizationArchivedDeletionInterval int32

		if o.OrganizationArchivedDeletionInterval != nil {
			qrOrganizationArchivedDeletionInterval = *o.OrganizationArchivedDeletionInterval
		}
		qOrganizationArchivedDeletionInterval := swag.FormatInt32(qrOrganizationArchivedDeletionInterval)
		if qOrganizationArchivedDeletionInterval != "" {

			if err := r.SetQueryParam("organization.archived_deletion_interval", qOrganizationArchivedDeletionInterval); err != nil {
				return err
			}
		}
	}

	if o.OrganizationCreatedAt != nil {

		// query param organization.created_at
		var qrOrganizationCreatedAt strfmt.DateTime

		if o.OrganizationCreatedAt != nil {
			qrOrganizationCreatedAt = *o.OrganizationCreatedAt
		}
		qOrganizationCreatedAt := qrOrganizationCreatedAt.String()
		if qOrganizationCreatedAt != "" {

			if err := r.SetQueryParam("organization.created_at", qOrganizationCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.OrganizationDefaultPresets != nil {

		// binding items for organization.default_presets
		joinedOrganizationDefaultPresets := o.bindParamOrganizationDefaultPresets(reg)

		// query array param organization.default_presets
		if err := r.SetQueryParam("organization.default_presets", joinedOrganizationDefaultPresets...); err != nil {
			return err
		}
	}

	if o.OrganizationDefaultPresetsOrdered != nil {

		// binding items for organization.default_presets_ordered
		joinedOrganizationDefaultPresetsOrdered := o.bindParamOrganizationDefaultPresetsOrdered(reg)

		// query array param organization.default_presets_ordered
		if err := r.SetQueryParam("organization.default_presets_ordered", joinedOrganizationDefaultPresetsOrdered...); err != nil {
			return err
		}
	}

	if o.OrganizationExpiration != nil {

		// query param organization.expiration
		var qrOrganizationExpiration int32

		if o.OrganizationExpiration != nil {
			qrOrganizationExpiration = *o.OrganizationExpiration
		}
		qOrganizationExpiration := swag.FormatInt32(qrOrganizationExpiration)
		if qOrganizationExpiration != "" {

			if err := r.SetQueryParam("organization.expiration", qOrganizationExpiration); err != nil {
				return err
			}
		}
	}

	if o.OrganizationIsCloudViewable != nil {

		// query param organization.is_cloud_viewable
		var qrOrganizationIsCloudViewable bool

		if o.OrganizationIsCloudViewable != nil {
			qrOrganizationIsCloudViewable = *o.OrganizationIsCloudViewable
		}
		qOrganizationIsCloudViewable := swag.FormatBool(qrOrganizationIsCloudViewable)
		if qOrganizationIsCloudViewable != "" {

			if err := r.SetQueryParam("organization.is_cloud_viewable", qOrganizationIsCloudViewable); err != nil {
				return err
			}
		}
	}

	if o.OrganizationIsPublic != nil {

		// query param organization.is_public
		var qrOrganizationIsPublic bool

		if o.OrganizationIsPublic != nil {
			qrOrganizationIsPublic = *o.OrganizationIsPublic
		}
		qOrganizationIsPublic := swag.FormatBool(qrOrganizationIsPublic)
		if qOrganizationIsPublic != "" {

			if err := r.SetQueryParam("organization.is_public", qOrganizationIsPublic); err != nil {
				return err
			}
		}
	}

	if o.OrganizationName != nil {

		// query param organization.name
		var qrOrganizationName string

		if o.OrganizationName != nil {
			qrOrganizationName = *o.OrganizationName
		}
		qOrganizationName := qrOrganizationName
		if qOrganizationName != "" {

			if err := r.SetQueryParam("organization.name", qOrganizationName); err != nil {
				return err
			}
		}
	}

	if o.OrganizationQueue != nil {

		// query param organization.queue
		var qrOrganizationQueue string

		if o.OrganizationQueue != nil {
			qrOrganizationQueue = *o.OrganizationQueue
		}
		qOrganizationQueue := qrOrganizationQueue
		if qOrganizationQueue != "" {

			if err := r.SetQueryParam("organization.queue", qOrganizationQueue); err != nil {
				return err
			}
		}
	}

	if o.OrganizationRole != nil {

		// query param organization.role
		var qrOrganizationRole string

		if o.OrganizationRole != nil {
			qrOrganizationRole = *o.OrganizationRole
		}
		qOrganizationRole := qrOrganizationRole
		if qOrganizationRole != "" {

			if err := r.SetQueryParam("organization.role", qOrganizationRole); err != nil {
				return err
			}
		}
	}

	if o.OrganizationSupportRevokeAt != nil {

		// query param organization.support_revoke_at
		var qrOrganizationSupportRevokeAt strfmt.DateTime

		if o.OrganizationSupportRevokeAt != nil {
			qrOrganizationSupportRevokeAt = *o.OrganizationSupportRevokeAt
		}
		qOrganizationSupportRevokeAt := qrOrganizationSupportRevokeAt.String()
		if qOrganizationSupportRevokeAt != "" {

			if err := r.SetQueryParam("organization.support_revoke_at", qOrganizationSupportRevokeAt); err != nil {
				return err
			}
		}
	}

	if o.OrganizationUpdatedAt != nil {

		// query param organization.updated_at
		var qrOrganizationUpdatedAt strfmt.DateTime

		if o.OrganizationUpdatedAt != nil {
			qrOrganizationUpdatedAt = *o.OrganizationUpdatedAt
		}
		qOrganizationUpdatedAt := qrOrganizationUpdatedAt.String()
		if qOrganizationUpdatedAt != "" {

			if err := r.SetQueryParam("organization.updated_at", qOrganizationUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.OrganizationUser != nil {

		// query param organization.user
		var qrOrganizationUser string

		if o.OrganizationUser != nil {
			qrOrganizationUser = *o.OrganizationUser
		}
		qOrganizationUser := qrOrganizationUser
		if qOrganizationUser != "" {

			if err := r.SetQueryParam("organization.user", qOrganizationUser); err != nil {
				return err
			}
		}
	}

	if o.OrganizationUserEmail != nil {

		// query param organization.user_email
		var qrOrganizationUserEmail string

		if o.OrganizationUserEmail != nil {
			qrOrganizationUserEmail = *o.OrganizationUserEmail
		}
		qOrganizationUserEmail := qrOrganizationUserEmail
		if qOrganizationUserEmail != "" {

			if err := r.SetQueryParam("organization.user_email", qOrganizationUserEmail); err != nil {
				return err
			}
		}
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetOrganizationSettings binds the parameter organization.default_presets
func (o *GetOrganizationSettingsParams) bindParamOrganizationDefaultPresets(formats strfmt.Registry) []string {
	organizationDefaultPresetsIR := o.OrganizationDefaultPresets

	var organizationDefaultPresetsIC []string
	for _, organizationDefaultPresetsIIR := range organizationDefaultPresetsIR { // explode []string

		organizationDefaultPresetsIIV := organizationDefaultPresetsIIR // string as string
		organizationDefaultPresetsIC = append(organizationDefaultPresetsIC, organizationDefaultPresetsIIV)
	}

	// items.CollectionFormat: "multi"
	organizationDefaultPresetsIS := swag.JoinByFormat(organizationDefaultPresetsIC, "multi")

	return organizationDefaultPresetsIS
}

// bindParamGetOrganizationSettings binds the parameter organization.default_presets_ordered
func (o *GetOrganizationSettingsParams) bindParamOrganizationDefaultPresetsOrdered(formats strfmt.Registry) []string {
	organizationDefaultPresetsOrderedIR := o.OrganizationDefaultPresetsOrdered

	var organizationDefaultPresetsOrderedIC []string
	for _, organizationDefaultPresetsOrderedIIR := range organizationDefaultPresetsOrderedIR { // explode []string

		organizationDefaultPresetsOrderedIIV := organizationDefaultPresetsOrderedIIR // string as string
		organizationDefaultPresetsOrderedIC = append(organizationDefaultPresetsOrderedIC, organizationDefaultPresetsOrderedIIV)
	}

	// items.CollectionFormat: "multi"
	organizationDefaultPresetsOrderedIS := swag.JoinByFormat(organizationDefaultPresetsOrderedIC, "multi")

	return organizationDefaultPresetsOrderedIS
}
