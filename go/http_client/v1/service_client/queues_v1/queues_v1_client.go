// Code generated by go-swagger; DO NOT EDIT.

package queues_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new queues v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for queues v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateQueue(params *CreateQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateQueueOK, *CreateQueueNoContent, error)

	DeleteQueue(params *DeleteQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteQueueOK, *DeleteQueueNoContent, error)

	GetQueue(params *GetQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQueueOK, *GetQueueNoContent, error)

	GetQueueStats(params *GetQueueStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQueueStatsOK, *GetQueueStatsNoContent, error)

	ListOrganizationQueueNames(params *ListOrganizationQueueNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrganizationQueueNamesOK, *ListOrganizationQueueNamesNoContent, error)

	ListOrganizationQueues(params *ListOrganizationQueuesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrganizationQueuesOK, *ListOrganizationQueuesNoContent, error)

	ListQueueNames(params *ListQueueNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListQueueNamesOK, *ListQueueNamesNoContent, error)

	ListQueues(params *ListQueuesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListQueuesOK, *ListQueuesNoContent, error)

	PatchQueue(params *PatchQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchQueueOK, *PatchQueueNoContent, error)

	UpdateQueue(params *UpdateQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateQueueOK, *UpdateQueueNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateQueue creates queue
*/
func (a *Client) CreateQueue(params *CreateQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateQueueOK, *CreateQueueNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateQueue",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{agent}/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateQueueOK:
		return value, nil, nil
	case *CreateQueueNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateQueueDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteQueue deletes queue
*/
func (a *Client) DeleteQueue(params *DeleteQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteQueueOK, *DeleteQueueNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteQueue",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{entity}/queues/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteQueueOK:
		return value, nil, nil
	case *DeleteQueueNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteQueueDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetQueue gets queue
*/
func (a *Client) GetQueue(params *GetQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQueueOK, *GetQueueNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetQueue",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{entity}/queues/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetQueueOK:
		return value, nil, nil
	case *GetQueueNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetQueueDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetQueueStats gets queue stats
*/
func (a *Client) GetQueueStats(params *GetQueueStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQueueStatsOK, *GetQueueStatsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQueueStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetQueueStats",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{entity}/queues/{uuid}/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetQueueStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetQueueStatsOK:
		return value, nil, nil
	case *GetQueueStatsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetQueueStatsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListOrganizationQueueNames lists organization level queues names
*/
func (a *Client) ListOrganizationQueueNames(params *ListOrganizationQueueNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrganizationQueueNamesOK, *ListOrganizationQueueNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOrganizationQueueNamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListOrganizationQueueNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/queues/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListOrganizationQueueNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListOrganizationQueueNamesOK:
		return value, nil, nil
	case *ListOrganizationQueueNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListOrganizationQueueNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListOrganizationQueues lists organization level queues
*/
func (a *Client) ListOrganizationQueues(params *ListOrganizationQueuesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrganizationQueuesOK, *ListOrganizationQueuesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOrganizationQueuesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListOrganizationQueues",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListOrganizationQueuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListOrganizationQueuesOK:
		return value, nil, nil
	case *ListOrganizationQueuesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListOrganizationQueuesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListQueueNames lists queues names
*/
func (a *Client) ListQueueNames(params *ListQueueNamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListQueueNamesOK, *ListQueueNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListQueueNamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListQueueNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{name}/queues/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListQueueNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListQueueNamesOK:
		return value, nil, nil
	case *ListQueueNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListQueueNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListQueues lists queues
*/
func (a *Client) ListQueues(params *ListQueuesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListQueuesOK, *ListQueuesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListQueuesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListQueues",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{name}/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListQueuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListQueuesOK:
		return value, nil, nil
	case *ListQueuesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListQueuesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchQueue patches queue
*/
func (a *Client) PatchQueue(params *PatchQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchQueueOK, *PatchQueueNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchQueue",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{agent}/queues/{queue.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchQueueOK:
		return value, nil, nil
	case *PatchQueueNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchQueueDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateQueue updates queue
*/
func (a *Client) UpdateQueue(params *UpdateQueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateQueueOK, *UpdateQueueNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateQueue",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{agent}/queues/{queue.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateQueueOK:
		return value, nil, nil
	case *UpdateQueueNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateQueueDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
