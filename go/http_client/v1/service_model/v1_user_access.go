// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1UserAccess User request
//
// swagger:model v1UserAccess
type V1UserAccess struct {

	// Optional default presets to configure for user
	DefaultPresets []string `json:"default_presets"`

	// Default presets ordered
	DefaultPresetsOrdered []string `json:"default_presets_ordered"`

	// Optiona namespace to configure for user
	Namespace string `json:"namespace,omitempty"`

	// Optional queue to configure for user
	Queue string `json:"queue,omitempty"`

	// User to give access to
	User string `json:"user,omitempty"`

	// Optional graph definition
	UserData *V1UserAccessData `json:"user_data,omitempty"`
}

// Validate validates this v1 user access
func (m *V1UserAccess) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1UserAccess) validateUserData(formats strfmt.Registry) error {
	if swag.IsZero(m.UserData) { // not required
		return nil
	}

	if m.UserData != nil {
		if err := m.UserData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 user access based on the context it is used
func (m *V1UserAccess) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1UserAccess) contextValidateUserData(ctx context.Context, formats strfmt.Registry) error {

	if m.UserData != nil {

		if swag.IsZero(m.UserData) { // not required
			return nil
		}

		if err := m.UserData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1UserAccess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1UserAccess) UnmarshalBinary(b []byte) error {
	var res V1UserAccess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
