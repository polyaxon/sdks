// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1RunSchema v1 run schema
//
// swagger:model v1RunSchema
type V1RunSchema struct {

	// dag
	Dag *V1Dag `json:"dag,omitempty"`

	// dask job
	DaskJob *V1DaskJob `json:"daskJob,omitempty"`

	// job
	Job *V1Job `json:"job,omitempty"`

	// mpi job
	MpiJob *V1MPIJob `json:"mpiJob,omitempty"`

	// pytorch job
	PytorchJob *V1PytorchJob `json:"pytorchJob,omitempty"`

	// ray job
	RayJob *V1RayJob `json:"rayJob,omitempty"`

	// service
	Service *V1Service `json:"service,omitempty"`

	// tf job
	TfJob *V1TFJob `json:"tfJob,omitempty"`
}

// Validate validates this v1 run schema
func (m *V1RunSchema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaskJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMpiJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePytorchJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRayJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTfJob(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1RunSchema) validateDag(formats strfmt.Registry) error {
	if swag.IsZero(m.Dag) { // not required
		return nil
	}

	if m.Dag != nil {
		if err := m.Dag.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dag")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dag")
			}
			return err
		}
	}

	return nil
}

func (m *V1RunSchema) validateDaskJob(formats strfmt.Registry) error {
	if swag.IsZero(m.DaskJob) { // not required
		return nil
	}

	if m.DaskJob != nil {
		if err := m.DaskJob.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("daskJob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("daskJob")
			}
			return err
		}
	}

	return nil
}

func (m *V1RunSchema) validateJob(formats strfmt.Registry) error {
	if swag.IsZero(m.Job) { // not required
		return nil
	}

	if m.Job != nil {
		if err := m.Job.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job")
			}
			return err
		}
	}

	return nil
}

func (m *V1RunSchema) validateMpiJob(formats strfmt.Registry) error {
	if swag.IsZero(m.MpiJob) { // not required
		return nil
	}

	if m.MpiJob != nil {
		if err := m.MpiJob.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mpiJob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mpiJob")
			}
			return err
		}
	}

	return nil
}

func (m *V1RunSchema) validatePytorchJob(formats strfmt.Registry) error {
	if swag.IsZero(m.PytorchJob) { // not required
		return nil
	}

	if m.PytorchJob != nil {
		if err := m.PytorchJob.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pytorchJob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pytorchJob")
			}
			return err
		}
	}

	return nil
}

func (m *V1RunSchema) validateRayJob(formats strfmt.Registry) error {
	if swag.IsZero(m.RayJob) { // not required
		return nil
	}

	if m.RayJob != nil {
		if err := m.RayJob.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rayJob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rayJob")
			}
			return err
		}
	}

	return nil
}

func (m *V1RunSchema) validateService(formats strfmt.Registry) error {
	if swag.IsZero(m.Service) { // not required
		return nil
	}

	if m.Service != nil {
		if err := m.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service")
			}
			return err
		}
	}

	return nil
}

func (m *V1RunSchema) validateTfJob(formats strfmt.Registry) error {
	if swag.IsZero(m.TfJob) { // not required
		return nil
	}

	if m.TfJob != nil {
		if err := m.TfJob.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tfJob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tfJob")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 run schema based on the context it is used
func (m *V1RunSchema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDaskJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMpiJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePytorchJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRayJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTfJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1RunSchema) contextValidateDag(ctx context.Context, formats strfmt.Registry) error {

	if m.Dag != nil {

		if swag.IsZero(m.Dag) { // not required
			return nil
		}

		if err := m.Dag.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dag")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dag")
			}
			return err
		}
	}

	return nil
}

func (m *V1RunSchema) contextValidateDaskJob(ctx context.Context, formats strfmt.Registry) error {

	if m.DaskJob != nil {

		if swag.IsZero(m.DaskJob) { // not required
			return nil
		}

		if err := m.DaskJob.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("daskJob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("daskJob")
			}
			return err
		}
	}

	return nil
}

func (m *V1RunSchema) contextValidateJob(ctx context.Context, formats strfmt.Registry) error {

	if m.Job != nil {

		if swag.IsZero(m.Job) { // not required
			return nil
		}

		if err := m.Job.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job")
			}
			return err
		}
	}

	return nil
}

func (m *V1RunSchema) contextValidateMpiJob(ctx context.Context, formats strfmt.Registry) error {

	if m.MpiJob != nil {

		if swag.IsZero(m.MpiJob) { // not required
			return nil
		}

		if err := m.MpiJob.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mpiJob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mpiJob")
			}
			return err
		}
	}

	return nil
}

func (m *V1RunSchema) contextValidatePytorchJob(ctx context.Context, formats strfmt.Registry) error {

	if m.PytorchJob != nil {

		if swag.IsZero(m.PytorchJob) { // not required
			return nil
		}

		if err := m.PytorchJob.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pytorchJob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pytorchJob")
			}
			return err
		}
	}

	return nil
}

func (m *V1RunSchema) contextValidateRayJob(ctx context.Context, formats strfmt.Registry) error {

	if m.RayJob != nil {

		if swag.IsZero(m.RayJob) { // not required
			return nil
		}

		if err := m.RayJob.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rayJob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rayJob")
			}
			return err
		}
	}

	return nil
}

func (m *V1RunSchema) contextValidateService(ctx context.Context, formats strfmt.Registry) error {

	if m.Service != nil {

		if swag.IsZero(m.Service) { // not required
			return nil
		}

		if err := m.Service.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service")
			}
			return err
		}
	}

	return nil
}

func (m *V1RunSchema) contextValidateTfJob(ctx context.Context, formats strfmt.Registry) error {

	if m.TfJob != nil {

		if swag.IsZero(m.TfJob) { // not required
			return nil
		}

		if err := m.TfJob.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tfJob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tfJob")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1RunSchema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1RunSchema) UnmarshalBinary(b []byte) error {
	var res V1RunSchema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
