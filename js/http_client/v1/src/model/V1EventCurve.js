/**
 * Polyaxon SDKs and REST API specification.
 *
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import V1EventCurveKind from './V1EventCurveKind';

/**
 * The V1EventCurve model module.
 * @module model/V1EventCurve
 * @version 2.9.2
 */
class V1EventCurve {
    /**
     * Constructs a new <code>V1EventCurve</code>.
     * @alias module:model/V1EventCurve
     */
    constructor() {

        V1EventCurve.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) {
    }

    /**
     * Constructs a <code>V1EventCurve</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1EventCurve} obj Optional instance to populate.
     * @return {module:model/V1EventCurve} The populated <code>V1EventCurve</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1EventCurve();

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = V1EventCurveKind.constructFromObject(data['kind']);
            }
            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], ['Number']);
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], ['Number']);
            }
            if (data.hasOwnProperty('annotation')) {
                obj['annotation'] = ApiClient.convertToType(data['annotation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1EventCurve</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1EventCurve</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['x'])) {
            throw new Error("Expected the field `x` to be an array in the JSON data but got " + data['x']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['y'])) {
            throw new Error("Expected the field `y` to be an array in the JSON data but got " + data['y']);
        }
        // ensure the json data is a string
        if (data['annotation'] && !(typeof data['annotation'] === 'string' || data['annotation'] instanceof String)) {
            throw new Error("Expected the field `annotation` to be a primitive type in the JSON string but got " + data['annotation']);
        }

        return true;
    }


}



/**
 * @member {module:model/V1EventCurveKind} kind
 */
V1EventCurve.prototype['kind'] = undefined;

/**
 * @member {Array.<Number>} x
 */
V1EventCurve.prototype['x'] = undefined;

/**
 * @member {Array.<Number>} y
 */
V1EventCurve.prototype['y'] = undefined;

/**
 * @member {String} annotation
 */
V1EventCurve.prototype['annotation'] = undefined;






export default V1EventCurve;

