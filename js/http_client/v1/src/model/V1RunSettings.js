/**
 * Polyaxon SDKs and REST API specification.
 *
 *
 * The version of the OpenAPI document: 2.9.2
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import V1RunReferenceCatalog from './V1RunReferenceCatalog';
import V1SettingsCatalog from './V1SettingsCatalog';

/**
 * The V1RunSettings model module.
 * @module model/V1RunSettings
 * @version 2.9.2
 */
class V1RunSettings {
    /**
     * Constructs a new <code>V1RunSettings</code>.
     * @alias module:model/V1RunSettings
     */
    constructor() {

        V1RunSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) {
    }

    /**
     * Constructs a <code>V1RunSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1RunSettings} obj Optional instance to populate.
     * @return {module:model/V1RunSettings} The populated <code>V1RunSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1RunSettings();

            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('agent')) {
                obj['agent'] = V1SettingsCatalog.constructFromObject(data['agent']);
            }
            if (data.hasOwnProperty('queue')) {
                obj['queue'] = V1SettingsCatalog.constructFromObject(data['queue']);
            }
            if (data.hasOwnProperty('artifacts_store')) {
                obj['artifacts_store'] = V1SettingsCatalog.constructFromObject(data['artifacts_store']);
            }
            if (data.hasOwnProperty('tensorboard')) {
                obj['tensorboard'] = ApiClient.convertToType(data['tensorboard'], Object);
            }
            if (data.hasOwnProperty('build')) {
                obj['build'] = ApiClient.convertToType(data['build'], Object);
            }
            if (data.hasOwnProperty('component')) {
                obj['component'] = ApiClient.convertToType(data['component'], Object);
            }
            if (data.hasOwnProperty('models')) {
                obj['models'] = ApiClient.convertToType(data['models'], [V1RunReferenceCatalog]);
            }
            if (data.hasOwnProperty('artifacts')) {
                obj['artifacts'] = ApiClient.convertToType(data['artifacts'], [V1RunReferenceCatalog]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1RunSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1RunSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // validate the optional field `agent`
        if (data['agent']) { // data not null
          V1SettingsCatalog.validateJSON(data['agent']);
        }
        // validate the optional field `queue`
        if (data['queue']) { // data not null
          V1SettingsCatalog.validateJSON(data['queue']);
        }
        // validate the optional field `artifacts_store`
        if (data['artifacts_store']) { // data not null
          V1SettingsCatalog.validateJSON(data['artifacts_store']);
        }
        if (data['models']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['models'])) {
                throw new Error("Expected the field `models` to be an array in the JSON data but got " + data['models']);
            }
            // validate the optional field `models` (array)
            for (const item of data['models']) {
                V1RunReferenceCatalog.validateJSON(item);
            };
        }
        if (data['artifacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['artifacts'])) {
                throw new Error("Expected the field `artifacts` to be an array in the JSON data but got " + data['artifacts']);
            }
            // validate the optional field `artifacts` (array)
            for (const item of data['artifacts']) {
                V1RunReferenceCatalog.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} namespace
 */
V1RunSettings.prototype['namespace'] = undefined;

/**
 * @member {module:model/V1SettingsCatalog} agent
 */
V1RunSettings.prototype['agent'] = undefined;

/**
 * @member {module:model/V1SettingsCatalog} queue
 */
V1RunSettings.prototype['queue'] = undefined;

/**
 * @member {module:model/V1SettingsCatalog} artifacts_store
 */
V1RunSettings.prototype['artifacts_store'] = undefined;

/**
 * @member {Object} tensorboard
 */
V1RunSettings.prototype['tensorboard'] = undefined;

/**
 * @member {Object} build
 */
V1RunSettings.prototype['build'] = undefined;

/**
 * @member {Object} component
 */
V1RunSettings.prototype['component'] = undefined;

/**
 * @member {Array.<module:model/V1RunReferenceCatalog>} models
 */
V1RunSettings.prototype['models'] = undefined;

/**
 * @member {Array.<module:model/V1RunReferenceCatalog>} artifacts
 */
V1RunSettings.prototype['artifacts'] = undefined;






export default V1RunSettings;

