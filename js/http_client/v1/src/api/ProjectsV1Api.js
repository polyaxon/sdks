/**
 * Polyaxon SDKs and REST API specification.
 *
 *
 * The version of the OpenAPI document: 2.9.4
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RuntimeError from '../model/RuntimeError';
import V1EntityStageBodyRequest from '../model/V1EntityStageBodyRequest';
import V1ListActivitiesResponse from '../model/V1ListActivitiesResponse';
import V1ListBookmarksResponse from '../model/V1ListBookmarksResponse';
import V1ListProjectVersionsResponse from '../model/V1ListProjectVersionsResponse';
import V1ListProjectsResponse from '../model/V1ListProjectsResponse';
import V1Project from '../model/V1Project';
import V1ProjectSettings from '../model/V1ProjectSettings';
import V1ProjectVersion from '../model/V1ProjectVersion';
import V1Stage from '../model/V1Stage';

/**
* ProjectsV1 service.
* @module api/ProjectsV1Api
* @version 2.9.4
*/
export default class ProjectsV1Api {

    /**
    * Constructs a new ProjectsV1Api.
    * Polyaxon sdk
    * @alias module:api/ProjectsV1Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the archiveProject operation.
     * @callback module:api/ProjectsV1Api~archiveProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive project
     * @param {String} owner Owner of the namespace
     * @param {String} name Component under namespace
     * @param {module:api/ProjectsV1Api~archiveProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    archiveProject(owner, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling archiveProject");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling archiveProject");
      }

      let pathParams = {
        'owner': owner,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{name}/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bookmarkProject operation.
     * @callback module:api/ProjectsV1Api~bookmarkProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bookmark project
     * @param {String} owner Owner of the namespace
     * @param {String} name Component under namespace
     * @param {module:api/ProjectsV1Api~bookmarkProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bookmarkProject(owner, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling bookmarkProject");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling bookmarkProject");
      }

      let pathParams = {
        'owner': owner,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{name}/bookmark', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/ProjectsV1Api~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new project
     * @param {String} owner Owner of the namespace
     * @param {module:model/V1Project} body Project body
     * @param {module:api/ProjectsV1Api~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Project}
     */
    createProject(owner, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling createProject");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createProject");
      }

      let pathParams = {
        'owner': owner
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1Project;
      return this.apiClient.callApi(
        '/api/v1/{owner}/projects/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTeamProject operation.
     * @callback module:api/ProjectsV1Api~createTeamProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new project via team space
     * @param {String} owner Owner of the namespace
     * @param {String} team Team
     * @param {module:model/V1Project} body Project body
     * @param {module:api/ProjectsV1Api~createTeamProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Project}
     */
    createTeamProject(owner, team, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling createTeamProject");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling createTeamProject");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTeamProject");
      }

      let pathParams = {
        'owner': owner,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1Project;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{team}/projects/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVersion operation.
     * @callback module:api/ProjectsV1Api~createVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ProjectVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create version
     * @param {String} owner Owner of the namespace
     * @param {String} project Project name
     * @param {module:model/String} version_kind Optional kind to tell the kind of this version
     * @param {module:model/V1ProjectVersion} body Project version body
     * @param {module:api/ProjectsV1Api~createVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ProjectVersion}
     */
    createVersion(owner, project, version_kind, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling createVersion");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling createVersion");
      }
      // verify the required parameter 'version_kind' is set
      if (version_kind === undefined || version_kind === null) {
        throw new Error("Missing the required parameter 'version_kind' when calling createVersion");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createVersion");
      }

      let pathParams = {
        'owner': owner,
        'project': project,
        'version.kind': version_kind
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1ProjectVersion;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/versions/{version.kind}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVersionStage operation.
     * @callback module:api/ProjectsV1Api~createVersionStageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Stage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new artifact version stage
     * @param {String} owner Owner of the namespace
     * @param {String} entity Entity namespace
     * @param {String} kind Optional kind, only required for an version entity
     * @param {String} name Name of the entity to apply the stage to
     * @param {module:model/V1EntityStageBodyRequest} body
     * @param {module:api/ProjectsV1Api~createVersionStageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Stage}
     */
    createVersionStage(owner, entity, kind, name, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling createVersionStage");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling createVersionStage");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling createVersionStage");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createVersionStage");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createVersionStage");
      }

      let pathParams = {
        'owner': owner,
        'entity': entity,
        'kind': kind,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1Stage;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{entity}/versions/{kind}/{name}/stages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/ProjectsV1Api~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project
     * @param {String} owner Owner of the namespace
     * @param {String} name Component under namespace
     * @param {module:api/ProjectsV1Api~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProject(owner, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteProject");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteProject");
      }

      let pathParams = {
        'owner': owner,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVersion operation.
     * @callback module:api/ProjectsV1Api~deleteVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete version
     * @param {String} owner Owner of the namespace
     * @param {String} entity Entity: project name, hub name, registry name, ...
     * @param {String} kind Version Kind
     * @param {String} name Sub-entity name
     * @param {module:api/ProjectsV1Api~deleteVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVersion(owner, entity, kind, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteVersion");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling deleteVersion");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling deleteVersion");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteVersion");
      }

      let pathParams = {
        'owner': owner,
        'entity': entity,
        'kind': kind,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{entity}/versions/{kind}/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableProjectCI operation.
     * @callback module:api/ProjectsV1Api~disableProjectCICallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disbale project CI
     * @param {String} owner Owner of the namespace
     * @param {String} name Component under namespace
     * @param {module:api/ProjectsV1Api~disableProjectCICallback} callback The callback function, accepting three arguments: error, data, response
     */
    disableProjectCI(owner, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling disableProjectCI");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling disableProjectCI");
      }

      let pathParams = {
        'owner': owner,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{name}/ci', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableProjectCI operation.
     * @callback module:api/ProjectsV1Api~enableProjectCICallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable project CI
     * @param {String} owner Owner of the namespace
     * @param {String} name Component under namespace
     * @param {module:api/ProjectsV1Api~enableProjectCICallback} callback The callback function, accepting three arguments: error, data, response
     */
    enableProjectCI(owner, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling enableProjectCI");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling enableProjectCI");
      }

      let pathParams = {
        'owner': owner,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{name}/ci', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProject operation.
     * @callback module:api/ProjectsV1Api~getProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project
     * @param {String} owner Owner of the namespace
     * @param {String} name Component under namespace
     * @param {module:api/ProjectsV1Api~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Project}
     */
    getProject(owner, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getProject");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getProject");
      }

      let pathParams = {
        'owner': owner,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1Project;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectActivities operation.
     * @callback module:api/ProjectsV1Api~getProjectActivitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListActivitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project activities
     * @param {String} owner Owner of the namespace
     * @param {String} name Entity managing the resource
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Pagination offset.
     * @param {Number} [limit] Limit size.
     * @param {String} [sort] Sort to order the search.
     * @param {String} [query] Query filter the search.
     * @param {Boolean} [bookmarks] Filter by bookmarks.
     * @param {String} [mode] Mode of the search.
     * @param {Boolean} [no_page] No pagination.
     * @param {module:api/ProjectsV1Api~getProjectActivitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListActivitiesResponse}
     */
    getProjectActivities(owner, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getProjectActivities");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getProjectActivities");
      }

      let pathParams = {
        'owner': owner,
        'name': name
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
        'bookmarks': opts['bookmarks'],
        'mode': opts['mode'],
        'no_page': opts['no_page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1ListActivitiesResponse;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{name}/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectSettings operation.
     * @callback module:api/ProjectsV1Api~getProjectSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ProjectSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project settings
     * @param {String} owner Owner of the namespace
     * @param {String} name Component under namespace
     * @param {module:api/ProjectsV1Api~getProjectSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ProjectSettings}
     */
    getProjectSettings(owner, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getProjectSettings");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getProjectSettings");
      }

      let pathParams = {
        'owner': owner,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1ProjectSettings;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{name}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectStats operation.
     * @callback module:api/ProjectsV1Api~getProjectStatsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project stats
     * @param {String} owner Owner of the namespace
     * @param {String} name Entity managing the resource
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Pagination offset.
     * @param {Number} [limit] Limit size.
     * @param {String} [sort] Sort to order the search.
     * @param {String} [query] Query filter the search.
     * @param {Boolean} [bookmarks] Filter by bookmarks.
     * @param {String} [mode] Stats Mode.
     * @param {String} [kind] Stats Kind.
     * @param {String} [aggregate] Stats aggregate.
     * @param {String} [groupby] Stats group.
     * @param {String} [trunc] Stats trunc.
     * @param {String} [start_date] Stats start date.
     * @param {String} [end_date] Stats end date.
     * @param {Boolean} [boundary] Stats boundary.
     * @param {module:api/ProjectsV1Api~getProjectStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getProjectStats(owner, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getProjectStats");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getProjectStats");
      }

      let pathParams = {
        'owner': owner,
        'name': name
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
        'bookmarks': opts['bookmarks'],
        'mode': opts['mode'],
        'kind': opts['kind'],
        'aggregate': opts['aggregate'],
        'groupby': opts['groupby'],
        'trunc': opts['trunc'],
        'start_date': opts['start_date'],
        'end_date': opts['end_date'],
        'boundary': opts['boundary']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{name}/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVersion operation.
     * @callback module:api/ProjectsV1Api~getVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ProjectVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get version
     * @param {String} owner Owner of the namespace
     * @param {String} entity Entity: project name, hub name, registry name, ...
     * @param {String} kind Version Kind
     * @param {String} name Sub-entity name
     * @param {module:api/ProjectsV1Api~getVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ProjectVersion}
     */
    getVersion(owner, entity, kind, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getVersion");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling getVersion");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getVersion");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getVersion");
      }

      let pathParams = {
        'owner': owner,
        'entity': entity,
        'kind': kind,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1ProjectVersion;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{entity}/versions/{kind}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVersionStages operation.
     * @callback module:api/ProjectsV1Api~getVersionStagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Stage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get version stages
     * @param {String} owner Owner of the namespace
     * @param {String} entity Entity: project name, hub name, registry name, ...
     * @param {String} kind Version Kind
     * @param {String} name Sub-entity name
     * @param {module:api/ProjectsV1Api~getVersionStagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Stage}
     */
    getVersionStages(owner, entity, kind, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getVersionStages");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling getVersionStages");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getVersionStages");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getVersionStages");
      }

      let pathParams = {
        'owner': owner,
        'entity': entity,
        'kind': kind,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1Stage;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{entity}/versions/{kind}/{name}/stages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listArchivedProjects operation.
     * @callback module:api/ProjectsV1Api~listArchivedProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListProjectsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List archived projects for user
     * @param {String} user User
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Pagination offset.
     * @param {Number} [limit] Limit size.
     * @param {String} [sort] Sort to order the search.
     * @param {String} [query] Query filter the search.
     * @param {Boolean} [no_page] No pagination.
     * @param {module:api/ProjectsV1Api~listArchivedProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListProjectsResponse}
     */
    listArchivedProjects(user, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling listArchivedProjects");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
        'no_page': opts['no_page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1ListProjectsResponse;
      return this.apiClient.callApi(
        '/api/v1/archives/{user}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBookmarkedProjects operation.
     * @callback module:api/ProjectsV1Api~listBookmarkedProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListBookmarksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List bookmarked projects for user
     * @param {String} user User
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Pagination offset.
     * @param {Number} [limit] Limit size.
     * @param {String} [sort] Sort to order the search.
     * @param {String} [query] Query filter the search.
     * @param {Boolean} [no_page] No pagination.
     * @param {module:api/ProjectsV1Api~listBookmarkedProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListBookmarksResponse}
     */
    listBookmarkedProjects(user, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling listBookmarkedProjects");
      }

      let pathParams = {
        'user': user
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
        'no_page': opts['no_page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1ListBookmarksResponse;
      return this.apiClient.callApi(
        '/api/v1/bookmarks/{user}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProjectNames operation.
     * @callback module:api/ProjectsV1Api~listProjectNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListProjectsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List project names
     * @param {String} owner Owner of the namespace
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Pagination offset.
     * @param {Number} [limit] Limit size.
     * @param {String} [sort] Sort to order the search.
     * @param {String} [query] Query filter the search.
     * @param {Boolean} [bookmarks] Filter by bookmarks.
     * @param {String} [mode] Mode of the search.
     * @param {Boolean} [no_page] No pagination.
     * @param {module:api/ProjectsV1Api~listProjectNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListProjectsResponse}
     */
    listProjectNames(owner, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listProjectNames");
      }

      let pathParams = {
        'owner': owner
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
        'bookmarks': opts['bookmarks'],
        'mode': opts['mode'],
        'no_page': opts['no_page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1ListProjectsResponse;
      return this.apiClient.callApi(
        '/api/v1/{owner}/projects/names', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProjects operation.
     * @callback module:api/ProjectsV1Api~listProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListProjectsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List projects
     * @param {String} owner Owner of the namespace
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Pagination offset.
     * @param {Number} [limit] Limit size.
     * @param {String} [sort] Sort to order the search.
     * @param {String} [query] Query filter the search.
     * @param {Boolean} [bookmarks] Filter by bookmarks.
     * @param {String} [mode] Mode of the search.
     * @param {Boolean} [no_page] No pagination.
     * @param {module:api/ProjectsV1Api~listProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListProjectsResponse}
     */
    listProjects(owner, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listProjects");
      }

      let pathParams = {
        'owner': owner
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
        'bookmarks': opts['bookmarks'],
        'mode': opts['mode'],
        'no_page': opts['no_page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1ListProjectsResponse;
      return this.apiClient.callApi(
        '/api/v1/{owner}/projects/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVersionNames operation.
     * @callback module:api/ProjectsV1Api~listVersionNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListProjectVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List versions names
     * @param {String} owner Owner of the namespace
     * @param {String} entity Entity name under namespace
     * @param {String} kind Version Kind
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Pagination offset.
     * @param {Number} [limit] Limit size.
     * @param {String} [sort] Sort to order the search.
     * @param {String} [query] Query filter the search.
     * @param {Boolean} [no_page] No pagination.
     * @param {module:api/ProjectsV1Api~listVersionNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListProjectVersionsResponse}
     */
    listVersionNames(owner, entity, kind, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listVersionNames");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling listVersionNames");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling listVersionNames");
      }

      let pathParams = {
        'owner': owner,
        'entity': entity,
        'kind': kind
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
        'no_page': opts['no_page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1ListProjectVersionsResponse;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{entity}/versions/{kind}/names', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVersions operation.
     * @callback module:api/ProjectsV1Api~listVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListProjectVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List versions
     * @param {String} owner Owner of the namespace
     * @param {String} entity Entity name under namespace
     * @param {String} kind Version Kind
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Pagination offset.
     * @param {Number} [limit] Limit size.
     * @param {String} [sort] Sort to order the search.
     * @param {String} [query] Query filter the search.
     * @param {Boolean} [no_page] No pagination.
     * @param {module:api/ProjectsV1Api~listVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListProjectVersionsResponse}
     */
    listVersions(owner, entity, kind, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listVersions");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling listVersions");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling listVersions");
      }

      let pathParams = {
        'owner': owner,
        'entity': entity,
        'kind': kind
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
        'no_page': opts['no_page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1ListProjectVersionsResponse;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{entity}/versions/{kind}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchProject operation.
     * @callback module:api/ProjectsV1Api~patchProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch project
     * @param {String} owner Owner of the namespace
     * @param {String} project_name Required name
     * @param {module:model/V1Project} body Project body
     * @param {module:api/ProjectsV1Api~patchProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Project}
     */
    patchProject(owner, project_name, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling patchProject");
      }
      // verify the required parameter 'project_name' is set
      if (project_name === undefined || project_name === null) {
        throw new Error("Missing the required parameter 'project_name' when calling patchProject");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchProject");
      }

      let pathParams = {
        'owner': owner,
        'project.name': project_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1Project;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{project.name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchProjectSettings operation.
     * @callback module:api/ProjectsV1Api~patchProjectSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ProjectSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch project settings
     * @param {String} owner Owner of the namespace
     * @param {String} project Project name
     * @param {module:model/V1ProjectSettings} body Project settings body
     * @param {module:api/ProjectsV1Api~patchProjectSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ProjectSettings}
     */
    patchProjectSettings(owner, project, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling patchProjectSettings");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling patchProjectSettings");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchProjectSettings");
      }

      let pathParams = {
        'owner': owner,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1ProjectSettings;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/settings', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchVersion operation.
     * @callback module:api/ProjectsV1Api~patchVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ProjectVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch version
     * @param {String} owner Owner of the namespace
     * @param {String} project Project name
     * @param {module:model/String} version_kind Optional kind to tell the kind of this version
     * @param {String} version_name Optional component name, should be a valid fully qualified value: name[:version]
     * @param {module:model/V1ProjectVersion} body Project version body
     * @param {module:api/ProjectsV1Api~patchVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ProjectVersion}
     */
    patchVersion(owner, project, version_kind, version_name, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling patchVersion");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling patchVersion");
      }
      // verify the required parameter 'version_kind' is set
      if (version_kind === undefined || version_kind === null) {
        throw new Error("Missing the required parameter 'version_kind' when calling patchVersion");
      }
      // verify the required parameter 'version_name' is set
      if (version_name === undefined || version_name === null) {
        throw new Error("Missing the required parameter 'version_name' when calling patchVersion");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchVersion");
      }

      let pathParams = {
        'owner': owner,
        'project': project,
        'version.kind': version_kind,
        'version.name': version_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1ProjectVersion;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/versions/{version.kind}/{version.name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreProject operation.
     * @callback module:api/ProjectsV1Api~restoreProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore project
     * @param {String} owner Owner of the namespace
     * @param {String} name Component under namespace
     * @param {module:api/ProjectsV1Api~restoreProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restoreProject(owner, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling restoreProject");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling restoreProject");
      }

      let pathParams = {
        'owner': owner,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{name}/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferVersion operation.
     * @callback module:api/ProjectsV1Api~transferVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer version
     * @param {String} owner Owner of the namespace
     * @param {String} project Project name
     * @param {module:model/String} version_kind Optional kind to tell the kind of this version
     * @param {String} version_name Optional component name, should be a valid fully qualified value: name[:version]
     * @param {module:model/V1ProjectVersion} body Project version body
     * @param {module:api/ProjectsV1Api~transferVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transferVersion(owner, project, version_kind, version_name, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling transferVersion");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling transferVersion");
      }
      // verify the required parameter 'version_kind' is set
      if (version_kind === undefined || version_kind === null) {
        throw new Error("Missing the required parameter 'version_kind' when calling transferVersion");
      }
      // verify the required parameter 'version_name' is set
      if (version_name === undefined || version_name === null) {
        throw new Error("Missing the required parameter 'version_name' when calling transferVersion");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling transferVersion");
      }

      let pathParams = {
        'owner': owner,
        'project': project,
        'version.kind': version_kind,
        'version.name': version_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/versions/{version.kind}/{version.name}/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unbookmarkProject operation.
     * @callback module:api/ProjectsV1Api~unbookmarkProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unbookmark project
     * @param {String} owner Owner of the namespace
     * @param {String} name Component under namespace
     * @param {module:api/ProjectsV1Api~unbookmarkProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unbookmarkProject(owner, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling unbookmarkProject");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling unbookmarkProject");
      }

      let pathParams = {
        'owner': owner,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{name}/unbookmark', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback module:api/ProjectsV1Api~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project
     * @param {String} owner Owner of the namespace
     * @param {String} project_name Required name
     * @param {module:model/V1Project} body Project body
     * @param {module:api/ProjectsV1Api~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Project}
     */
    updateProject(owner, project_name, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling updateProject");
      }
      // verify the required parameter 'project_name' is set
      if (project_name === undefined || project_name === null) {
        throw new Error("Missing the required parameter 'project_name' when calling updateProject");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProject");
      }

      let pathParams = {
        'owner': owner,
        'project.name': project_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1Project;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{project.name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProjectSettings operation.
     * @callback module:api/ProjectsV1Api~updateProjectSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ProjectSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project settings
     * @param {String} owner Owner of the namespace
     * @param {String} project Project name
     * @param {module:model/V1ProjectSettings} body Project settings body
     * @param {module:api/ProjectsV1Api~updateProjectSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ProjectSettings}
     */
    updateProjectSettings(owner, project, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling updateProjectSettings");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling updateProjectSettings");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProjectSettings");
      }

      let pathParams = {
        'owner': owner,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1ProjectSettings;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVersion operation.
     * @callback module:api/ProjectsV1Api~updateVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ProjectVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update version
     * @param {String} owner Owner of the namespace
     * @param {String} project Project name
     * @param {module:model/String} version_kind Optional kind to tell the kind of this version
     * @param {String} version_name Optional component name, should be a valid fully qualified value: name[:version]
     * @param {module:model/V1ProjectVersion} body Project version body
     * @param {module:api/ProjectsV1Api~updateVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ProjectVersion}
     */
    updateVersion(owner, project, version_kind, version_name, body, callback) {
      let postBody = body;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling updateVersion");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling updateVersion");
      }
      // verify the required parameter 'version_kind' is set
      if (version_kind === undefined || version_kind === null) {
        throw new Error("Missing the required parameter 'version_kind' when calling updateVersion");
      }
      // verify the required parameter 'version_name' is set
      if (version_name === undefined || version_name === null) {
        throw new Error("Missing the required parameter 'version_name' when calling updateVersion");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateVersion");
      }

      let pathParams = {
        'owner': owner,
        'project': project,
        'version.kind': version_kind,
        'version.name': version_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1ProjectVersion;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/versions/{version.kind}/{version.name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadProjectArtifact operation.
     * @callback module:api/ProjectsV1Api~uploadProjectArtifactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload artifact to a store via project access
     * @param {String} owner Owner of the namespace
     * @param {String} project Project having access to the store
     * @param {String} uuid Unique integer identifier of the entity
     * @param {File} uploadfile The file to upload.
     * @param {Object} opts Optional parameters
     * @param {String} [path] File path query params.
     * @param {Boolean} [overwrite] File path query params.
     * @param {module:api/ProjectsV1Api~uploadProjectArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadProjectArtifact(owner, project, uuid, uploadfile, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling uploadProjectArtifact");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling uploadProjectArtifact");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling uploadProjectArtifact");
      }
      // verify the required parameter 'uploadfile' is set
      if (uploadfile === undefined || uploadfile === null) {
        throw new Error("Missing the required parameter 'uploadfile' when calling uploadProjectArtifact");
      }

      let pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      let queryParams = {
        'path': opts['path'],
        'overwrite': opts['overwrite']
      };
      let headerParams = {
      };
      let formParams = {
        'uploadfile': uploadfile
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/artifacts/{uuid}/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
